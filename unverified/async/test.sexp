((Dtype (unk unk) ((("'a") "option" ("Some" (Atvar "'a")) ("None")))) (Dtype (unk unk) ((nil "ordering" ("Greater") ("Equal") ("Less")))) (Dtype (unk unk) ((("'a" "'b") "sum" ("Inr" (Atvar "'b")) ("Inl" (Atvar "'a"))))) (Dtype (unk unk) ((("'a") "app_list" ("Nil") ("Append" (Atapp ((Atvar "'a")) (Short "app_list")) (Atapp ((Atvar "'a")) (Short "app_list"))) ("List" (Atapp ((Atvar "'a")) (Short "list")))))) (Dlet (unk unk) "fst" (Fun "v3" (Mat (Var (Short "v3")) (((Pcon NONE ("v2" "v1")) Var (Short "v2")))))) (Dlet (unk unk) "snd" (Fun "v3" (Mat (Var (Short "v3")) (((Pcon NONE ("v2" "v1")) Var (Short "v1")))))) (Dlet (unk unk) "curry" (Fun "v1" (Fun "v2" (Fun "v3" (App Opapp ((Var (Short "v1")) (Con NONE ((Var (Short "v2")) (Var (Short "v3")))))))))) (Dlet (unk unk) "uncurry" (Fun "v1" (Fun "v2" (App Opapp ((App Opapp ((Var (Short "v1")) (App Opapp ((Var (Short "fst")) (Var (Short "v2")))))) (App Opapp ((Var (Short "snd")) (Var (Short "v2"))))))))) (Dlet (unk unk) "o" (Fun "v2" (Fun "v3" (Fun "v1" (App Opapp ((Var (Short "v2")) (App Opapp ((Var (Short "v3")) (Var (Short "v1")))))))))) (Dlet (unk unk) "id" (Fun "v1" (Var (Short "v1")))) (Dlet (unk unk) "flip" (Fun "v3" (Fun "v2" (Fun "v1" (App Opapp ((App Opapp ((Var (Short "v3")) (Var (Short "v1")))) (Var (Short "v2")))))))) (Dlet (unk unk) "const" (Fun "v2" (Fun "v1" (Var (Short "v2"))))) (Dlet (unk unk) "update" (Fun "v3" (Fun "v4" (Fun "v2" (Fun "v1" (If (App Equality ((Var (Short "v3")) (Var (Short "v1")))) (Var (Short "v4")) (App Opapp ((Var (Short "v2")) (Var (Short "v1")))))))))) (Dletrec (unk unk) (("exp" "v2" Fun "v3" (Fun "v1" (If (App Equality ((Var (Short "v3")) (Lit 0))) (Var (Short "v1")) (App Opapp ((App Opapp ((App Opapp ((Var (Short "exp")) (Var (Short "v2")))) (Let (SOME "k") (App OpnMinus ((Var (Short "v3")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))) (App OpnTimes ((Var (Short "v2")) (Var (Short "v1"))))))))))) (Dlet (unk unk) "exp" (Fun "v1" (Fun "v2" (App Opapp ((App Opapp ((App Opapp ((Var (Short "exp")) (Var (Short "v1")))) (Var (Short "v2")))) (Lit 1)))))) (Dlet (unk unk) "min" (Fun "v1" (Fun "v2" (If (App OpbLt ((Var (Short "v1")) (Var (Short "v2")))) (Var (Short "v1")) (Var (Short "v2")))))) (Dlet (unk unk) "max" (Fun "v1" (Fun "v2" (If (App OpbLt ((Var (Short "v1")) (Var (Short "v2")))) (Var (Short "v2")) (Var (Short "v1")))))) (Dlet (unk unk) "even" (Fun "v1" (App Equality ((App OpnModulo ((Var (Short "v1")) (Lit 2))) (Lit 0))))) (Dlet (unk unk) "odd" (Fun "v1" (App OpbLt ((Lit 0) (App OpnModulo ((Var (Short "v1")) (Lit 2))))))) (Dletrec (unk unk) (("funpow" "v1" Fun "v2" (Fun "v3" (If (App Equality ((Var (Short "v2")) (Lit 0))) (Var (Short "v3")) (App Opapp ((App Opapp ((App Opapp ((Var (Short "funpow")) (Var (Short "v1")))) (Let (SOME "k") (App OpnMinus ((Var (Short "v2")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))) (App Opapp ((Var (Short "v1")) (Var (Short "v3"))))))))))) (Dlet (unk unk) "abs_diff" (Fun "v2" (Fun "v1" (If (App OpbLt ((Var (Short "v2")) (Var (Short "v1")))) (Let (SOME "k") (App OpnMinus ((Var (Short "v1")) (Var (Short "v2")))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))) (Let (SOME "k") (App OpnMinus ((Var (Short "v2")) (Var (Short "v1")))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))))) (Dlet (unk unk) "pre" (Fun "v1" (Let (SOME "k") (App OpnMinus ((Var (Short "v1")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))) (Dletrec (unk unk) (("while" "v1" Fun "v2" (Fun "v3" (If (App Opapp ((Var (Short "v1")) (Var (Short "v3")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "while")) (Var (Short "v1")))) (Var (Short "v2")))) (App Opapp ((Var (Short "v2")) (Var (Short "v3")))))) (Var (Short "v3"))))))) (Dletrec (unk unk) (("owhile" "v1" Fun "v2" (Fun "v3" (If (App Opapp ((Var (Short "v1")) (Var (Short "v3")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "owhile")) (Var (Short "v1")))) (Var (Short "v2")))) (App Opapp ((Var (Short "v2")) (Var (Short "v3")))))) (Con (SOME (Short "Some")) ((Var (Short "v3"))))))))) (Dlet (unk unk) "least" (Fun "v3" (App Opapp ((App Opapp ((App Opapp ((Var (Short "while")) (Fun "v1" (App Equality ((App Opapp ((Var (Short "v3")) (Var (Short "v1")))) (App OpbLt ((Lit 0) (Lit 0)))))))) (Fun "v2" (App OpnPlus ((Var (Short "v2")) (Lit 1)))))) (Lit 0))))) (Dlocal ((Dletrec (unk unk) (("append_aux" "v4" Fun "v5" (Mat (Var (Short "v4")) (((Pcon (SOME (Short "List")) ("v1")) App ListAppend ((Var (Short "v1")) (Var (Short "v5")))) ((Pcon (SOME (Short "Append")) ("v3" "v2")) App Opapp ((App Opapp ((Var (Short "append_aux")) (Var (Short "v3")))) (App Opapp ((App Opapp ((Var (Short "append_aux")) (Var (Short "v2")))) (Var (Short "v5")))))) ((Pcon (SOME (Short "Nil")) nil) Var (Short "v5")))))))) ((Dlet (unk unk) "append" (Fun "v1" (App Opapp ((App Opapp ((Var (Short "append_aux")) (Var (Short "v1")))) (Con (SOME (Short "[]")) nil))))))) (Dletrec ((0 16) (0 46)) (("repeat" "f" Fun "x" (Let (SOME " v0") (App Opapp ((Var (Short "f")) (Var (Short "x")))) (App Opapp ((App Opapp ((Var (Short "repeat")) (Var (Short "f")))) (Var (Short " v0")))))))) (Dmod "Runtime" ((Dtabbrev (unk unk) nil "unit" (Attup nil)) (Dlet (unk unk) "fullGC" (Fun "v1" (Mat (Var (Short "v1")) (((Pcon NONE nil) App ConfigGC ((Lit 0) (Lit 0))))))) (Dlet (unk unk) "fail" (Fun "v1" (Mat (Var (Short "v1")) (((Pcon NONE nil) Let (SOME "a") (Var (Short "v1")) (Let (SOME "n") (Lit 18446744073709551616) (Let NONE (App Aalloc ((Var (Short "n")) (Var (Short "n")))) (Var (Short "a"))))))))) (Dlet (unk unk) "debugMsg" (Fun "v1" (App (FFI . "") ((Var (Short "v1")) (App Aw8alloc ((Lit 0) (Lit (word8 0)))))))) (Dletrec (unk unk) (("exit" "i" Let (SOME "y") (App W8fromInt ((Var (Short "i")))) (Let (SOME "x") (App Aw8alloc ((Lit 1) (Var (Short "y")))) (App (FFI . "exit") ((Lit "") (Var (Short "x")))))))) (Dletrec ((0 15) (0 50)) (("abort" "u" Mat (Var (Short "u")) (((Pcon NONE nil) App Opapp ((Var (Short "exit")) (Lit 1))))))) (Dletrec ((1 2) (5 15)) (("assert" "cond" Fun "msg" (If (Var (Short "cond")) (Con NONE nil) (Let NONE (App Opapp ((Var (Short "debugMsg")) (Var (Short "msg")))) (Let (SOME " v0") (Con NONE nil) (App Opapp ((Var (Short "abort")) (Var (Short " v0")))))))))))) (Dmod "Option" ((Dtabbrev (unk unk) ("'a") "option" (Atapp ((Atvar "'a")) (Short "option"))) (Dlet (unk unk) "getOpt" (Fun "v3" (Fun "v2" (Mat (Var (Short "v3")) (((Pcon (SOME (Short "None")) nil) Var (Short "v2")) ((Pcon (SOME (Short "Some")) ("v1")) Var (Short "v1"))))))) (Dlet (unk unk) "isSome" (Fun "v2" (Mat (Var (Short "v2")) (((Pcon (SOME (Short "None")) nil) App OpbLt ((Lit 0) (Lit 0))) ((Pcon (SOME (Short "Some")) ("v1")) App OpbLeq ((Lit 0) (Lit 0))))))) (Dlet (unk unk) "valOf" (Fun "v" (Mat (Var (Short "v")) (((Pcon (SOME (Short "None")) nil) Raise (Con (SOME (Short "Bind")) nil)) ((Pcon (SOME (Short "Some")) ("v1")) Var (Short "v1")))))) (Dlet (unk unk) "join" (Fun "v2" (Mat (Var (Short "v2")) (((Pcon (SOME (Short "None")) nil) Con (SOME (Short "None")) nil) ((Pcon (SOME (Short "Some")) ("v1")) Var (Short "v1")))))) (Dlet (unk unk) "map" (Fun "v2" (Fun "v3" (Mat (Var (Short "v3")) (((Pcon (SOME (Short "None")) nil) Con (SOME (Short "None")) nil) ((Pcon (SOME (Short "Some")) ("v1")) Con (SOME (Short "Some")) ((App Opapp ((Var (Short "v2")) (Var (Short "v1"))))))))))) (Dlet (unk unk) "mapPartial" (Fun "v2" (Fun "v3" (Mat (Var (Short "v3")) (((Pcon (SOME (Short "None")) nil) Con (SOME (Short "None")) nil) ((Pcon (SOME (Short "Some")) ("v1")) App Opapp ((Var (Short "v2")) (Var (Short "v1"))))))))) (Dlet (unk unk) "compose" (Fun "v3" (Fun "v4" (Fun "v2" (Mat (App Opapp ((Var (Short "v4")) (Var (Short "v2")))) (((Pcon (SOME (Short "None")) nil) Con (SOME (Short "None")) nil) ((Pcon (SOME (Short "Some")) ("v1")) Con (SOME (Short "Some")) ((App Opapp ((Var (Short "v3")) (Var (Short "v1")))))))))))) (Dlet (unk unk) "composePartial" (Fun "v3" (Fun "v4" (Fun "v2" (Mat (App Opapp ((Var (Short "v4")) (Var (Short "v2")))) (((Pcon (SOME (Short "None")) nil) Con (SOME (Short "None")) nil) ((Pcon (SOME (Short "Some")) ("v1")) App Opapp ((Var (Short "v3")) (Var (Short "v1")))))))))) (Dlet (unk unk) "isNone" (Fun "v2" (Mat (Var (Short "v2")) (((Pcon (SOME (Short "None")) nil) App OpbLeq ((Lit 0) (Lit 0))) ((Pcon (SOME (Short "Some")) ("v1")) App OpbLt ((Lit 0) (Lit 0))))))) (Dlet (unk unk) "map2" (Fun "v1" (Fun "v2" (Fun "v3" (If (Log And (App Opapp ((Var (Short "isSome")) (Var (Short "v2")))) (App Opapp ((Var (Short "isSome")) (Var (Short "v3"))))) (Con (SOME (Short "Some")) ((App Opapp ((App Opapp ((Var (Short "v1")) (App Opapp ((Var (Short "valOf")) (Var (Short "v2")))))) (App Opapp ((Var (Short "valOf")) (Var (Short "v3")))))))) (Con (SOME (Short "None")) nil)))))) (Dlet (unk unk) "compare" (Fun "v4" (Fun "v5" (Fun "v6" (Mat (Var (Short "v5")) (((Pcon (SOME (Short "None")) nil) Mat (Var (Short "v6")) (((Pcon (SOME (Short "None")) nil) Con (SOME (Short "Equal")) nil) ((Pcon (SOME (Short "Some")) ("v1")) Con (SOME (Short "Less")) nil))) ((Pcon (SOME (Short "Some")) ("v3")) Mat (Var (Short "v6")) (((Pcon (SOME (Short "None")) nil) Con (SOME (Short "Greater")) nil) ((Pcon (SOME (Short "Some")) ("v2")) App Opapp ((App Opapp ((Var (Short "v4")) (Var (Short "v3")))) (Var (Short "v2")))))))))))))) (Dmod "List" ((Dtabbrev (unk unk) ("'a") "list" (Atapp ((Atvar "'a")) (Short "list"))) (Dlet (unk unk) "null" (Fun "v3" (Mat (Var (Short "v3")) (((Pcon (SOME (Short "[]")) nil) App OpbLeq ((Lit 0) (Lit 0))) ((Pcon (SOME (Short "::")) ("v2" "v1")) App OpbLt ((Lit 0) (Lit 0))))))) (Dlocal ((Dletrec (unk unk) (("length_aux" "v3" Fun "v4" (Mat (Var (Short "v3")) (((Pcon (SOME (Short "[]")) nil) Var (Short "v4")) ((Pcon (SOME (Short "::")) ("v2" "v1")) App Opapp ((App Opapp ((Var (Short "length_aux")) (Var (Short "v1")))) (App OpnPlus ((Var (Short "v4")) (Lit 1))))))))))) ((Dlet (unk unk) "length" (Fun "v1" (App Opapp ((App Opapp ((Var (Short "length_aux")) (Var (Short "v1")))) (Lit 0))))) (Dlocal ((Dletrec (unk unk) (("rev" "v4" Fun "v3" (Mat (Var (Short "v4")) (((Pcon (SOME (Short "[]")) nil) Var (Short "v3")) ((Pcon (SOME (Short "::")) ("v2" "v1")) App Opapp ((App Opapp ((Var (Short "rev")) (Var (Short "v1")))) (Con (SOME (Short "::")) ((Var (Short "v2")) (Var (Short "v3"))))))))))) (Dletrec (unk unk) (("map_rev'" "v4" Fun "v5" (Fun "v3" (Mat (Var (Short "v5")) (((Pcon (SOME (Short "[]")) nil) Var (Short "v3")) ((Pcon (SOME (Short "::")) ("v2" "v1")) App Opapp ((App Opapp ((App Opapp ((Var (Short "map_rev'")) (Var (Short "v4")))) (Var (Short "v1")))) (Con (SOME (Short "::")) ((App Opapp ((Var (Short "v4")) (Var (Short "v2")))) (Var (Short "v3")))))))))))) (Dletrec (unk unk) (("filter_rev'" "v3" Fun "v5" (Fun "v4" (Mat (Var (Short "v5")) (((Pcon (SOME (Short "[]")) nil) Var (Short "v4")) ((Pcon (SOME (Short "::")) ("v2" "v1")) If (App Opapp ((Var (Short "v3")) (Var (Short "v2")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "filter_rev'")) (Var (Short "v3")))) (Var (Short "v1")))) (Con (SOME (Short "::")) ((Var (Short "v2")) (Var (Short "v4")))))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "filter_rev'")) (Var (Short "v3")))) (Var (Short "v1")))) (Var (Short "v4"))))))))))) (Dletrec (unk unk) (("flat_rev'" "v4" Fun "v3" (Mat (Var (Short "v4")) (((Pcon (SOME (Short "[]")) nil) Var (Short "v3")) ((Pcon (SOME (Short "::")) ("v2" "v1")) App Opapp ((App Opapp ((Var (Short "flat_rev'")) (Var (Short "v1")))) (App Opapp ((App Opapp ((Var (Short "rev")) (Var (Short "v2")))) (Var (Short "v3")))))))))))) ((Dlet (unk unk) "rev" (Fun "v1" (App Opapp ((App Opapp ((Var (Short "rev")) (Var (Short "v1")))) (Con (SOME (Short "[]")) nil))))) (Dlet (unk unk) "mapRev" (Fun "v1" (Fun "v2" (App Opapp ((App Opapp ((App Opapp ((Var (Short "map_rev'")) (Var (Short "v1")))) (Var (Short "v2")))) (Con (SOME (Short "[]")) nil)))))) (Dlet (unk unk) "filterRev" (Fun "v1" (Fun "v2" (App Opapp ((App Opapp ((App Opapp ((Var (Short "filter_rev'")) (Var (Short "v1")))) (Var (Short "v2")))) (Con (SOME (Short "[]")) nil)))))) (Dlet (unk unk) "flatRev" (Fun "v1" (App Opapp ((App Opapp ((Var (Short "flat_rev'")) (Var (Short "v1")))) (Con (SOME (Short "[]")) nil))))) (Dlet (unk unk) "@" (Fun "v1" (Fun "v2" (App ListAppend ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "hd" (Fun "v" (Mat (Var (Short "v")) (((Pcon (SOME (Short "[]")) nil) Raise (Con (SOME (Short "Bind")) nil)) ((Pcon (SOME (Short "::")) ("v2" "v1")) Var (Short "v2")))))) (Dlet (unk unk) "tl" (Fun "v3" (Mat (Var (Short "v3")) (((Pcon (SOME (Short "[]")) nil) Con (SOME (Short "[]")) nil) ((Pcon (SOME (Short "::")) ("v2" "v1")) Var (Short "v1")))))) (Dletrec (unk unk) (("last" "v" Mat (Var (Short "v")) (((Pcon (SOME (Short "[]")) nil) Raise (Con (SOME (Short "Bind")) nil)) ((Pcon (SOME (Short "::")) ("v2" "v1")) If (App Equality ((Var (Short "v1")) (Con (SOME (Short "[]")) nil))) (Var (Short "v2")) (App Opapp ((Var (Short "last")) (Var (Short "v1"))))))))) (Dlet (unk unk) "getItem" (Fun "v3" (Mat (Var (Short "v3")) (((Pcon (SOME (Short "[]")) nil) Con (SOME (Short "None")) nil) ((Pcon (SOME (Short "::")) ("v2" "v1")) Con (SOME (Short "Some")) ((Con NONE ((Var (Short "v2")) (Var (Short "v1")))))))))) (Dletrec (unk unk) (("nth" "v1" Fun "v2" (If (App Equality ((Var (Short "v2")) (Lit 0))) (App Opapp ((Var (Short "hd")) (Var (Short "v1")))) (App Opapp ((App Opapp ((Var (Short "nth")) (App Opapp ((Var (Short "tl")) (Var (Short "v1")))))) (Let (SOME "k") (App OpnMinus ((Var (Short "v2")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))))))) (Dletrec (unk unk) (("take" "v3" Fun "v4" (Mat (Var (Short "v3")) (((Pcon (SOME (Short "[]")) nil) Con (SOME (Short "[]")) nil) ((Pcon (SOME (Short "::")) ("v2" "v1")) If (App Equality ((Var (Short "v4")) (Lit 0))) (Con (SOME (Short "[]")) nil) (Con (SOME (Short "::")) ((Var (Short "v2")) (App Opapp ((App Opapp ((Var (Short "take")) (Var (Short "v1")))) (Let (SOME "k") (App OpnMinus ((Var (Short "v4")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))))))))))) (Dletrec (unk unk) (("drop" "v3" Fun "v4" (Mat (Var (Short "v3")) (((Pcon (SOME (Short "[]")) nil) Con (SOME (Short "[]")) nil) ((Pcon (SOME (Short "::")) ("v2" "v1")) If (App Equality ((Var (Short "v4")) (Lit 0))) (Con (SOME (Short "::")) ((Var (Short "v2")) (Var (Short "v1")))) (App Opapp ((App Opapp ((Var (Short "drop")) (Var (Short "v1")))) (Let (SOME "k") (App OpnMinus ((Var (Short "v4")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))))))))) (Dletrec (unk unk) (("takeUntil" "v3" Fun "v4" (Mat (Var (Short "v4")) (((Pcon (SOME (Short "[]")) nil) Con (SOME (Short "[]")) nil) ((Pcon (SOME (Short "::")) ("v2" "v1")) If (App Opapp ((Var (Short "v3")) (Var (Short "v2")))) (Con (SOME (Short "[]")) nil) (Con (SOME (Short "::")) ((Var (Short "v2")) (App Opapp ((App Opapp ((Var (Short "takeUntil")) (Var (Short "v3")))) (Var (Short "v1")))))))))))) (Dletrec (unk unk) (("dropUntil" "v3" Fun "v4" (Mat (Var (Short "v4")) (((Pcon (SOME (Short "[]")) nil) Con (SOME (Short "[]")) nil) ((Pcon (SOME (Short "::")) ("v2" "v1")) If (App Opapp ((Var (Short "v3")) (Var (Short "v2")))) (Con (SOME (Short "::")) ((Var (Short "v2")) (Var (Short "v1")))) (App Opapp ((App Opapp ((Var (Short "dropUntil")) (Var (Short "v3")))) (Var (Short "v1")))))))))) (Dletrec (unk unk) (("cmp" "v7" Fun "v8" (Fun "v9" (Mat (Var (Short "v8")) (((Pcon (SOME (Short "[]")) nil) Mat (Var (Short "v9")) (((Pcon (SOME (Short "[]")) nil) Con (SOME (Short "Equal")) nil) ((Pcon (SOME (Short "::")) ("v2" "v1")) Con (SOME (Short "Less")) nil))) ((Pcon (SOME (Short "::")) ("v6" "v5")) Mat (Var (Short "v9")) (((Pcon (SOME (Short "[]")) nil) Con (SOME (Short "Greater")) nil) ((Pcon (SOME (Short "::")) ("v4" "v3")) Mat (App Opapp ((App Opapp ((Var (Short "v7")) (Var (Short "v6")))) (Var (Short "v4")))) (((Pcon (SOME (Short "Less")) nil) Con (SOME (Short "Less")) nil) ((Pcon (SOME (Short "Equal")) nil) App Opapp ((App Opapp ((App Opapp ((Var (Short "cmp")) (Var (Short "v7")))) (Var (Short "v5")))) (Var (Short "v3")))) ((Pcon (SOME (Short "Greater")) nil) Con (SOME (Short "Greater")) nil))))))))))) (Dletrec (unk unk) (("concat" "v3" Mat (Var (Short "v3")) (((Pcon (SOME (Short "[]")) nil) Con (SOME (Short "[]")) nil) ((Pcon (SOME (Short "::")) ("v2" "v1")) App ListAppend ((Var (Short "v2")) (App Opapp ((Var (Short "concat")) (Var (Short "v1")))))))))) (Dletrec (unk unk) (("map" "v4" Fun "v5" (Mat (Var (Short "v5")) (((Pcon (SOME (Short "[]")) nil) Con (SOME (Short "[]")) nil) ((Pcon (SOME (Short "::")) ("v3" "v2")) Let (SOME "v1") (App Opapp ((Var (Short "v4")) (Var (Short "v3")))) (Con (SOME (Short "::")) ((Var (Short "v1")) (App Opapp ((App Opapp ((Var (Short "map")) (Var (Short "v4")))) (Var (Short "v2")))))))))))) (Dlocal ((Dletrec (unk unk) (("mapi" "v4" Fun "v5" (Fun "v6" (Mat (Var (Short "v6")) (((Pcon (SOME (Short "[]")) nil) Con (SOME (Short "[]")) nil) ((Pcon (SOME (Short "::")) ("v3" "v2")) Let (SOME "v1") (App Opapp ((App Opapp ((Var (Short "v4")) (Var (Short "v5")))) (Var (Short "v3")))) (Con (SOME (Short "::")) ((Var (Short "v1")) (App Opapp ((App Opapp ((App Opapp ((Var (Short "mapi")) (Var (Short "v4")))) (App OpnPlus ((Var (Short "v5")) (Lit 1))))) (Var (Short "v2")))))))))))))) ((Dlet (unk unk) "mapi" (Fun "v1" (Fun "v2" (App Opapp ((App Opapp ((App Opapp ((Var (Short "mapi")) (Var (Short "v1")))) (Lit 0))) (Var (Short "v2"))))))) (Dletrec (unk unk) (("mapPartial" "v4" Fun "v5" (Mat (Var (Short "v5")) (((Pcon (SOME (Short "[]")) nil) Con (SOME (Short "[]")) nil) ((Pcon (SOME (Short "::")) ("v3" "v2")) Mat (App Opapp ((Var (Short "v4")) (Var (Short "v3")))) (((Pcon (SOME (Short "None")) nil) App Opapp ((App Opapp ((Var (Short "mapPartial")) (Var (Short "v4")))) (Var (Short "v2")))) ((Pcon (SOME (Short "Some")) ("v1")) Con (SOME (Short "::")) ((Var (Short "v1")) (App Opapp ((App Opapp ((Var (Short "mapPartial")) (Var (Short "v4")))) (Var (Short "v2"))))))))))))) (Dletrec ((1 2) (2 31)) (("app" "f" Fun "ls" (Mat (Var (Short "ls")) (((Pcon (SOME (Short "[]")) nil) Con NONE nil) ((Pcon (SOME (Short "::")) ("x" "xs")) Let NONE (App Opapp ((Var (Short "f")) (Var (Short "x")))) (App Opapp ((App Opapp ((Var (Short "app")) (Var (Short "f")))) (Var (Short "xs")))))))))) (Dletrec (unk unk) (("find" "v3" Fun "v4" (Mat (Var (Short "v4")) (((Pcon (SOME (Short "[]")) nil) Con (SOME (Short "None")) nil) ((Pcon (SOME (Short "::")) ("v2" "v1")) If (App Opapp ((Var (Short "v3")) (Var (Short "v2")))) (Con (SOME (Short "Some")) ((Var (Short "v2")))) (App Opapp ((App Opapp ((Var (Short "find")) (Var (Short "v3")))) (Var (Short "v1")))))))))) (Dletrec (unk unk) (("filter" "v3" Fun "v4" (Mat (Var (Short "v4")) (((Pcon (SOME (Short "[]")) nil) Con (SOME (Short "[]")) nil) ((Pcon (SOME (Short "::")) ("v2" "v1")) If (App Opapp ((Var (Short "v3")) (Var (Short "v2")))) (Con (SOME (Short "::")) ((Var (Short "v2")) (App Opapp ((App Opapp ((Var (Short "filter")) (Var (Short "v3")))) (Var (Short "v1")))))) (App Opapp ((App Opapp ((Var (Short "filter")) (Var (Short "v3")))) (Var (Short "v1")))))))))) (Dlocal ((Dletrec (unk unk) (("partition_aux" "v3" Fun "v5" (Fun "v6" (Fun "v4" (Mat (Var (Short "v5")) (((Pcon (SOME (Short "[]")) nil) Con NONE ((App Opapp ((Var (Short "rev")) (Var (Short "v6")))) (App Opapp ((Var (Short "rev")) (Var (Short "v4")))))) ((Pcon (SOME (Short "::")) ("v2" "v1")) If (App Opapp ((Var (Short "v3")) (Var (Short "v2")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "partition_aux")) (Var (Short "v3")))) (Var (Short "v1")))) (Con (SOME (Short "::")) ((Var (Short "v2")) (Var (Short "v6")))))) (Var (Short "v4")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "partition_aux")) (Var (Short "v3")))) (Var (Short "v1")))) (Var (Short "v6")))) (Con (SOME (Short "::")) ((Var (Short "v2")) (Var (Short "v4"))))))))))))))) ((Dlet (unk unk) "partition" (Fun "v1" (Fun "v2" (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "partition_aux")) (Var (Short "v1")))) (Var (Short "v2")))) (Con (SOME (Short "[]")) nil))) (Con (SOME (Short "[]")) nil)))))) (Dletrec (unk unk) (("foldl" "v4" Fun "v3" (Fun "v5" (Mat (Var (Short "v5")) (((Pcon (SOME (Short "[]")) nil) Var (Short "v3")) ((Pcon (SOME (Short "::")) ("v2" "v1")) App Opapp ((App Opapp ((App Opapp ((Var (Short "foldl")) (Var (Short "v4")))) (App Opapp ((App Opapp ((Var (Short "v4")) (Var (Short "v2")))) (Var (Short "v3")))))) (Var (Short "v1")))))))))) (Dlocal ((Dletrec (unk unk) (("foldli_aux" "v4" Fun "v3" (Fun "v5" (Fun "v6" (Mat (Var (Short "v6")) (((Pcon (SOME (Short "[]")) nil) Var (Short "v3")) ((Pcon (SOME (Short "::")) ("v2" "v1")) App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "foldli_aux")) (Var (Short "v4")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "v4")) (Var (Short "v5")))) (Var (Short "v2")))) (Var (Short "v3")))))) (App OpnPlus ((Var (Short "v5")) (Lit 1))))) (Var (Short "v1")))))))))))) ((Dlet (unk unk) "foldli" (Fun "v2" (Fun "v1" (Fun "v3" (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "foldli_aux")) (Var (Short "v2")))) (Var (Short "v1")))) (Lit 0))) (Var (Short "v3")))))))) (Dletrec (unk unk) (("foldr" "v4" Fun "v3" (Fun "v5" (Mat (Var (Short "v5")) (((Pcon (SOME (Short "[]")) nil) Var (Short "v3")) ((Pcon (SOME (Short "::")) ("v2" "v1")) App Opapp ((App Opapp ((Var (Short "v4")) (Var (Short "v2")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "foldr")) (Var (Short "v4")))) (Var (Short "v3")))) (Var (Short "v1")))))))))))) (Dletrec (unk unk) (("foldri" "v5" Fun "v4" (Fun "v6" (Mat (Var (Short "v6")) (((Pcon (SOME (Short "[]")) nil) Var (Short "v4")) ((Pcon (SOME (Short "::")) ("v3" "v2")) App Opapp ((App Opapp ((App Opapp ((Var (Short "v5")) (Lit 0))) (Var (Short "v3")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "foldri")) (Fun "v1" (App Opapp ((Var (Short "v5")) (App OpnPlus ((Var (Short "v1")) (Lit 1)))))))) (Var (Short "v4")))) (Var (Short "v2")))))))))))) (Dletrec (unk unk) (("exists" "v3" Fun "v4" (Mat (Var (Short "v4")) (((Pcon (SOME (Short "[]")) nil) App OpbLt ((Lit 0) (Lit 0))) ((Pcon (SOME (Short "::")) ("v2" "v1")) Log Or (App Opapp ((Var (Short "v3")) (Var (Short "v2")))) (App Opapp ((App Opapp ((Var (Short "exists")) (Var (Short "v3")))) (Var (Short "v1")))))))))) (Dletrec (unk unk) (("all" "v3" Fun "v4" (Mat (Var (Short "v4")) (((Pcon (SOME (Short "[]")) nil) App OpbLeq ((Lit 0) (Lit 0))) ((Pcon (SOME (Short "::")) ("v2" "v1")) Log And (App Opapp ((Var (Short "v3")) (Var (Short "v2")))) (App Opapp ((App Opapp ((Var (Short "all")) (Var (Short "v3")))) (Var (Short "v1")))))))))) (Dletrec (unk unk) (("snoc" "v4" Fun "v3" (Mat (Var (Short "v3")) (((Pcon (SOME (Short "[]")) nil) Con (SOME (Short "::")) ((Var (Short "v4")) (Con (SOME (Short "[]")) nil))) ((Pcon (SOME (Short "::")) ("v2" "v1")) Con (SOME (Short "::")) ((Var (Short "v2")) (App Opapp ((App Opapp ((Var (Short "snoc")) (Var (Short "v4")))) (Var (Short "v1"))))))))))) (Dlocal ((Dletrec (unk unk) (("genlist_aux" "v1" Fun "v3" (Fun "v2" (If (App Equality ((Var (Short "v3")) (Lit 0))) (Var (Short "v2")) (App Opapp ((App Opapp ((App Opapp ((Var (Short "genlist_aux")) (Var (Short "v1")))) (Let (SOME "k") (App OpnMinus ((Var (Short "v3")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))) (Con (SOME (Short "::")) ((App Opapp ((Var (Short "v1")) (Let (SOME "k") (App OpnMinus ((Var (Short "v3")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))) (Var (Short "v2")))))))))))) ((Dlet (unk unk) "genlist" (Fun "v1" (Fun "v2" (App Opapp ((App Opapp ((App Opapp ((Var (Short "genlist_aux")) (Var (Short "v1")))) (Var (Short "v2")))) (Con (SOME (Short "[]")) nil)))))) (Dletrec (unk unk) (("tabulate" "v8" Fun "v7" (Fun "v6" (Fun "v5" (Let (SOME "v4") (App OpbGeq ((Var (Short "v8")) (Var (Short "v7")))) (If (Var (Short "v4")) (App Opapp ((Var (Short "rev")) (Var (Short "v5")))) (Let (SOME "v3") (App Opapp ((Var (Short "v6")) (Var (Short "v8")))) (Let (SOME "v2") (App OpnPlus ((Var (Short "v8")) (Lit 1))) (Let (SOME "v1") (Con (SOME (Short "::")) ((Var (Short "v3")) (Var (Short "v5")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "tabulate")) (Var (Short "v2")))) (Var (Short "v7")))) (Var (Short "v6")))) (Var (Short "v1")))))))))))))) (Dlet (unk unk) "tabulate" (Fun "v3" (Fun "v2" (Let (SOME "v1") (Con (SOME (Short "[]")) nil) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "tabulate")) (Lit 0))) (Var (Short "v3")))) (Var (Short "v2")))) (Var (Short "v1")))))))) (Dletrec (unk unk) (("collate" "v7" Fun "v8" (Fun "v9" (Mat (Var (Short "v8")) (((Pcon (SOME (Short "[]")) nil) Mat (Var (Short "v9")) (((Pcon (SOME (Short "[]")) nil) Con (SOME (Short "Equal")) nil) ((Pcon (SOME (Short "::")) ("v2" "v1")) Con (SOME (Short "Less")) nil))) ((Pcon (SOME (Short "::")) ("v6" "v5")) Mat (Var (Short "v9")) (((Pcon (SOME (Short "[]")) nil) Con (SOME (Short "Greater")) nil) ((Pcon (SOME (Short "::")) ("v4" "v3")) If (App Equality ((App Opapp ((App Opapp ((Var (Short "v7")) (Var (Short "v6")))) (Var (Short "v4")))) (Con (SOME (Short "Equal")) nil))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "collate")) (Var (Short "v7")))) (Var (Short "v5")))) (Var (Short "v3")))) (App Opapp ((App Opapp ((Var (Short "v7")) (Var (Short "v6")))) (Var (Short "v4"))))))))))))) (Dletrec (unk unk) (("zip" "v7" Mat (Var (Short "v7")) (((Pcon NONE ("v6" "v5")) Mat (Var (Short "v6")) (((Pcon (SOME (Short "[]")) nil) Con (SOME (Short "[]")) nil) ((Pcon (SOME (Short "::")) ("v4" "v3")) Mat (Var (Short "v5")) (((Pcon (SOME (Short "[]")) nil) Con (SOME (Short "[]")) nil) ((Pcon (SOME (Short "::")) ("v2" "v1")) Con (SOME (Short "::")) ((Con NONE ((Var (Short "v4")) (Var (Short "v2")))) (App Opapp ((Var (Short "zip")) (Con NONE ((Var (Short "v3")) (Var (Short "v1")))))))))))))))) (Dletrec (unk unk) (("member" "v4" Fun "v3" (Mat (Var (Short "v3")) (((Pcon (SOME (Short "[]")) nil) App OpbLt ((Lit 0) (Lit 0))) ((Pcon (SOME (Short "::")) ("v2" "v1")) Log Or (App Equality ((Var (Short "v4")) (Var (Short "v2")))) (App Opapp ((App Opapp ((Var (Short "member")) (Var (Short "v4")))) (Var (Short "v1")))))))))) (Dletrec (unk unk) (("sum" "v3" Mat (Var (Short "v3")) (((Pcon (SOME (Short "[]")) nil) Lit 0) ((Pcon (SOME (Short "::")) ("v2" "v1")) App OpnPlus ((Var (Short "v2")) (App Opapp ((Var (Short "sum")) (Var (Short "v1")))))))))) (Dletrec (unk unk) (("unzip" "v8" Mat (Var (Short "v8")) (((Pcon (SOME (Short "[]")) nil) Con NONE ((Con (SOME (Short "[]")) nil) (Con (SOME (Short "[]")) nil))) ((Pcon (SOME (Short "::")) ("v7" "v6")) Mat (Var (Short "v7")) (((Pcon NONE ("v5" "v4")) Let (SOME "v3") (App Opapp ((Var (Short "unzip")) (Var (Short "v6")))) (Mat (Var (Short "v3")) (((Pcon NONE ("v2" "v1")) Con NONE ((Con (SOME (Short "::")) ((Var (Short "v5")) (Var (Short "v2")))) (Con (SOME (Short "::")) ((Var (Short "v4")) (Var (Short "v1"))))))))))))))) (Dlet (unk unk) "pad_right" (Fun "v1" (Fun "v2" (Fun "v3" (App ListAppend ((Var (Short "v3")) (App Opapp ((App Opapp ((Var (Short "genlist")) (App Opapp ((Var (Short "const")) (Var (Short "v1")))))) (Let (SOME "k") (App OpnMinus ((Var (Short "v2")) (App Opapp ((Var (Short "length")) (Var (Short "v3")))))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))))))))) (Dlet (unk unk) "pad_left" (Fun "v1" (Fun "v2" (Fun "v3" (App ListAppend ((App Opapp ((App Opapp ((Var (Short "genlist")) (App Opapp ((Var (Short "const")) (Var (Short "v1")))))) (Let (SOME "k") (App OpnMinus ((Var (Short "v2")) (App Opapp ((Var (Short "length")) (Var (Short "v3")))))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))) (Var (Short "v3")))))))) (Dletrec (unk unk) (("all_distinct" "v3" Mat (Var (Short "v3")) (((Pcon (SOME (Short "[]")) nil) App OpbLeq ((Lit 0) (Lit 0))) ((Pcon (SOME (Short "::")) ("v2" "v1")) Log And (App Equality ((App Opapp ((App Opapp ((Var (Short "member")) (Var (Short "v2")))) (Var (Short "v1")))) (App OpbLt ((Lit 0) (Lit 0))))) (App Opapp ((Var (Short "all_distinct")) (Var (Short "v1"))))))))) (Dletrec (unk unk) (("isPrefix" "v5" Fun "v6" (Mat (Var (Short "v5")) (((Pcon (SOME (Short "[]")) nil) App OpbLeq ((Lit 0) (Lit 0))) ((Pcon (SOME (Short "::")) ("v4" "v3")) Mat (Var (Short "v6")) (((Pcon (SOME (Short "[]")) nil) App OpbLt ((Lit 0) (Lit 0))) ((Pcon (SOME (Short "::")) ("v2" "v1")) Log And (App Equality ((Var (Short "v4")) (Var (Short "v2")))) (App Opapp ((App Opapp ((Var (Short "isPrefix")) (Var (Short "v3")))) (Var (Short "v1")))))))))))) (Dletrec (unk unk) (("front" "v" Mat (Var (Short "v")) (((Pcon (SOME (Short "[]")) nil) Raise (Con (SOME (Short "Bind")) nil)) ((Pcon (SOME (Short "::")) ("v2" "v1")) If (App Equality ((Var (Short "v1")) (Con (SOME (Short "[]")) nil))) (Con (SOME (Short "[]")) nil) (Con (SOME (Short "::")) ((Var (Short "v2")) (App Opapp ((Var (Short "front")) (Var (Short "v1"))))))))))) (Dletrec (unk unk) (("splitAtPki" "v6" Fun "v7" (Fun "v8" (Mat (Var (Short "v8")) (((Pcon (SOME (Short "[]")) nil) App Opapp ((App Opapp ((Var (Short "v7")) (Con (SOME (Short "[]")) nil))) (Con (SOME (Short "[]")) nil))) ((Pcon (SOME (Short "::")) ("v5" "v4")) If (App Opapp ((App Opapp ((Var (Short "v6")) (Lit 0))) (Var (Short "v5")))) (App Opapp ((App Opapp ((Var (Short "v7")) (Con (SOME (Short "[]")) nil))) (Con (SOME (Short "::")) ((Var (Short "v5")) (Var (Short "v4")))))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "splitAtPki")) (App Opapp ((App Opapp ((Var (Short "o")) (Var (Short "v6")))) (Fun "v1" (App OpnPlus ((Var (Short "v1")) (Lit 1)))))))) (Fun "v3" (Fun "v2" (App Opapp ((App Opapp ((Var (Short "v7")) (Con (SOME (Short "::")) ((Var (Short "v5")) (Var (Short "v3")))))) (Var (Short "v2")))))))) (Var (Short "v4"))))))))))) (Dletrec (unk unk) (("update" "v3" Fun "v4" (Fun "v5" (Mat (Var (Short "v5")) (((Pcon (SOME (Short "[]")) nil) Con (SOME (Short "[]")) nil) ((Pcon (SOME (Short "::")) ("v2" "v1")) If (App Equality ((Var (Short "v4")) (Lit 0))) (Con (SOME (Short "::")) ((Var (Short "v3")) (Var (Short "v1")))) (Con (SOME (Short "::")) ((Var (Short "v2")) (App Opapp ((App Opapp ((App Opapp ((Var (Short "update")) (Var (Short "v3")))) (Let (SOME "k") (App OpnMinus ((Var (Short "v4")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))) (Var (Short "v1"))))))))))))) (Dletrec (unk unk) (("compare" "v7" Fun "v8" (Fun "v9" (Mat (Var (Short "v8")) (((Pcon (SOME (Short "[]")) nil) Mat (Var (Short "v9")) (((Pcon (SOME (Short "[]")) nil) Con (SOME (Short "Equal")) nil) ((Pcon (SOME (Short "::")) ("v2" "v1")) Con (SOME (Short "Less")) nil))) ((Pcon (SOME (Short "::")) ("v6" "v5")) Mat (Var (Short "v9")) (((Pcon (SOME (Short "[]")) nil) Con (SOME (Short "Greater")) nil) ((Pcon (SOME (Short "::")) ("v4" "v3")) Mat (App Opapp ((App Opapp ((Var (Short "v7")) (Var (Short "v6")))) (Var (Short "v4")))) (((Pcon (SOME (Short "Less")) nil) Con (SOME (Short "Less")) nil) ((Pcon (SOME (Short "Equal")) nil) App Opapp ((App Opapp ((App Opapp ((Var (Short "compare")) (Var (Short "v7")))) (Var (Short "v5")))) (Var (Short "v3")))) ((Pcon (SOME (Short "Greater")) nil) Con (SOME (Short "Greater")) nil))))))))))) (Dlocal ((Dletrec (unk unk) (("qsort_part" "v3" Fun "v5" (Fun "v4" (Fun "v6" (Fun "v7" (Mat (Var (Short "v4")) (((Pcon (SOME (Short "[]")) nil) Con NONE ((Var (Short "v6")) (Var (Short "v7")))) ((Pcon (SOME (Short "::")) ("v2" "v1")) If (App Opapp ((App Opapp ((Var (Short "v3")) (Var (Short "v2")))) (Var (Short "v5")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "qsort_part")) (Var (Short "v3")))) (Var (Short "v5")))) (Var (Short "v1")))) (Con (SOME (Short "::")) ((Var (Short "v2")) (Var (Short "v6")))))) (Var (Short "v7")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "qsort_part")) (Var (Short "v3")))) (Var (Short "v5")))) (Var (Short "v1")))) (Var (Short "v6")))) (Con (SOME (Short "::")) ((Var (Short "v2")) (Var (Short "v7"))))))))))))))) (Dletrec (unk unk) (("qsort_acc" "v6" Fun "v7" (Fun "v8" (Mat (Var (Short "v7")) (((Pcon (SOME (Short "[]")) nil) Var (Short "v8")) ((Pcon (SOME (Short "::")) ("v5" "v4")) Let (SOME "v3") (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "qsort_part")) (Var (Short "v6")))) (Var (Short "v5")))) (Var (Short "v4")))) (Con (SOME (Short "[]")) nil))) (Con (SOME (Short "[]")) nil))) (Mat (Var (Short "v3")) (((Pcon NONE ("v2" "v1")) App Opapp ((App Opapp ((App Opapp ((Var (Short "qsort_acc")) (Var (Short "v6")))) (Var (Short "v2")))) (Con (SOME (Short "::")) ((Var (Short "v5")) (App Opapp ((App Opapp ((App Opapp ((Var (Short "qsort_acc")) (Var (Short "v6")))) (Var (Short "v1")))) (Var (Short "v8")))))))))))))))))) ((Dlet (unk unk) "sort" (Fun "v1" (Fun "v2" (App Opapp ((App Opapp ((App Opapp ((Var (Short "qsort_acc")) (Var (Short "v1")))) (Var (Short "v2")))) (Con (SOME (Short "[]")) nil)))))))))))))))))))))) (Dmod "Alist" ((Dletrec (unk unk) (("lookup" "v5" Fun "v6" (Mat (Var (Short "v5")) (((Pcon (SOME (Short "[]")) nil) Con (SOME (Short "None")) nil) ((Pcon (SOME (Short "::")) ("v4" "v3")) Mat (Var (Short "v4")) (((Pcon NONE ("v2" "v1")) If (App Equality ((Var (Short "v2")) (Var (Short "v6")))) (Con (SOME (Short "Some")) ((Var (Short "v1")))) (App Opapp ((App Opapp ((Var (Short "lookup")) (Var (Short "v3")))) (Var (Short "v6")))))))))))) (Dlet (unk unk) "update" (Fun "v3" (Fun "v4" (Mat (Var (Short "v4")) (((Pcon NONE ("v2" "v1")) Con (SOME (Short "::")) ((Con NONE ((Var (Short "v2")) (Var (Short "v1")))) (Var (Short "v3"))))))))) (Dletrec (unk unk) (("every" "v5" Fun "v6" (Fun "v7" (Mat (Var (Short "v7")) (((Pcon (SOME (Short "[]")) nil) App OpbLeq ((Lit 0) (Lit 0))) ((Pcon (SOME (Short "::")) ("v4" "v3")) Mat (Var (Short "v4")) (((Pcon NONE ("v2" "v1")) If (App Opapp ((App Opapp ((Var (Long "List" (Short "member"))) (Var (Short "v2")))) (Var (Short "v5")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "every")) (Var (Short "v5")))) (Var (Short "v6")))) (Var (Short "v3")))) (Log And (App Opapp ((Var (Short "v6")) (Con NONE ((Var (Short "v2")) (Var (Short "v1")))))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "every")) (Con (SOME (Short "::")) ((Var (Short "v2")) (Var (Short "v5")))))) (Var (Short "v6")))) (Var (Short "v3")))))))))))))) (Dlet (unk unk) "every" (Fun "v1" (App Opapp ((App Opapp ((Var (Short "every")) (Con (SOME (Short "[]")) nil))) (Var (Short "v1")))))) (Dletrec (unk unk) (("map" "v5" Fun "v6" (Mat (Var (Short "v6")) (((Pcon (SOME (Short "[]")) nil) Con (SOME (Short "[]")) nil) ((Pcon (SOME (Short "::")) ("v4" "v3")) Mat (Var (Short "v4")) (((Pcon NONE ("v2" "v1")) Con (SOME (Short "::")) ((Con NONE ((Var (Short "v2")) (App Opapp ((Var (Short "v5")) (Var (Short "v1")))))) (App Opapp ((App Opapp ((Var (Short "map")) (Var (Short "v5")))) (Var (Short "v3"))))))))))))) (Dletrec (unk unk) (("delete" "v5" Fun "v6" (Mat (Var (Short "v5")) (((Pcon (SOME (Short "[]")) nil) Con (SOME (Short "[]")) nil) ((Pcon (SOME (Short "::")) ("v4" "v3")) Mat (Var (Short "v4")) (((Pcon NONE ("v2" "v1")) If (App Equality ((Var (Short "v2")) (Var (Short "v6")))) (App Opapp ((App Opapp ((Var (Short "delete")) (Var (Short "v3")))) (Var (Short "v6")))) (Con (SOME (Short "::")) ((Con NONE ((Var (Short "v2")) (Var (Short "v1")))) (App Opapp ((App Opapp ((Var (Short "delete")) (Var (Short "v3")))) (Var (Short "v6")))))))))))))))) (Dmod "Vector" ((Dtabbrev (unk unk) ("'a") "vector" (Atapp ((Atvar "'a")) (Short "vector"))) (Dlet (unk unk) "fromList" (Fun "v1" (App VfromList ((Var (Short "v1")))))) (Dlet (unk unk) "length" (Fun "v1" (App Vlength ((Var (Short "v1")))))) (Dlet (unk unk) "sub" (Fun "v1" (Fun "v2" (App Vsub ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "tabulate" (Fun "v2" (Fun "v1" (App VfromList ((App Opapp ((App Opapp ((Var (Long "List" (Short "genlist"))) (Var (Short "v1")))) (Var (Short "v2"))))))))) (Dlocal ((Dletrec (unk unk) (("tolist_aux" "v2" Fun "v1" (If (App OpbLeq ((App Vlength ((Var (Short "v2")))) (Var (Short "v1")))) (Con (SOME (Short "[]")) nil) (Con (SOME (Short "::")) ((App Vsub ((Var (Short "v2")) (Var (Short "v1")))) (App Opapp ((App Opapp ((Var (Short "tolist_aux")) (Var (Short "v2")))) (App OpnPlus ((Var (Short "v1")) (Lit 1)))))))))))) ((Dlet (unk unk) "toList" (Fun "v1" (App Opapp ((App Opapp ((Var (Short "tolist_aux")) (Var (Short "v1")))) (Lit 0))))) (Dlet (unk unk) "update" (Fun "v2" (Fun "v1" (Fun "v3" (App VfromList ((App Opapp ((App Opapp ((App Opapp ((Var (Long "List" (Short "update"))) (Var (Short "v3")))) (Var (Short "v1")))) (App Opapp ((Var (Short "toList")) (Var (Short "v2")))))))))))) (Dlet (unk unk) "concat" (Fun "v1" (App VfromList ((App Opapp ((Var (Long "List" (Short "concat"))) (App Opapp ((App Opapp ((Var (Long "List" (Short "map"))) (Var (Short "toList")))) (Var (Short "v1")))))))))) (Dlet (unk unk) "map" (Fun "v2" (Fun "v1" (App VfromList ((App Opapp ((App Opapp ((Var (Long "List" (Short "map"))) (Var (Short "v1")))) (App Opapp ((Var (Short "toList")) (Var (Short "v2"))))))))))) (Dlet (unk unk) "mapi" (Fun "v2" (Fun "v1" (App VfromList ((App Opapp ((App Opapp ((Var (Long "List" (Short "mapi"))) (Var (Short "v1")))) (App Opapp ((Var (Short "toList")) (Var (Short "v2"))))))))))) (Dlocal ((Dletrec (unk unk) (("foldli_aux" "v2" Fun "v1" (Fun "v5" (Fun "v3" (Fun "v4" (If (App Equality ((Var (Short "v4")) (Lit 0))) (Var (Short "v1")) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "foldli_aux")) (Var (Short "v2")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "v2")) (Var (Short "v3")))) (App Vsub ((Var (Short "v5")) (Var (Short "v3")))))) (Var (Short "v1")))))) (Var (Short "v5")))) (App OpnPlus ((Var (Short "v3")) (Lit 1))))) (Let (SOME "k") (App OpnMinus ((Var (Short "v4")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))))))))))) ((Dlet (unk unk) "foldli" (Fun "v2" (Fun "v1" (Fun "v3" (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "foldli_aux")) (Var (Short "v2")))) (Var (Short "v1")))) (Var (Short "v3")))) (Lit 0))) (App Vlength ((Var (Short "v3")))))))))) (Dlocal ((Dletrec (unk unk) (("foldl_aux" "v2" Fun "v1" (Fun "v5" (Fun "v3" (Fun "v4" (If (App Equality ((Var (Short "v4")) (Lit 0))) (Var (Short "v1")) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "foldl_aux")) (Var (Short "v2")))) (App Opapp ((App Opapp ((Var (Short "v2")) (Var (Short "v1")))) (App Vsub ((Var (Short "v5")) (Var (Short "v3")))))))) (Var (Short "v5")))) (App OpnPlus ((Var (Short "v3")) (Lit 1))))) (Let (SOME "k") (App OpnMinus ((Var (Short "v4")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))))))))))) ((Dlet (unk unk) "foldl" (Fun "v2" (Fun "v1" (Fun "v3" (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "foldl_aux")) (Var (Short "v2")))) (Var (Short "v1")))) (Var (Short "v3")))) (Lit 0))) (App Vlength ((Var (Short "v3")))))))))) (Dlocal ((Dletrec (unk unk) (("foldri_aux" "v2" Fun "v1" (Fun "v4" (Fun "v3" (If (App Equality ((Var (Short "v3")) (Lit 0))) (Var (Short "v1")) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "foldri_aux")) (Var (Short "v2")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "v2")) (Let (SOME "k") (App OpnMinus ((Var (Short "v3")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))) (App Vsub ((Var (Short "v4")) (Let (SOME "k") (App OpnMinus ((Var (Short "v3")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))))) (Var (Short "v1")))))) (Var (Short "v4")))) (Let (SOME "k") (App OpnMinus ((Var (Short "v3")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k"))))))))))))) ((Dlet (unk unk) "foldri" (Fun "v2" (Fun "v1" (Fun "v3" (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "foldri_aux")) (Var (Short "v2")))) (Var (Short "v1")))) (Var (Short "v3")))) (App Vlength ((Var (Short "v3")))))))))) (Dlocal ((Dletrec (unk unk) (("foldr_aux" "v2" Fun "v1" (Fun "v4" (Fun "v3" (If (App Equality ((Var (Short "v3")) (Lit 0))) (Var (Short "v1")) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "foldr_aux")) (Var (Short "v2")))) (App Opapp ((App Opapp ((Var (Short "v2")) (App Vsub ((Var (Short "v4")) (Let (SOME "k") (App OpnMinus ((Var (Short "v3")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))))) (Var (Short "v1")))))) (Var (Short "v4")))) (Let (SOME "k") (App OpnMinus ((Var (Short "v3")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k"))))))))))))) ((Dlet (unk unk) "foldr" (Fun "v2" (Fun "v1" (Fun "v3" (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "foldr_aux")) (Var (Short "v2")))) (Var (Short "v1")))) (Var (Short "v3")))) (App Vlength ((Var (Short "v3")))))))))) (Dlocal ((Dletrec (unk unk) (("findi_aux" "v1" Fun "v4" (Fun "v2" (Fun "v3" (If (App Equality ((Var (Short "v3")) (Lit 0))) (Con (SOME (Short "None")) nil) (If (App Opapp ((App Opapp ((Var (Short "v1")) (Var (Short "v2")))) (App Vsub ((Var (Short "v4")) (Var (Short "v2")))))) (Con (SOME (Short "Some")) ((Con NONE ((Var (Short "v2")) (App Vsub ((Var (Short "v4")) (Var (Short "v2")))))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "findi_aux")) (Var (Short "v1")))) (Var (Short "v4")))) (App OpnPlus ((Var (Short "v2")) (Lit 1))))) (Let (SOME "k") (App OpnMinus ((Var (Short "v3")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))))))))))) ((Dlet (unk unk) "findi" (Fun "v1" (Fun "v2" (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "findi_aux")) (Var (Short "v1")))) (Var (Short "v2")))) (Lit 0))) (App Vlength ((Var (Short "v2"))))))))) (Dlocal ((Dletrec (unk unk) (("find_aux" "v1" Fun "v4" (Fun "v2" (Fun "v3" (If (App Equality ((Var (Short "v3")) (Lit 0))) (Con (SOME (Short "None")) nil) (If (App Opapp ((Var (Short "v1")) (App Vsub ((Var (Short "v4")) (Var (Short "v2")))))) (Con (SOME (Short "Some")) ((App Vsub ((Var (Short "v4")) (Var (Short "v2")))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "find_aux")) (Var (Short "v1")))) (Var (Short "v4")))) (App OpnPlus ((Var (Short "v2")) (Lit 1))))) (Let (SOME "k") (App OpnMinus ((Var (Short "v3")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))))))))))) ((Dlet (unk unk) "find" (Fun "v1" (Fun "v2" (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "find_aux")) (Var (Short "v1")))) (Var (Short "v2")))) (Lit 0))) (App Vlength ((Var (Short "v2"))))))))) (Dlocal ((Dletrec (unk unk) (("exists_aux" "v1" Fun "v4" (Fun "v2" (Fun "v3" (If (App Equality ((Var (Short "v3")) (Lit 0))) (App OpbLt ((Lit 0) (Lit 0))) (If (App Opapp ((Var (Short "v1")) (App Vsub ((Var (Short "v4")) (Var (Short "v2")))))) (App OpbLeq ((Lit 0) (Lit 0))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "exists_aux")) (Var (Short "v1")))) (Var (Short "v4")))) (App OpnPlus ((Var (Short "v2")) (Lit 1))))) (Let (SOME "k") (App OpnMinus ((Var (Short "v3")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))))))))))) ((Dlet (unk unk) "exists" (Fun "v1" (Fun "v2" (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "exists_aux")) (Var (Short "v1")))) (Var (Short "v2")))) (Lit 0))) (App Vlength ((Var (Short "v2"))))))))) (Dlocal ((Dletrec (unk unk) (("all_aux" "v1" Fun "v4" (Fun "v2" (Fun "v3" (If (App Equality ((Var (Short "v3")) (Lit 0))) (App OpbLeq ((Lit 0) (Lit 0))) (If (App Opapp ((Var (Short "v1")) (App Vsub ((Var (Short "v4")) (Var (Short "v2")))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "all_aux")) (Var (Short "v1")))) (Var (Short "v4")))) (App OpnPlus ((Var (Short "v2")) (Lit 1))))) (Let (SOME "k") (App OpnMinus ((Var (Short "v3")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))) (App OpbLt ((Lit 0) (Lit 0))))))))))) ((Dlet (unk unk) "all" (Fun "v1" (Fun "v2" (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "all_aux")) (Var (Short "v1")))) (Var (Short "v2")))) (Lit 0))) (App Vlength ((Var (Short "v2"))))))))) (Dlocal ((Dletrec (unk unk) (("collate_aux" "v1" Fun "v5" (Fun "v6" (Fun "v2" (Fun "v3" (Fun "v4" (If (App Equality ((Var (Short "v4")) (Lit 0))) (Var (Short "v3")) (If (App Equality ((App Opapp ((App Opapp ((Var (Short "v1")) (App Vsub ((Var (Short "v5")) (Var (Short "v2")))))) (App Vsub ((Var (Short "v6")) (Var (Short "v2")))))) (Con (SOME (Short "Equal")) nil))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "collate_aux")) (Var (Short "v1")))) (Var (Short "v5")))) (Var (Short "v6")))) (App OpnPlus ((Var (Short "v2")) (Lit 1))))) (Var (Short "v3")))) (Let (SOME "k") (App OpnMinus ((Var (Short "v4")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))) (App Opapp ((App Opapp ((Var (Short "v1")) (App Vsub ((Var (Short "v5")) (Var (Short "v2")))))) (App Vsub ((Var (Short "v6")) (Var (Short "v2")))))))))))))))) ((Dlet (unk unk) "collate" (Fun "v1" (Fun "v2" (Fun "v3" (If (App OpbLt ((App Vlength ((Var (Short "v2")))) (App Vlength ((Var (Short "v3")))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "collate_aux")) (Var (Short "v1")))) (Var (Short "v2")))) (Var (Short "v3")))) (Lit 0))) (Con (SOME (Short "Less")) nil))) (App Vlength ((Var (Short "v2")))))) (If (App OpbLt ((App Vlength ((Var (Short "v3")))) (App Vlength ((Var (Short "v2")))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "collate_aux")) (Var (Short "v1")))) (Var (Short "v2")))) (Var (Short "v3")))) (Lit 0))) (Con (SOME (Short "Greater")) nil))) (App Vlength ((Var (Short "v3")))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "collate_aux")) (Var (Short "v1")))) (Var (Short "v2")))) (Var (Short "v3")))) (Lit 0))) (Con (SOME (Short "Equal")) nil))) (App Vlength ((Var (Short "v3")))))))))))))))))))))))))))))))))) (Dmod "String" ((Dtabbrev (unk unk) nil "string" (Atapp nil (Short "string"))) (Dlet (unk unk) "sub" (Fun "v1" (Fun "v2" (App Strsub ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "implode" (Fun "v1" (App Implode ((Var (Short "v1")))))) (Dlet (unk unk) "explode" (Fun "v1" (App Explode ((Var (Short "v1")))))) (Dlet (unk unk) "size" (Fun "v1" (App Strlen ((Var (Short "v1")))))) (Dlet (unk unk) "concat" (Fun "v1" (App Strcat ((Var (Short "v1")))))) (Dlet (unk unk) "substring" (Fun "v1" (Fun "v2" (Fun "v3" (App CopyStrStr ((Var (Short "v1")) (Var (Short "v2")) (Var (Short "v3")))))))) (Dlet (unk unk) "strcat" (Fun "v1" (Fun "v2" (App Strcat ((Con (SOME (Short "::")) ((Var (Short "v1")) (Con (SOME (Short "::")) ((Var (Short "v2")) (Con (SOME (Short "[]")) nil)))))))))) (Dlet (unk unk) "^" (Fun "v1" (Fun "v2" (App Opapp ((App Opapp ((Var (Short "strcat")) (Var (Short "v1")))) (Var (Short "v2"))))))) (Dlet (unk unk) "extract" (Fun "v4" (Fun "v2" (Fun "v3" (If (App OpbLeq ((App Strlen ((Var (Short "v4")))) (Var (Short "v2")))) (Lit "") (Mat (Var (Short "v3")) (((Pcon (SOME (Short "None")) nil) App CopyStrStr ((Var (Short "v4")) (Var (Short "v2")) (Let (SOME "k") (App OpnMinus ((App Strlen ((Var (Short "v4")))) (Var (Short "v2")))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))) ((Pcon (SOME (Short "Some")) ("v1")) App CopyStrStr ((Var (Short "v4")) (Var (Short "v2")) (App Opapp ((App Opapp ((Var (Short "min")) (Let (SOME "k") (App OpnMinus ((App Strlen ((Var (Short "v4")))) (Var (Short "v2")))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))) (Var (Short "v1"))))))))))))) (Dlocal ((Dletrec (unk unk) (("concatwith_aux" "v3" Fun "v4" (Fun "v5" (Mat (Var (Short "v4")) (((Pcon (SOME (Short "[]")) nil) Lit "") ((Pcon (SOME (Short "::")) ("v2" "v1")) If (Var (Short "v5")) (App Opapp ((App Opapp ((Var (Short "strcat")) (Var (Short "v2")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "concatwith_aux")) (Var (Short "v3")))) (Var (Short "v1")))) (App OpbLt ((Lit 0) (Lit 0))))))) (App Opapp ((App Opapp ((Var (Short "strcat")) (Var (Short "v3")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "concatwith_aux")) (Var (Short "v3")))) (Con (SOME (Short "::")) ((Var (Short "v2")) (Var (Short "v1")))))) (App OpbLeq ((Lit 0) (Lit 0))))))))))))))) ((Dlet (unk unk) "concatWith" (Fun "v2" (Fun "v1" (App Opapp ((App Opapp ((App Opapp ((Var (Short "concatwith_aux")) (Var (Short "v2")))) (Var (Short "v1")))) (App OpbLeq ((Lit 0) (Lit 0)))))))) (Dlet (unk unk) "str" (Fun "v1" (App Implode ((Con (SOME (Short "::")) ((Var (Short "v1")) (Con (SOME (Short "[]")) nil))))))) (Dlocal ((Dletrec (unk unk) (("translate_aux" "v1" Fun "v4" (Fun "v2" (Fun "v3" (If (App Equality ((Var (Short "v3")) (Lit 0))) (Con (SOME (Short "[]")) nil) (Con (SOME (Short "::")) ((App Opapp ((Var (Short "v1")) (App Strsub ((Var (Short "v4")) (Var (Short "v2")))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "translate_aux")) (Var (Short "v1")))) (Var (Short "v4")))) (App OpnPlus ((Var (Short "v2")) (Lit 1))))) (Let (SOME "k") (App OpnMinus ((Var (Short "v3")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k"))))))))))))))) ((Dlet (unk unk) "translate" (Fun "v1" (Fun "v2" (App Implode ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "translate_aux")) (Var (Short "v1")))) (Var (Short "v2")))) (Lit 0))) (App Strlen ((Var (Short "v2"))))))))))) (Dlocal ((Dletrec (unk unk) (("splitl_aux" "v1" Fun "v3" (Fun "v2" (If (Log And (App OpbLt ((Var (Short "v2")) (App Strlen ((Var (Short "v3")))))) (App Opapp ((Var (Short "v1")) (App Strsub ((Var (Short "v3")) (Var (Short "v2"))))))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "splitl_aux")) (Var (Short "v1")))) (Var (Short "v3")))) (App OpnPlus ((Var (Short "v2")) (Lit 1))))) (Con NONE ((App Opapp ((App Opapp ((App Opapp ((Var (Short "extract")) (Var (Short "v3")))) (Lit 0))) (Con (SOME (Short "Some")) ((Var (Short "v2")))))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "extract")) (Var (Short "v3")))) (Var (Short "v2")))) (Con (SOME (Short "None")) nil))))))))))) ((Dlet (unk unk) "split" (Fun "v1" (Fun "v2" (App Opapp ((App Opapp ((App Opapp ((Var (Short "splitl_aux")) (Var (Short "v1")))) (Var (Short "v2")))) (Lit 0)))))) (Dlocal ((Dletrec (unk unk) (("tokens_aux" "v3" Fun "v4" (Fun "v5" (Fun "v6" (Fun "v7" (Mat (Var (Short "v5")) (((Pcon (SOME (Short "[]")) nil) If (App Equality ((Var (Short "v7")) (Lit 0))) (Con (SOME (Short "[]")) nil) (If (App Opapp ((Var (Short "v3")) (App Strsub ((Var (Short "v4")) (Var (Short "v6")))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "tokens_aux")) (Var (Short "v3")))) (Var (Short "v4")))) (Con (SOME (Short "[]")) nil))) (App OpnPlus ((Var (Short "v6")) (Lit 1))))) (Let (SOME "k") (App OpnMinus ((Var (Short "v7")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "tokens_aux")) (Var (Short "v3")))) (Var (Short "v4")))) (Con (SOME (Short "::")) ((App Strsub ((Var (Short "v4")) (Var (Short "v6")))) (Con (SOME (Short "[]")) nil))))) (App OpnPlus ((Var (Short "v6")) (Lit 1))))) (Let (SOME "k") (App OpnMinus ((Var (Short "v7")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))))) ((Pcon (SOME (Short "::")) ("v2" "v1")) If (App Equality ((Var (Short "v7")) (Lit 0))) (Con (SOME (Short "::")) ((App Implode ((App Opapp ((Var (Long "List" (Short "rev"))) (Con (SOME (Short "::")) ((Var (Short "v2")) (Var (Short "v1")))))))) (Con (SOME (Short "[]")) nil))) (If (App Opapp ((Var (Short "v3")) (App Strsub ((Var (Short "v4")) (Var (Short "v6")))))) (Con (SOME (Short "::")) ((App Implode ((App Opapp ((Var (Long "List" (Short "rev"))) (Con (SOME (Short "::")) ((Var (Short "v2")) (Var (Short "v1")))))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "tokens_aux")) (Var (Short "v3")))) (Var (Short "v4")))) (Con (SOME (Short "[]")) nil))) (App OpnPlus ((Var (Short "v6")) (Lit 1))))) (Let (SOME "k") (App OpnMinus ((Var (Short "v7")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "tokens_aux")) (Var (Short "v3")))) (Var (Short "v4")))) (Con (SOME (Short "::")) ((App Strsub ((Var (Short "v4")) (Var (Short "v6")))) (Con (SOME (Short "::")) ((Var (Short "v2")) (Var (Short "v1")))))))) (App OpnPlus ((Var (Short "v6")) (Lit 1))))) (Let (SOME "k") (App OpnMinus ((Var (Short "v7")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k"))))))))))))))))) ((Dlet (unk unk) "tokens" (Fun "v1" (Fun "v2" (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "tokens_aux")) (Var (Short "v1")))) (Var (Short "v2")))) (Con (SOME (Short "[]")) nil))) (Lit 0))) (App Strlen ((Var (Short "v2"))))))))) (Dlocal ((Dletrec (unk unk) (("fields_aux" "v1" Fun "v4" (Fun "v5" (Fun "v2" (Fun "v3" (If (App Equality ((Var (Short "v3")) (Lit 0))) (Con (SOME (Short "::")) ((App Implode ((App Opapp ((Var (Long "List" (Short "rev"))) (Var (Short "v5")))))) (Con (SOME (Short "[]")) nil))) (If (App Opapp ((Var (Short "v1")) (App Strsub ((Var (Short "v4")) (Var (Short "v2")))))) (Con (SOME (Short "::")) ((App Implode ((App Opapp ((Var (Long "List" (Short "rev"))) (Var (Short "v5")))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "fields_aux")) (Var (Short "v1")))) (Var (Short "v4")))) (Con (SOME (Short "[]")) nil))) (App OpnPlus ((Var (Short "v2")) (Lit 1))))) (Let (SOME "k") (App OpnMinus ((Var (Short "v3")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "fields_aux")) (Var (Short "v1")))) (Var (Short "v4")))) (Con (SOME (Short "::")) ((App Strsub ((Var (Short "v4")) (Var (Short "v2")))) (Var (Short "v5")))))) (App OpnPlus ((Var (Short "v2")) (Lit 1))))) (Let (SOME "k") (App OpnMinus ((Var (Short "v3")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k"))))))))))))))) ((Dlet (unk unk) "fields" (Fun "v1" (Fun "v2" (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "fields_aux")) (Var (Short "v1")))) (Var (Short "v2")))) (Con (SOME (Short "[]")) nil))) (Lit 0))) (App Strlen ((Var (Short "v2"))))))))) (Dletrec (unk unk) (("findi" "v1" Fun "v2" (Fun "v3" (If (App OpbLt ((Var (Short "v2")) (App Strlen ((Var (Short "v3")))))) (If (App Opapp ((Var (Short "v1")) (App Strsub ((Var (Short "v3")) (Var (Short "v2")))))) (Con (SOME (Short "Some")) ((Var (Short "v2")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "findi")) (Var (Short "v1")))) (App OpnPlus ((Var (Short "v2")) (Lit 1))))) (Var (Short "v3"))))) (Con (SOME (Short "None")) nil)))))) (Dlocal ((Dletrec (unk unk) (("isstringthere_aux" "v2" Fun "v4" (Fun "v3" (Fun "v5" (Fun "v1" (If (App Equality ((Var (Short "v1")) (Lit 0))) (App OpbLeq ((Lit 0) (Lit 0))) (If (App Equality ((App Strsub ((Var (Short "v2")) (Var (Short "v3")))) (App Strsub ((Var (Short "v4")) (Var (Short "v5")))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "isstringthere_aux")) (Var (Short "v2")))) (Var (Short "v4")))) (App OpnPlus ((Var (Short "v3")) (Lit 1))))) (App OpnPlus ((Var (Short "v5")) (Lit 1))))) (Let (SOME "k") (App OpnMinus ((Var (Short "v1")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))) (App OpbLt ((Lit 0) (Lit 0)))))))))))) ((Dletrec (unk unk) (("isSubstring" "v4" Fun "v5" (Fun "v1" (Fun "v2" (Fun "v3" (If (App Equality ((Var (Short "v3")) (Lit 0))) (App OpbLt ((Lit 0) (Lit 0))) (If (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "isstringthere_aux")) (Var (Short "v4")))) (Var (Short "v5")))) (Lit 0))) (Var (Short "v2")))) (Var (Short "v1")))) (App OpbLeq ((Lit 0) (Lit 0))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "isSubstring")) (Var (Short "v4")))) (Var (Short "v5")))) (Var (Short "v1")))) (App OpnPlus ((Var (Short "v2")) (Lit 1))))) (Let (SOME "k") (App OpnMinus ((Var (Short "v3")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))))))))))) (Dlet (unk unk) "isSubstring" (Fun "v1" (Fun "v2" (If (App OpbLeq ((App Strlen ((Var (Short "v1")))) (App Strlen ((Var (Short "v2")))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "isSubstring")) (Var (Short "v1")))) (Var (Short "v2")))) (App Strlen ((Var (Short "v1")))))) (Lit 0))) (App OpnPlus ((Let (SOME "k") (App OpnMinus ((App Strlen ((Var (Short "v2")))) (App Strlen ((Var (Short "v1")))))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))) (Lit 1))))) (App OpbLt ((Lit 0) (Lit 0))))))) (Dlet (unk unk) "isSuffix" (Fun "v1" (Fun "v2" (If (App OpbLeq ((App Strlen ((Var (Short "v1")))) (App Strlen ((Var (Short "v2")))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "isstringthere_aux")) (Var (Short "v1")))) (Var (Short "v2")))) (Lit 0))) (Let (SOME "k") (App OpnMinus ((App Strlen ((Var (Short "v2")))) (App Strlen ((Var (Short "v1")))))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))) (App Strlen ((Var (Short "v1")))))) (App OpbLt ((Lit 0) (Lit 0))))))) (Dlet (unk unk) "isPrefix" (Fun "v1" (Fun "v2" (If (App OpbLeq ((App Strlen ((Var (Short "v1")))) (App Strlen ((Var (Short "v2")))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "isstringthere_aux")) (Var (Short "v1")))) (Var (Short "v2")))) (Lit 0))) (Lit 0))) (App Strlen ((Var (Short "v1")))))) (App OpbLt ((Lit 0) (Lit 0))))))) (Dlocal ((Dletrec (unk unk) (("compare_aux" "v3" Fun "v4" (Fun "v2" (Fun "v5" (Fun "v1" (If (App Equality ((Var (Short "v1")) (Lit 0))) (Var (Short "v2")) (If (App ChopbLt ((App Strsub ((Var (Short "v4")) (Var (Short "v5")))) (App Strsub ((Var (Short "v3")) (Var (Short "v5")))))) (Con (SOME (Short "Greater")) nil) (If (App ChopbLt ((App Strsub ((Var (Short "v3")) (Var (Short "v5")))) (App Strsub ((Var (Short "v4")) (Var (Short "v5")))))) (Con (SOME (Short "Less")) nil) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "compare_aux")) (Var (Short "v3")))) (Var (Short "v4")))) (Var (Short "v2")))) (App OpnPlus ((Var (Short "v5")) (Lit 1))))) (Let (SOME "k") (App OpnMinus ((Var (Short "v1")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))))))))))))) ((Dlet (unk unk) "compare" (Fun "v1" (Fun "v2" (If (App OpbLt ((App Strlen ((Var (Short "v1")))) (App Strlen ((Var (Short "v2")))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "compare_aux")) (Var (Short "v1")))) (Var (Short "v2")))) (Con (SOME (Short "Less")) nil))) (Lit 0))) (App Strlen ((Var (Short "v1")))))) (If (App OpbLt ((App Strlen ((Var (Short "v2")))) (App Strlen ((Var (Short "v1")))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "compare_aux")) (Var (Short "v1")))) (Var (Short "v2")))) (Con (SOME (Short "Greater")) nil))) (Lit 0))) (App Strlen ((Var (Short "v2")))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "compare_aux")) (Var (Short "v1")))) (Var (Short "v2")))) (Con (SOME (Short "Equal")) nil))) (Lit 0))) (App Strlen ((Var (Short "v2"))))))))))) (Dlet (unk unk) "<" (Fun "v1" (Fun "v2" (App Equality ((App Opapp ((App Opapp ((Var (Short "compare")) (Var (Short "v1")))) (Var (Short "v2")))) (Con (SOME (Short "Less")) nil)))))) (Dlet (unk unk) "<=" (Fun "v1" (Fun "v2" (App Equality ((App Equality ((App Opapp ((App Opapp ((Var (Short "compare")) (Var (Short "v1")))) (Var (Short "v2")))) (Con (SOME (Short "Greater")) nil))) (App OpbLt ((Lit 0) (Lit 0)))))))) (Dlet (unk unk) ">=" (Fun "v1" (Fun "v2" (App Equality ((App Equality ((App Opapp ((App Opapp ((Var (Short "compare")) (Var (Short "v1")))) (Var (Short "v2")))) (Con (SOME (Short "Less")) nil))) (App OpbLt ((Lit 0) (Lit 0)))))))) (Dlet (unk unk) ">" (Fun "v1" (Fun "v2" (App Equality ((App Opapp ((App Opapp ((Var (Short "compare")) (Var (Short "v1")))) (Var (Short "v2")))) (Con (SOME (Short "Greater")) nil)))))) (Dlocal ((Dletrec (unk unk) (("collate_aux" "v1" Fun "v5" (Fun "v6" (Fun "v3" (Fun "v2" (Fun "v4" (If (App Equality ((Var (Short "v4")) (Lit 0))) (Var (Short "v3")) (If (App Equality ((App Opapp ((App Opapp ((Var (Short "v1")) (App Strsub ((Var (Short "v5")) (Var (Short "v2")))))) (App Strsub ((Var (Short "v6")) (Var (Short "v2")))))) (Con (SOME (Short "Equal")) nil))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "collate_aux")) (Var (Short "v1")))) (Var (Short "v5")))) (Var (Short "v6")))) (Var (Short "v3")))) (App OpnPlus ((Var (Short "v2")) (Lit 1))))) (Let (SOME "k") (App OpnMinus ((Var (Short "v4")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))) (App Opapp ((App Opapp ((Var (Short "v1")) (App Strsub ((Var (Short "v5")) (Var (Short "v2")))))) (App Strsub ((Var (Short "v6")) (Var (Short "v2")))))))))))))))) ((Dlet (unk unk) "collate" (Fun "v1" (Fun "v2" (Fun "v3" (If (App OpbLt ((App Strlen ((Var (Short "v2")))) (App Strlen ((Var (Short "v3")))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "collate_aux")) (Var (Short "v1")))) (Var (Short "v2")))) (Var (Short "v3")))) (Con (SOME (Short "Less")) nil))) (Lit 0))) (App Strlen ((Var (Short "v2")))))) (If (App OpbLt ((App Strlen ((Var (Short "v3")))) (App Strlen ((Var (Short "v2")))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "collate_aux")) (Var (Short "v1")))) (Var (Short "v2")))) (Var (Short "v3")))) (Con (SOME (Short "Greater")) nil))) (Lit 0))) (App Strlen ((Var (Short "v3")))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "collate_aux")) (Var (Short "v1")))) (Var (Short "v2")))) (Var (Short "v3")))) (Con (SOME (Short "Equal")) nil))) (Lit 0))) (App Strlen ((Var (Short "v3")))))))))))) (Dlet (unk unk) "char_escape_seq" (Fun "v1" (If (App Equality ((Var (Short "v1")) (Lit (char "\\09")))) (Con (SOME (Short "Some")) ((Lit "\\\\t"))) (If (App Equality ((Var (Short "v1")) (Lit (char "\\0A")))) (Con (SOME (Short "Some")) ((Lit "\\\\n"))) (If (App Equality ((Var (Short "v1")) (Lit (char "\\\\")))) (Con (SOME (Short "Some")) ((Lit "\\\\\\\\"))) (If (App Equality ((Var (Short "v1")) (Lit (char "\"")))) (Con (SOME (Short "Some")) ((Lit "\\\\\""))) (Con (SOME (Short "None")) nil))))))) (Dlocal ((Dlet (unk unk) "char_escaped" (Fun "v2" (Mat (App Opapp ((Var (Short "char_escape_seq")) (Var (Short "v2")))) (((Pcon (SOME (Short "None")) nil) Con (SOME (Short "::")) ((Var (Short "v2")) (Con (SOME (Short "[]")) nil))) ((Pcon (SOME (Short "Some")) ("v1")) App Explode ((Var (Short "v1"))))))))) ((Dlet (unk unk) "escape_str" (Fun "v1" (App Implode ((App ListAppend ((App ListAppend ((Con (SOME (Short "::")) ((Lit (char "\"")) (Con (SOME (Short "[]")) nil))) (App Opapp ((Var (Long "List" (Short "concat"))) (App Opapp ((App Opapp ((Var (Long "List" (Short "map"))) (Var (Short "char_escaped")))) (App Explode ((Var (Short "v1")))))))))) (Con (SOME (Short "::")) ((Lit (char "\"")) (Con (SOME (Short "[]")) nil))))))))) (Dlet (unk unk) "escape_char" (Fun "v1" (App Implode ((App ListAppend ((App ListAppend ((Con (SOME (Short "::")) ((Lit (char "#")) (Con (SOME (Short "::")) ((Lit (char "\"")) (Con (SOME (Short "[]")) nil))))) (App Opapp ((Var (Short "char_escaped")) (Var (Short "v1")))))) (Con (SOME (Short "::")) ((Lit (char "\"")) (Con (SOME (Short "[]")) nil))))))))))))))))))))))))))))) (Dlet (unk unk) "+" (Fun "v1" (Fun "v2" (App OpnPlus ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "-" (Fun "v1" (Fun "v2" (App OpnMinus ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "*" (Fun "v1" (Fun "v2" (App OpnTimes ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "div" (Fun "v1" (Fun "v2" (App OpnDivide ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "mod" (Fun "v1" (Fun "v2" (App OpnModulo ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "<" (Fun "v1" (Fun "v2" (App OpbLt ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) ">" (Fun "v1" (Fun "v2" (App OpbGt ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "<=" (Fun "v1" (Fun "v2" (App OpbLeq ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) ">=" (Fun "v1" (Fun "v2" (App OpbGeq ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "~" (Fun "v1" (App OpnMinus ((Lit 0) (Var (Short "v1")))))) (Dlet (unk unk) "@" (Fun "v1" (Fun "v2" (App ListAppend ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "=" (Fun "v1" (Fun "v2" (App Equality ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "not" (Fun "v1" (App Equality ((Var (Short "v1")) (App OpbLt ((Lit 0) (Lit 0))))))) (Dlet (unk unk) "<>" (Fun "v1" (Fun "v2" (App Equality ((App Equality ((Var (Short "v1")) (Var (Short "v2")))) (App OpbLt ((Lit 0) (Lit 0)))))))) (Dlet (unk unk) "^" (Fun "v1" (Fun "v2" (App Opapp ((App Opapp ((Var (Long "String" (Short "strcat"))) (Var (Short "v1")))) (Var (Short "v2"))))))) (Dlet (unk unk) ":=" (Fun "x" (Fun "y" (App Opassign ((Var (Short "x")) (Var (Short "y"))))))) (Dlet (unk unk) "!" (Fun "x" (App Opderef ((Var (Short "x")))))) (Dmod "Bool" ((Dlet (unk unk) "toString" (Fun "v1" (If (Var (Short "v1")) (Lit "True") (Lit "False")))) (Dlet (unk unk) "compare" (Fun "v1" (Fun "v2" (If (Var (Short "v1")) (If (Var (Short "v2")) (Con (SOME (Short "Equal")) nil) (Con (SOME (Short "Greater")) nil)) (If (Var (Short "v2")) (Con (SOME (Short "Less")) nil) (Con (SOME (Short "Equal")) nil)))))))) (Dmod "Pair" ((Dlet (unk unk) "map" (Fun "v3" (Fun "v4" (Fun "v5" (Mat (Var (Short "v5")) (((Pcon NONE ("v2" "v1")) Con NONE ((App Opapp ((Var (Short "v3")) (Var (Short "v2")))) (App Opapp ((Var (Short "v4")) (Var (Short "v1")))))))))))) (Dlet (unk unk) "toString" (Fun "v3" (Fun "v4" (Fun "v5" (Mat (Var (Short "v5")) (((Pcon NONE ("v2" "v1")) App Strcat ((Con (SOME (Short "::")) ((Lit "(") (Con (SOME (Short "::")) ((App Opapp ((Var (Short "v3")) (Var (Short "v2")))) (Con (SOME (Short "::")) ((Lit ", ") (Con (SOME (Short "::")) ((App Opapp ((Var (Short "v4")) (Var (Short "v1")))) (Con (SOME (Short "::")) ((Lit ")") (Con (SOME (Short "[]")) nil))))))))))))))))))) (Dlet (unk unk) "compare" (Fun "v1" (Fun "v2" (Fun "v3" (Fun "v4" (Mat (App Opapp ((App Opapp ((Var (Short "v1")) (App Opapp ((Var (Short "fst")) (Var (Short "v3")))))) (App Opapp ((Var (Short "fst")) (Var (Short "v4")))))) (((Pcon (SOME (Short "Less")) nil) Con (SOME (Short "Less")) nil) ((Pcon (SOME (Short "Equal")) nil) App Opapp ((App Opapp ((Var (Short "v2")) (App Opapp ((Var (Short "snd")) (Var (Short "v3")))))) (App Opapp ((Var (Short "snd")) (Var (Short "v4")))))) ((Pcon (SOME (Short "Greater")) nil) Con (SOME (Short "Greater")) nil)))))))))) (Dmod "Int" ((Dtabbrev (unk unk) nil "int" (Atapp nil (Short "int"))) (Dlet (unk unk) "+" (Fun "v1" (Fun "v2" (App OpnPlus ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "-" (Fun "v1" (Fun "v2" (App OpnMinus ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "*" (Fun "v1" (Fun "v2" (App OpnTimes ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "div" (Fun "v1" (Fun "v2" (App OpnDivide ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "mod" (Fun "v1" (Fun "v2" (App OpnModulo ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "<" (Fun "v1" (Fun "v2" (App OpbLt ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) ">" (Fun "v1" (Fun "v2" (App OpbGt ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "<=" (Fun "v1" (Fun "v2" (App OpbLeq ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) ">=" (Fun "v1" (Fun "v2" (App OpbGeq ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "~" (Fun "v1" (App OpnMinus ((Lit 0) (Var (Short "v1")))))) (Dlocal ((Dlet (unk unk) "exp_for_dec_enc" (Lit 8)) (Dlet (unk unk) "tochar" (Fun "v1" (If (App OpbLt ((Var (Short "v1")) (Lit 10))) (App Chr ((App OpnPlus ((App Ord ((Lit (char "0")))) (Var (Short "v1")))))) (App Chr ((Let (SOME "k") (App OpnMinus ((App OpnPlus ((App Ord ((Lit (char "A")))) (Var (Short "v1")))) (Lit 10))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k"))))))))) (Dletrec (unk unk) (("num_to_rev_chars" "v1" Fun "v2" (Fun "v3" (If (App Equality ((Var (Short "v2")) (Lit 0))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "num_to_rev_chars")) (App OpnDivide ((Var (Short "v1")) (Lit 100000000))))) (Var (Short "exp_for_dec_enc")))) (App OpnPlus ((App OpnModulo ((Var (Short "v1")) (Lit 100000000))) (Var (Short "v3")))))) (If (Log And (App OpbLt ((Var (Short "v3")) (Lit 10))) (App Equality ((Var (Short "v1")) (Lit 0)))) (Con (SOME (Short "::")) ((App Opapp ((Var (Short "tochar")) (Var (Short "v3")))) (Con (SOME (Short "[]")) nil))) (Con (SOME (Short "::")) ((App Opapp ((Var (Short "tochar")) (App OpnModulo ((Var (Short "v3")) (Lit 10))))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "num_to_rev_chars")) (Var (Short "v1")))) (Let (SOME "k") (App OpnMinus ((Var (Short "v2")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))) (App OpnDivide ((Var (Short "v3")) (Lit 10)))))))))))))) ((Dlet (unk unk) "int_to_string" (Fun "v2" (Fun "v1" (If (App OpbLeq ((Lit 0) (Var (Short "v1")))) (App Implode ((App Opapp ((Var (Long "List" (Short "rev"))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "num_to_rev_chars")) (Var (Short "v1")))) (Lit 0))) (Lit 0))))))) (App Implode ((App ListAppend ((Con (SOME (Short "::")) ((Var (Short "v2")) (Con (SOME (Short "[]")) nil))) (App Opapp ((Var (Long "List" (Short "rev"))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "num_to_rev_chars")) (Let (SOME "k") (Var (Short "v1")) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (App OpnMinus ((Lit 0) (Var (Short "k")))) (Var (Short "k")))))) (Lit 0))) (Lit 0))))))))))))) (Dlet (unk unk) "toString" (Fun "v1" (App Opapp ((App Opapp ((Var (Short "int_to_string")) (Lit (char "~")))) (Var (Short "v1")))))))) (Dlocal ((Dlet (unk unk) "fromchar_unsafe" (Fun "v1" (Let (SOME "k") (App OpnMinus ((App Ord ((Var (Short "v1")))) (Lit 48))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))) (Dletrec (unk unk) (("fromchars_range_unsafe" "v1" Fun "v2" (Fun "v3" (If (App Equality ((Var (Short "v2")) (Lit 0))) (Lit 0) (App OpnPlus ((App OpnTimes ((App Opapp ((App Opapp ((App Opapp ((Var (Short "fromchars_range_unsafe")) (Var (Short "v1")))) (Let (SOME "k") (App OpnMinus ((Var (Short "v2")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))) (Var (Short "v3")))) (Lit 10))) (App Opapp ((Var (Short "fromchar_unsafe")) (App Strsub ((Var (Short "v3")) (App OpnPlus ((Var (Short "v1")) (Let (SOME "k") (App OpnMinus ((Var (Short "v2")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k"))))))))))))))))) (Dlet (unk unk) "padlen_dec" (Lit 8)) (Dlet (unk unk) "maxsmall_dec" (Lit 100000000)) (Dletrec (unk unk) (("fromchars_unsafe" "v4" Fun "v5" (If (App Equality ((Var (Short "v4")) (Lit 0))) (Lit 0) (If (App OpbLeq ((App OpnPlus ((Let (SOME "k") (App OpnMinus ((Var (Short "v4")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))) (Lit 1))) (Lit 8))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "fromchars_range_unsafe")) (Lit 0))) (App OpnPlus ((Let (SOME "k") (App OpnMinus ((Var (Short "v4")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))) (Lit 1))))) (Var (Short "v5")))) (Let (SOME "v3") (Let (SOME "k") (App OpnMinus ((App OpnPlus ((Let (SOME "k") (App OpnMinus ((Var (Short "v4")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))) (Lit 1))) (Lit 8))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))) (Let (SOME "v2") (App OpnTimes ((App Opapp ((App Opapp ((Var (Short "fromchars_unsafe")) (Var (Short "v3")))) (Var (Short "v5")))) (Lit 100000000))) (Let (SOME "v1") (App Opapp ((App Opapp ((App Opapp ((Var (Short "fromchars_range_unsafe")) (Var (Short "v3")))) (Lit 8))) (Var (Short "v5")))) (App OpnPlus ((Var (Short "v2")) (Var (Short "v1")))))))))))) (Dlet (unk unk) "fromstring_unsafe" (Fun "v1" (If (App Equality ((App Strlen ((Var (Short "v1")))) (Lit 0))) (Lit 0) (If (App Equality ((App Strsub ((Var (Short "v1")) (Lit 0))) (Lit (char "~")))) (App OpnMinus ((Lit 0) (App Opapp ((App Opapp ((Var (Short "fromchars_unsafe")) (Let (SOME "k") (App OpnMinus ((App Strlen ((Var (Short "v1")))) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))) (App CopyStrStr ((Var (Short "v1")) (Lit 1) (Let (SOME "k") (App OpnMinus ((App Strlen ((Var (Short "v1")))) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))))))) (App Opapp ((App Opapp ((Var (Short "fromchars_unsafe")) (App Strlen ((Var (Short "v1")))))) (Var (Short "v1")))))))) (Dlet (unk unk) "fromchar" (Fun "v2" (Let (SOME "v1") (App Ord ((Var (Short "v2")))) (If (Log And (App OpbLeq ((Lit 48) (Var (Short "v1")))) (App OpbLeq ((Var (Short "v1")) (Lit 57)))) (Con (SOME (Short "Some")) ((Let (SOME "k") (App OpnMinus ((Var (Short "v1")) (Lit 48))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))) (Con (SOME (Short "None")) nil))))) (Dletrec (unk unk) (("fromchars_range" "v6" Fun "v7" (Fun "v8" (If (App Equality ((Var (Short "v7")) (Lit 0))) (Con (SOME (Short "Some")) ((Lit 0))) (Let (SOME "v4") (App Opapp ((App Opapp ((Var (Long "Option" (Short "map"))) (Fun "v5" (App OpnTimes ((Lit 10) (Var (Short "v5"))))))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "fromchars_range")) (Var (Short "v6")))) (Let (SOME "k") (App OpnMinus ((Var (Short "v7")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))) (Var (Short "v8")))))) (Let (SOME "v3") (App Opapp ((Var (Short "fromchar")) (App Strsub ((Var (Short "v8")) (App OpnPlus ((Var (Short "v6")) (Let (SOME "k") (App OpnMinus ((Var (Short "v7")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))))))) (App Opapp ((App Opapp ((App Opapp ((Var (Long "Option" (Short "map2"))) (Fun "v2" (Fun "v1" (App OpnPlus ((Var (Short "v2")) (Var (Short "v1")))))))) (Var (Short "v4")))) (Var (Short "v3"))))))))))) (Dletrec (unk unk) (("fromchars" "v7" Fun "v8" (If (App Equality ((Var (Short "v7")) (Lit 0))) (Con (SOME (Short "None")) nil) (If (App OpbLeq ((App OpnPlus ((Let (SOME "k") (App OpnMinus ((Var (Short "v7")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))) (Lit 1))) (Lit 8))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "fromchars_range")) (Lit 0))) (App OpnPlus ((Let (SOME "k") (App OpnMinus ((Var (Short "v7")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))) (Lit 1))))) (Var (Short "v8")))) (Let (SOME "v6") (Let (SOME "k") (App OpnMinus ((App OpnPlus ((Let (SOME "k") (App OpnMinus ((Var (Short "v7")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))) (Lit 1))) (Lit 8))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))) (Let (SOME "v4") (App Opapp ((App Opapp ((Var (Long "Option" (Short "map"))) (Fun "v5" (App OpnTimes ((Lit 100000000) (Var (Short "v5"))))))) (App Opapp ((App Opapp ((Var (Short "fromchars")) (Var (Short "v6")))) (Var (Short "v8")))))) (Let (SOME "v3") (App Opapp ((App Opapp ((App Opapp ((Var (Short "fromchars_range")) (Var (Short "v6")))) (Lit 8))) (Var (Short "v8")))) (App Opapp ((App Opapp ((App Opapp ((Var (Long "Option" (Short "map2"))) (Fun "v2" (Fun "v1" (App OpnPlus ((Var (Short "v2")) (Var (Short "v1")))))))) (Var (Short "v4")))) (Var (Short "v3"))))))))))))) ((Dlet (unk unk) "fromString" (Fun "v5" (If (App Equality ((App Strlen ((Var (Short "v5")))) (Lit 0))) (Con (SOME (Short "None")) nil) (If (Log Or (App Equality ((App Strsub ((Var (Short "v5")) (Lit 0))) (Lit (char "~")))) (App Equality ((App Strsub ((Var (Short "v5")) (Lit 0))) (Lit (char "-"))))) (App Opapp ((App Opapp ((Var (Long "Option" (Short "map"))) (App Opapp ((App Opapp ((Var (Short "o")) (Fun "v1" (App OpnMinus ((Lit 0) (Var (Short "v1"))))))) (Fun "v2" (Var (Short "v2"))))))) (App Opapp ((App Opapp ((Var (Short "fromchars")) (Let (SOME "k") (App OpnMinus ((App Strlen ((Var (Short "v5")))) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))) (App CopyStrStr ((Var (Short "v5")) (Lit 1) (Let (SOME "k") (App OpnMinus ((App Strlen ((Var (Short "v5")))) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))))))) (If (App Equality ((App Strsub ((Var (Short "v5")) (Lit 0))) (Lit (char "+")))) (App Opapp ((App Opapp ((Var (Long "Option" (Short "map"))) (Fun "v3" (Var (Short "v3"))))) (App Opapp ((App Opapp ((Var (Short "fromchars")) (Let (SOME "k") (App OpnMinus ((App Strlen ((Var (Short "v5")))) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))) (App CopyStrStr ((Var (Short "v5")) (Lit 1) (Let (SOME "k") (App OpnMinus ((App Strlen ((Var (Short "v5")))) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))))))) (App Opapp ((App Opapp ((Var (Long "Option" (Short "map"))) (Fun "v4" (Var (Short "v4"))))) (App Opapp ((App Opapp ((Var (Short "fromchars")) (App Strlen ((Var (Short "v5")))))) (Var (Short "v5"))))))))))) (Dlet (unk unk) "fromNatString" (Fun "v2" (Mat (App Opapp ((Var (Short "fromString")) (Var (Short "v2")))) (((Pcon (SOME (Short "None")) nil) Con (SOME (Short "None")) nil) ((Pcon (SOME (Short "Some")) ("v1")) If (App OpbLeq ((Lit 0) (Var (Short "v1")))) (Con (SOME (Short "Some")) ((Var (Short "v1")))) (Con (SOME (Short "None")) nil)))))) (Dlocal ((Dletrec (unk unk) (("num_gcd" "v1" Fun "v2" (If (App Equality ((Var (Short "v1")) (Lit 0))) (Var (Short "v2")) (App Opapp ((App Opapp ((Var (Short "num_gcd")) (App OpnModulo ((Var (Short "v2")) (Var (Short "v1")))))) (Var (Short "v1"))))))))) ((Dlet (unk unk) "gcd" (Fun "v1" (Fun "v2" (App Opapp ((App Opapp ((Var (Short "num_gcd")) (Let (SOME "k") (Var (Short "v1")) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (App OpnMinus ((Lit 0) (Var (Short "k")))) (Var (Short "k")))))) (Let (SOME "k") (Var (Short "v2")) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (App OpnMinus ((Lit 0) (Var (Short "k")))) (Var (Short "k"))))))))) (Dlet (unk unk) "compare" (Fun "v1" (Fun "v2" (If (App OpbLt ((Var (Short "v1")) (Var (Short "v2")))) (Con (SOME (Short "Less")) nil) (If (App OpbLt ((Var (Short "v2")) (Var (Short "v1")))) (Con (SOME (Short "Greater")) nil) (Con (SOME (Short "Equal")) nil)))))))))))) (Dmod "PrettyPrinter" ((Dtype (unk unk) ((nil "pp_data" ("Pp_data" (Atapp nil (Short "bool")) (Atapp ((Atapp nil (Short "string"))) (Short "app_list")))))) (Dtype (unk unk) ((nil "default_type" ("Default_type")))) (Dlocal ((Dletrec (unk unk) (("app_intersperse" "v5" Fun "v6" (Mat (Var (Short "v6")) (((Pcon (SOME (Short "[]")) nil) Con (SOME (Short "Nil")) nil) ((Pcon (SOME (Short "::")) ("v4" "v3")) Mat (Var (Short "v3")) (((Pcon (SOME (Short "[]")) nil) Var (Short "v4")) ((Pcon (SOME (Short "::")) ("v2" "v1")) Con (SOME (Short "Append")) ((Con (SOME (Short "Append")) ((Var (Short "v4")) (Con (SOME (Short "List")) ((Con (SOME (Short "::")) ((Var (Short "v5")) (Con (SOME (Short "[]")) nil))))))) (App Opapp ((App Opapp ((Var (Short "app_intersperse")) (Var (Short "v5")))) (Con (SOME (Short "::")) ((Var (Short "v2")) (Var (Short "v1"))))))))))))))) (Dlet (unk unk) "app_list_wrap" (Fun "v1" (Fun "v3" (Fun "v2" (Con (SOME (Short "Append")) ((Con (SOME (Short "List")) ((Con (SOME (Short "::")) ((Var (Short "v1")) (Con (SOME (Short "[]")) nil))))) (Con (SOME (Short "Append")) ((Var (Short "v3")) (Con (SOME (Short "List")) ((Con (SOME (Short "::")) ((Var (Short "v2")) (Con (SOME (Short "[]")) nil))))))))))))) (Dlet (unk unk) "pp_paren_contents" (Fun "v3" (Mat (Var (Short "v3")) (((Pcon (SOME (Short "Pp_data")) ("v2" "v1")) If (Var (Short "v2")) (App Opapp ((App Opapp ((App Opapp ((Var (Short "app_list_wrap")) (Lit "("))) (Var (Short "v1")))) (Lit ")"))) (Var (Short "v1"))))))) (Dletrec (unk unk) (("escape_str_app_list" "v4" Fun "v5" (Mat (App Opapp ((App Opapp ((App Opapp ((Var (Long "String" (Short "findi"))) (Fun "v1" (App Opapp ((Var (Long "Option" (Short "isSome"))) (App Opapp ((Var (Long "String" (Short "char_escape_seq"))) (Var (Short "v1"))))))))) (Var (Short "v4")))) (Var (Short "v5")))) (((Pcon (SOME (Short "None")) nil) Con (SOME (Short "List")) ((Con (SOME (Short "::")) ((App CopyStrStr ((Var (Short "v5")) (Var (Short "v4")) (Let (SOME "k") (App OpnMinus ((App Strlen ((Var (Short "v5")))) (Var (Short "v4")))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))) (Con (SOME (Short "[]")) nil))))) ((Pcon (SOME (Short "Some")) ("v3")) Con (SOME (Short "Append")) ((Con (SOME (Short "List")) ((Con (SOME (Short "::")) ((App CopyStrStr ((Var (Short "v5")) (Var (Short "v4")) (Let (SOME "k") (App OpnMinus ((Var (Short "v3")) (Var (Short "v4")))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))) (Con (SOME (Short "::")) ((Mat (App Opapp ((Var (Long "String" (Short "char_escape_seq"))) (App Strsub ((Var (Short "v5")) (Var (Short "v3")))))) (((Pcon (SOME (Short "None")) nil) Lit "") ((Pcon (SOME (Short "Some")) ("v2")) Var (Short "v2")))) (Con (SOME (Short "[]")) nil))))))) (App Opapp ((App Opapp ((Var (Short "escape_str_app_list")) (App OpnPlus ((Var (Short "v3")) (Lit 1))))) (Var (Short "v5")))))))))))) ((Dlet (unk unk) "toAppList" (Fun "v3" (Mat (Var (Short "v3")) (((Pcon (SOME (Short "Pp_data")) ("v2" "v1")) Var (Short "v1")))))) (Dlet (unk unk) "no_parens" (Fun "v1" (Con (SOME (Short "Pp_data")) ((App OpbLt ((Lit 0) (Lit 0))) (App Opapp ((Var (Short "toAppList")) (Var (Short "v1")))))))) (Dlet (unk unk) "token" (Fun "v1" (Con (SOME (Short "Pp_data")) ((App OpbLt ((Lit 0) (Lit 0))) (Con (SOME (Short "List")) ((Con (SOME (Short "::")) ((Var (Short "v1")) (Con (SOME (Short "[]")) nil))))))))) (Dlet (unk unk) "tuple" (Fun "v1" (Con (SOME (Short "Pp_data")) ((App OpbLt ((Lit 0) (Lit 0))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "app_list_wrap")) (Lit "("))) (App Opapp ((App Opapp ((Var (Short "app_intersperse")) (Lit ", "))) (App Opapp ((App Opapp ((Var (Long "List" (Short "map"))) (Var (Short "toAppList")))) (Var (Short "v1")))))))) (Lit ")"))))))) (Dlet (unk unk) "spaced_block" (Fun "v1" (Con (SOME (Short "Pp_data")) ((App OpbGt ((App Opapp ((Var (Long "List" (Short "length"))) (Var (Short "v1")))) (Lit 1))) (App Opapp ((App Opapp ((Var (Short "app_intersperse")) (Lit " "))) (App Opapp ((App Opapp ((Var (Long "List" (Short "map"))) (Var (Short "pp_paren_contents")))) (Var (Short "v1")))))))))) (Dlet (unk unk) "app_block" (Fun "v1" (Fun "v2" (App Opapp ((Var (Short "spaced_block")) (Con (SOME (Short "::")) ((App Opapp ((Var (Short "token")) (Var (Short "v1")))) (Var (Short "v2"))))))))) (Dlet (unk unk) "val_eq" (Fun "v1" (Fun "v2" (Fun "v4" (Fun "v3" (Con (SOME (Short "Pp_data")) ((App OpbLt ((Lit 0) (Lit 0))) (Con (SOME (Short "Append")) ((Con (SOME (Short "List")) ((Con (SOME (Short "::")) ((Lit "val ") (Con (SOME (Short "::")) ((Var (Short "v1")) (Con (SOME (Short "::")) ((Lit " = ") (Con (SOME (Short "[]")) nil))))))))) (Con (SOME (Short "Append")) ((App Opapp ((Var (Short "toAppList")) (App Opapp ((Var (Short "v2")) (Var (Short "v4")))))) (Con (SOME (Short "List")) ((Con (SOME (Short "::")) ((Lit ": ") (Con (SOME (Short "::")) ((Var (Short "v3")) (Con (SOME (Short "::")) ((Lit "\\0A") (Con (SOME (Short "[]")) nil)))))))))))))))))))) (Dlet (unk unk) "val_eq" (Fun "v1" (Fun "v2" (Fun "v4" (Fun "v3" (Con (SOME (Short "Pp_data")) ((App OpbLt ((Lit 0) (Lit 0))) (Con (SOME (Short "Append")) ((Con (SOME (Short "List")) ((Con (SOME (Short "::")) ((Lit "val ") (Con (SOME (Short "::")) ((Var (Short "v1")) (Con (SOME (Short "::")) ((Lit " = ") (Con (SOME (Short "[]")) nil))))))))) (Con (SOME (Short "Append")) ((App Opapp ((Var (Short "toAppList")) (App Opapp ((Var (Short "v2")) (Var (Short "v4")))))) (Con (SOME (Short "List")) ((Con (SOME (Short "::")) ((Lit ": ") (Con (SOME (Short "::")) ((Var (Short "v3")) (Con (SOME (Short "::")) ((Lit "\\0A") (Con (SOME (Short "[]")) nil)))))))))))))))))))) (Dlet (unk unk) "val_hidden_type" (Fun "v1" (Fun "v2" (Con (SOME (Short "Pp_data")) ((App OpbLt ((Lit 0) (Lit 0))) (Con (SOME (Short "List")) ((Con (SOME (Short "::")) ((Lit "val ") (Con (SOME (Short "::")) ((Var (Short "v1")) (Con (SOME (Short "::")) ((Lit " <not printable> : ") (Con (SOME (Short "::")) ((Var (Short "v2")) (Con (SOME (Short "::")) ((Lit "\\0A") (Con (SOME (Short "[]")) nil)))))))))))))))))) (Dlet (unk unk) "failure_message" (Fun "v1" (Con (SOME (Short "Pp_data")) ((App OpbLt ((Lit 0) (Lit 0))) (Con (SOME (Short "List")) ((Con (SOME (Short "::")) ((Lit "<failure: ") (Con (SOME (Short "::")) ((Var (Short "v1")) (Con (SOME (Short "::")) ((Lit ">\\0A") (Con (SOME (Short "[]")) nil))))))))))))) (Dlet (unk unk) "unprintable" (Fun "v1" (Con (SOME (Short "Pp_data")) ((App OpbLt ((Lit 0) (Lit 0))) (Con (SOME (Short "List")) ((Con (SOME (Short "::")) ((Lit "<val of unprintable type ") (Con (SOME (Short "::")) ((Var (Short "v1")) (Con (SOME (Short "::")) ((Lit ">") (Con (SOME (Short "[]")) nil))))))))))))) (Dlet (unk unk) "pp_list" (Fun "v2" (Fun "v3" (Con (SOME (Short "Pp_data")) ((App OpbLt ((Lit 0) (Lit 0))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "app_list_wrap")) (Lit "["))) (App Opapp ((App Opapp ((Var (Short "app_intersperse")) (Lit "; "))) (App Opapp ((App Opapp ((Var (Long "List" (Short "map"))) (Fun "v1" (App Opapp ((Var (Short "toAppList")) (App Opapp ((Var (Short "v2")) (Var (Short "v1"))))))))) (Var (Short "v3")))))))) (Lit "]")))))))) (Dlet (unk unk) "pp_bool" (Fun "v1" (Con (SOME (Short "Pp_data")) ((App OpbLt ((Lit 0) (Lit 0))) (Con (SOME (Short "List")) ((Con (SOME (Short "::")) ((If (Var (Short "v1")) (Lit "True") (Lit "False")) (Con (SOME (Short "[]")) nil))))))))) (Dlet (unk unk) "pp_char" (Fun "v2" (Con (SOME (Short "Pp_data")) ((App OpbLt ((Lit 0) (Lit 0))) (Con (SOME (Short "List")) ((Con (SOME (Short "::")) ((Lit "#\"") (Con (SOME (Short "::")) ((Mat (App Opapp ((Var (Long "String" (Short "char_escape_seq"))) (Var (Short "v2")))) (((Pcon (SOME (Short "None")) nil) App Implode ((Con (SOME (Short "::")) ((Var (Short "v2")) (Con (SOME (Short "[]")) nil))))) ((Pcon (SOME (Short "Some")) ("v1")) Var (Short "v1")))) (Con (SOME (Short "::")) ((Lit "\"") (Con (SOME (Short "[]")) nil))))))))))))) (Dlet (unk unk) "pp_string" (Fun "v1" (Con (SOME (Short "Pp_data")) ((App OpbLt ((Lit 0) (Lit 0))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "app_list_wrap")) (Lit "\""))) (App Opapp ((App Opapp ((Var (Short "escape_str_app_list")) (Lit 0))) (Var (Short "v1")))))) (Lit "\""))))))) (Dletrec (unk unk) (("pp_app_list" "v4" Fun "v5" (Mat (Var (Short "v5")) (((Pcon (SOME (Short "List")) ("v1")) App Opapp ((App Opapp ((Var (Short "app_block")) (Lit "List"))) (Con (SOME (Short "::")) ((App Opapp ((App Opapp ((Var (Short "pp_list")) (Var (Short "v4")))) (Var (Short "v1")))) (Con (SOME (Short "[]")) nil))))) ((Pcon (SOME (Short "Append")) ("v3" "v2")) App Opapp ((App Opapp ((Var (Short "app_block")) (Lit "Append"))) (Con (SOME (Short "::")) ((App Opapp ((App Opapp ((Var (Short "pp_app_list")) (Var (Short "v4")))) (Var (Short "v3")))) (Con (SOME (Short "::")) ((App Opapp ((App Opapp ((Var (Short "pp_app_list")) (Var (Short "v4")))) (Var (Short "v2")))) (Con (SOME (Short "[]")) nil))))))) ((Pcon (SOME (Short "Nil")) nil) App Opapp ((Var (Short "token")) (Lit "Nil")))))))) (Dlet (unk unk) "pp_pp_data" (Fun "v3" (Mat (Var (Short "v3")) (((Pcon (SOME (Short "Pp_data")) ("v2" "v1")) App Opapp ((App Opapp ((Var (Short "app_block")) (Lit "PP_Data"))) (Con (SOME (Short "::")) ((App Opapp ((Var (Short "pp_bool")) (Var (Short "v2")))) (Con (SOME (Short "::")) ((App Opapp ((App Opapp ((Var (Short "pp_app_list")) (Var (Short "pp_string")))) (Var (Short "v1")))) (Con (SOME (Short "[]")) nil))))))))))) (Dlet (unk unk) "pp_default_type" (Fun "v1" (App Opapp ((Var (Short "token")) (Lit "<val of default type: this should be impossible>"))))))))) (Dlet (unk unk) "pp_exn" (Fun "v1" (App Opapp ((Var (Long "PrettyPrinter" (Short "token"))) (Lit "<exn>"))))) (Dlet (unk unk) "pp_unit" (Fun "v1" (App Opapp ((Var (Long "PrettyPrinter" (Short "token"))) (Lit "()"))))) (Dlet (unk unk) "pp_vector" (Fun "v1" (Fun "v2" (App Opapp ((App Opapp ((Var (Long "PrettyPrinter" (Short "app_block"))) (Lit "Vector.fromList"))) (Con (SOME (Short "::")) ((App Opapp ((App Opapp ((Var (Long "PrettyPrinter" (Short "pp_list"))) (Var (Short "v1")))) (App Opapp ((Var (Long "Vector" (Short "toList"))) (Var (Short "v2")))))) (Con (SOME (Short "[]")) nil)))))))) (Dlet (unk unk) "pp_list" (Fun "v1" (App Opapp ((Var (Long "PrettyPrinter" (Short "pp_list"))) (Var (Short "v1")))))) (Dlet (unk unk) "pp_bool" (Fun "v1" (App Opapp ((Var (Long "PrettyPrinter" (Short "pp_bool"))) (Var (Short "v1")))))) (Dlet (unk unk) "pp_char" (Fun "v1" (App Opapp ((Var (Long "PrettyPrinter" (Short "pp_char"))) (Var (Short "v1")))))) (Dlet (unk unk) "pp_string" (Fun "v1" (App Opapp ((Var (Long "PrettyPrinter" (Short "pp_string"))) (Var (Short "v1")))))) (Dlet (unk unk) "pp_app_list" (Fun "v1" (App Opapp ((Var (Long "PrettyPrinter" (Short "pp_app_list"))) (Var (Short "v1")))))) (Dlet (unk unk) "pp_ref" (Fun "v1" (Fun "v2" (App Opapp ((Var (Long "PrettyPrinter" (Short "token"))) (Lit "<ref>")))))) (Dlet (unk unk) "pp_array" (Fun "v2" (Fun "v1" (App Opapp ((Var (Long "PrettyPrinter" (Short "token"))) (Lit "<array>")))))) (Dlet (unk unk) "pp_word8array" (Fun "v1" (App Opapp ((Var (Long "PrettyPrinter" (Short "token"))) (Lit "<w8array>"))))) (Dlet (unk unk) "pp_fun" (Con (SOME (Long "PrettyPrinter" (Short "Pp_data"))) ((App OpbLt ((Lit 0) (Lit 0))) (Con (SOME (Short "List")) ((Con (SOME (Short "::")) ((Lit "<fun>") (Con (SOME (Short "[]")) nil)))))))) (Dlet (unk unk) "pp_int" (Fun "v1" (App Opapp ((Var (Long "PrettyPrinter" (Short "token"))) (App Opapp ((Var (Long "Int" (Short "toString"))) (Var (Short "v1")))))))) (Dlet (unk unk) "pp_word8" (Fun "v1" (App Opapp ((App Opapp ((Var (Long "PrettyPrinter" (Short "app_block"))) (Lit "Word8.fromInt"))) (Con (SOME (Short "::")) ((App Opapp ((Var (Short "pp_int")) (Let (SOME "x") (App W8toInt ((Var (Short "v1")))) (If (App OpbLt ((Var (Short "x")) (Lit 128))) (Var (Short "x")) (App OpnMinus ((Var (Short "x")) (Lit 256))))))) (Con (SOME (Short "[]")) nil))))))) (Dlet (unk unk) "pp_word64" (Fun "v1" (App Opapp ((App Opapp ((Var (Long "PrettyPrinter" (Short "app_block"))) (Lit "Word64.fromInt"))) (Con (SOME (Short "::")) ((App Opapp ((Var (Short "pp_int")) (Let (SOME "x") (App W64toInt ((Var (Short "v1")))) (If (App OpbLt ((Var (Short "x")) (Lit 9223372036854775808))) (Var (Short "x")) (App OpnMinus ((Var (Short "x")) (Lit 18446744073709551616))))))) (Con (SOME (Short "[]")) nil))))))) (Dletrec (unk unk) (("pp_option" "pp_'a" Fun "x" (Mat (Var (Short "x")) (((Pcon (SOME (Short "Some")) ("x0")) App Opapp ((App Opapp ((Var (Long "PrettyPrinter" (Short "app_block"))) (Lit "Some"))) (Con (SOME (Short "::")) ((App Opapp ((Var (Short "pp_'a")) (Var (Short "x0")))) (Con (SOME (Short "[]")) nil))))) ((Pcon (SOME (Short "None")) nil) App Opapp ((App Opapp ((Var (Long "PrettyPrinter" (Short "app_block"))) (Lit "None"))) (Con (SOME (Short "[]")) nil)))))))) (Dletrec (unk unk) (("pp_ordering" "x" Mat (Var (Short "x")) (((Pcon (SOME (Short "Greater")) nil) App Opapp ((App Opapp ((Var (Long "PrettyPrinter" (Short "app_block"))) (Lit "Greater"))) (Con (SOME (Short "[]")) nil))) ((Pcon (SOME (Short "Equal")) nil) App Opapp ((App Opapp ((Var (Long "PrettyPrinter" (Short "app_block"))) (Lit "Equal"))) (Con (SOME (Short "[]")) nil))) ((Pcon (SOME (Short "Less")) nil) App Opapp ((App Opapp ((Var (Long "PrettyPrinter" (Short "app_block"))) (Lit "Less"))) (Con (SOME (Short "[]")) nil))))))) (Dletrec (unk unk) (("pp_sum" "pp_'a" Fun "pp_'b" (Fun "x" (Mat (Var (Short "x")) (((Pcon (SOME (Short "Inr")) ("x0")) App Opapp ((App Opapp ((Var (Long "PrettyPrinter" (Short "app_block"))) (Lit "Inr"))) (Con (SOME (Short "::")) ((App Opapp ((Var (Short "pp_'b")) (Var (Short "x0")))) (Con (SOME (Short "[]")) nil))))) ((Pcon (SOME (Short "Inl")) ("x0")) App Opapp ((App Opapp ((Var (Long "PrettyPrinter" (Short "app_block"))) (Lit "Inl"))) (Con (SOME (Short "::")) ((App Opapp ((Var (Short "pp_'a")) (Var (Short "x0")))) (Con (SOME (Short "[]")) nil))))))))))) (Dletrec (unk unk) (("pp_app_list" "pp_'a" Fun "x" (Mat (Var (Short "x")) (((Pcon (SOME (Short "Nil")) nil) App Opapp ((App Opapp ((Var (Long "PrettyPrinter" (Short "app_block"))) (Lit "Nil"))) (Con (SOME (Short "[]")) nil))) ((Pcon (SOME (Short "Append")) ("x0" "x1")) App Opapp ((App Opapp ((Var (Long "PrettyPrinter" (Short "app_block"))) (Lit "Append"))) (Con (SOME (Short "::")) ((App Opapp ((App Opapp ((Var (Short "pp_app_list")) (Var (Short "pp_'a")))) (Var (Short "x0")))) (Con (SOME (Short "::")) ((App Opapp ((App Opapp ((Var (Short "pp_app_list")) (Var (Short "pp_'a")))) (Var (Short "x1")))) (Con (SOME (Short "[]")) nil))))))) ((Pcon (SOME (Short "List")) ("x0")) App Opapp ((App Opapp ((Var (Long "PrettyPrinter" (Short "app_block"))) (Lit "List"))) (Con (SOME (Short "::")) ((App Opapp ((App Opapp ((Var (Short "pp_list")) (Var (Short "pp_'a")))) (Var (Short "x0")))) (Con (SOME (Short "[]")) nil)))))))))) (Dlocal ((Dtype (unk unk) ((nil "rational" ("Ratpair" (Atapp nil (Short "int")) (Atapp nil (Short "int")))))) (Dlet (unk unk) "div_gcd" (Fun "v2" (Fun "v3" (Let (SOME "v1") (App Opapp ((App Opapp ((Var (Long "Int" (Short "gcd"))) (Let (SOME "k") (Var (Short "v2")) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (App OpnMinus ((Lit 0) (Var (Short "k")))) (Var (Short "k")))))) (Var (Short "v3")))) (If (Log Or (App Equality ((Var (Short "v1")) (Lit 0))) (App Equality ((Var (Short "v1")) (Lit 1)))) (Con (SOME (Short "Ratpair")) ((Var (Short "v2")) (Var (Short "v3")))) (Con (SOME (Short "Ratpair")) ((App OpnDivide ((Var (Short "v2")) (Var (Short "v1")))) (App OpnDivide ((Var (Short "v3")) (Var (Short "v1")))))))))))) ((Dmod "Rat" ((Dtabbrev (unk unk) nil "rat" (Atapp nil (Short "rational"))) (Dlet (unk unk) "fromInt" (Fun "v1" (Con (SOME (Short "Ratpair")) ((Var (Short "v1")) (Lit 1))))) (Dlet (unk unk) "<=" (Fun "v6" (Fun "v5" (Mat (Var (Short "v6")) (((Pcon (SOME (Short "Ratpair")) ("v4" "v3")) Mat (Var (Short "v5")) (((Pcon (SOME (Short "Ratpair")) ("v2" "v1")) App OpbLeq ((App OpnTimes ((Var (Short "v4")) (Var (Short "v1")))) (App OpnTimes ((Var (Short "v2")) (Var (Short "v3"))))))))))))) (Dlet (unk unk) ">=" (Fun "v1" (Fun "v2" (App Opapp ((App Opapp ((Var (Short "<=")) (Var (Short "v2")))) (Var (Short "v1"))))))) (Dlet (unk unk) "<" (Fun "v6" (Fun "v5" (Mat (Var (Short "v6")) (((Pcon (SOME (Short "Ratpair")) ("v4" "v3")) Mat (Var (Short "v5")) (((Pcon (SOME (Short "Ratpair")) ("v2" "v1")) App OpbLt ((App OpnTimes ((Var (Short "v4")) (Var (Short "v1")))) (App OpnTimes ((Var (Short "v2")) (Var (Short "v3"))))))))))))) (Dlet (unk unk) ">" (Fun "v1" (Fun "v2" (App Opapp ((App Opapp ((Var (Short "<")) (Var (Short "v2")))) (Var (Short "v1"))))))) (Dlet (unk unk) "compare" (Fun "v8" (Fun "v7" (Mat (Var (Short "v8")) (((Pcon (SOME (Short "Ratpair")) ("v6" "v5")) Mat (Var (Short "v7")) (((Pcon (SOME (Short "Ratpair")) ("v4" "v3")) Let (SOME "v2") (App OpnTimes ((Var (Short "v6")) (Var (Short "v3")))) (Let (SOME "v1") (App OpnTimes ((Var (Short "v4")) (Var (Short "v5")))) (If (App OpbLt ((Var (Short "v2")) (Var (Short "v1")))) (Con (SOME (Short "Less")) nil) (If (App OpbLt ((Var (Short "v1")) (Var (Short "v2")))) (Con (SOME (Short "Greater")) nil) (Con (SOME (Short "Equal")) nil)))))))))))) (Dlet (unk unk) "min" (Fun "v1" (Fun "v2" (If (App Opapp ((App Opapp ((Var (Short "<")) (Var (Short "v1")))) (Var (Short "v2")))) (Var (Short "v1")) (Var (Short "v2")))))) (Dlet (unk unk) "max" (Fun "v1" (Fun "v2" (If (App Opapp ((App Opapp ((Var (Short ">")) (Var (Short "v1")))) (Var (Short "v2")))) (Var (Short "v1")) (Var (Short "v2")))))) (Dlet (unk unk) "+" (Fun "v6" (Fun "v5" (Mat (Var (Short "v6")) (((Pcon (SOME (Short "Ratpair")) ("v4" "v3")) Mat (Var (Short "v5")) (((Pcon (SOME (Short "Ratpair")) ("v2" "v1")) App Opapp ((App Opapp ((Var (Short "div_gcd")) (App OpnPlus ((App OpnTimes ((Var (Short "v4")) (Var (Short "v1")))) (App OpnTimes ((Var (Short "v2")) (Var (Short "v3")))))))) (App OpnTimes ((Var (Short "v3")) (Var (Short "v1"))))))))))))) (Dlet (unk unk) "-" (Fun "v6" (Fun "v5" (Mat (Var (Short "v6")) (((Pcon (SOME (Short "Ratpair")) ("v4" "v3")) Mat (Var (Short "v5")) (((Pcon (SOME (Short "Ratpair")) ("v2" "v1")) App Opapp ((App Opapp ((Var (Short "div_gcd")) (App OpnMinus ((App OpnTimes ((Var (Short "v4")) (Var (Short "v1")))) (App OpnTimes ((Var (Short "v2")) (Var (Short "v3")))))))) (App OpnTimes ((Var (Short "v3")) (Var (Short "v1"))))))))))))) (Dlet (unk unk) "~" (Fun "v1" (App Opapp ((App Opapp ((Var (Short "-")) (App Opapp ((Var (Short "fromInt")) (Lit 0))))) (Var (Short "v1")))))) (Dlet (unk unk) "*" (Fun "v6" (Fun "v5" (Mat (Var (Short "v6")) (((Pcon (SOME (Short "Ratpair")) ("v4" "v3")) Mat (Var (Short "v5")) (((Pcon (SOME (Short "Ratpair")) ("v2" "v1")) App Opapp ((App Opapp ((Var (Short "div_gcd")) (App OpnTimes ((Var (Short "v4")) (Var (Short "v2")))))) (App OpnTimes ((Var (Short "v3")) (Var (Short "v1"))))))))))))) (Dlet (unk unk) "inv" (Fun "v3" (Mat (Var (Short "v3")) (((Pcon (SOME (Short "Ratpair")) ("v2" "v1")) Con (SOME (Short "Ratpair")) ((If (App OpbLt ((Var (Short "v2")) (Lit 0))) (App OpnMinus ((Lit 0) (Var (Short "v1")))) (Var (Short "v1"))) (Let (SOME "k") (Var (Short "v2")) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (App OpnMinus ((Lit 0) (Var (Short "k")))) (Var (Short "k")))))))))) (Dlet (unk unk) "/" (Fun "v1" (Fun "v2" (App Opapp ((App Opapp ((Var (Short "*")) (Var (Short "v1")))) (App Opapp ((Var (Short "inv")) (Var (Short "v2"))))))))) (Dlet (unk unk) "toString" (Fun "v3" (Mat (Var (Short "v3")) (((Pcon (SOME (Short "Ratpair")) ("v2" "v1")) If (App Equality ((Var (Short "v1")) (Lit 1))) (App Opapp ((Var (Long "Int" (Short "toString"))) (Var (Short "v2")))) (App Strcat ((Con (SOME (Short "::")) ((App Opapp ((Var (Long "Int" (Short "toString"))) (Var (Short "v2")))) (Con (SOME (Short "::")) ((App Implode ((Con (SOME (Short "::")) ((Lit (char "/")) (Con (SOME (Short "[]")) nil))))) (Con (SOME (Short "::")) ((App Opapp ((Var (Long "Int" (Short "toString"))) (Var (Short "v1")))) (Con (SOME (Short "[]")) nil)))))))))))))) (Dlet (unk unk) "pp_rat" (Fun "v1" (App Opapp ((Var (Long "PrettyPrinter" (Short "token"))) (App Opapp ((Var (Short "toString")) (Var (Short "v1")))))))) (Dlet (unk unk) "numerator" (Fun "v3" (Mat (Var (Short "v3")) (((Pcon (SOME (Short "Ratpair")) ("v2" "v1")) Var (Short "v2")))))) (Dlet (unk unk) "denominator" (Fun "v3" (Mat (Var (Short "v3")) (((Pcon (SOME (Short "Ratpair")) ("v2" "v1")) Var (Short "v1")))))) (Dlet (unk unk) "floor" (Fun "v3" (Mat (Var (Short "v3")) (((Pcon (SOME (Short "Ratpair")) ("v2" "v1")) App OpnDivide ((Var (Short "v2")) (Var (Short "v1")))))))) (Dlet (unk unk) "ceiling" (Fun "v2" (Let (SOME "v1") (App Opapp ((Var (Short "floor")) (Var (Short "v2")))) (If (App Equality ((App Opapp ((Var (Short "fromInt")) (Var (Short "v1")))) (Var (Short "v2")))) (Var (Short "v1")) (App OpnPlus ((Var (Short "v1")) (Lit 1))))))) (Dlet (unk unk) "is_int" (Fun "v3" (Mat (Var (Short "v3")) (((Pcon (SOME (Short "Ratpair")) ("v2" "v1")) App Equality ((Var (Short "v1")) (Lit 1))))))))) (Dtabbrev (unk unk) nil "rat" (Atapp nil (Short "rational"))))) (Dmod "Char" ((Dtabbrev (unk unk) nil "char" (Atapp nil (Short "char"))) (Dlet (unk unk) "ord" (Fun "v1" (App Ord ((Var (Short "v1")))))) (Dlet (unk unk) "chr" (Fun "v1" (App Chr ((Var (Short "v1")))))) (Dlet (unk unk) "<" (Fun "v1" (Fun "v2" (App ChopbLt ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) ">" (Fun "v1" (Fun "v2" (App ChopbGt ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "<=" (Fun "v1" (Fun "v2" (App ChopbLeq ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) ">=" (Fun "v1" (Fun "v2" (App ChopbGeq ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "isSpace" (Fun "v1" (Log Or (App Equality ((App Ord ((Var (Short "v1")))) (Lit 32))) (Log And (App OpbLeq ((Lit 9) (App Ord ((Var (Short "v1")))))) (App OpbLeq ((App Ord ((Var (Short "v1")))) (Lit 13))))))) (Dlet (unk unk) "fromByte" (Fun "v1" (App Chr ((App W8toInt ((Var (Short "v1")))))))) (Dlocal ((Dlet (unk unk) "some_chars_vector" (App VfromList ((Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\00")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\01")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\02")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\03")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\04")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\05")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\06")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\07")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\08")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\09")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\0A")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\0B")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\0C")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\0D")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\0E")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\0F")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\10")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\11")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\12")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\13")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\14")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\15")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\16")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\17")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\18")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\19")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\1A")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\1B")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\1C")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\1D")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\1E")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\1F")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char " ")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "!")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\"")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "#")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "$")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "%")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "&")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "'")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "(")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char ")")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "*")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "+")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char ",")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "-")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char ".")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "/")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "0")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "1")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "2")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "3")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "4")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "5")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "6")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "7")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "8")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "9")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char ":")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char ";")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "<")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "=")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char ">")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "?")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "@")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "A")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "B")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "C")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "D")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "E")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "F")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "G")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "H")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "I")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "J")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "K")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "L")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "M")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "N")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "O")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "P")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "Q")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "R")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "S")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "T")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "U")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "V")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "W")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "X")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "Y")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "Z")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "[")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\\\")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "]")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "^")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "_")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "`")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "a")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "b")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "c")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "d")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "e")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "f")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "g")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "h")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "i")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "j")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "k")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "l")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "m")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "n")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "o")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "p")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "q")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "r")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "s")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "t")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "u")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "v")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "w")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "x")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "y")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "z")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "{")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "|")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "}")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "~")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\7F")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\80")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\81")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\82")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\83")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\84")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\85")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\86")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\87")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\88")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\89")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\8A")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\8B")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\8C")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\8D")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\8E")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\8F")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\90")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\91")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\92")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\93")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\94")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\95")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\96")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\97")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\98")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\99")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\9A")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\9B")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\9C")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\9D")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\9E")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\9F")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\A0")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\A1")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\A2")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\A3")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\A4")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\A5")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\A6")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\A7")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\A8")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\A9")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\AA")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\AB")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\AC")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\AD")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\AE")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\AF")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\B0")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\B1")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\B2")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\B3")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\B4")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\B5")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\B6")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\B7")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\B8")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\B9")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\BA")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\BB")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\BC")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\BD")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\BE")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\BF")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\C0")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\C1")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\C2")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\C3")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\C4")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\C5")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\C6")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\C7")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\C8")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\C9")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\CA")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\CB")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\CC")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\CD")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\CE")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\CF")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\D0")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\D1")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\D2")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\D3")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\D4")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\D5")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\D6")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\D7")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\D8")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\D9")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\DA")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\DB")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\DC")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\DD")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\DE")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\DF")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\E0")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\E1")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\E2")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\E3")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\E4")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\E5")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\E6")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\E7")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\E8")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\E9")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\EA")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\EB")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\EC")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\ED")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\EE")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\EF")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\F0")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\F1")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\F2")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\F3")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\F4")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\F5")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\F6")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\F7")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\F8")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\F9")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\FA")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\FB")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\FC")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\FD")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\FE")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\FF")))) (Con (SOME (Short "[]")) nillet (unk unk) "some" (Fun "v1" (App Vsub ((Var (Short "some_chars_vector")) (App Ord ((Var (Short "v1")))))))))))) (Dmod "Word64" ((Dtabbrev (unk unk) nil "word" (Atapp nil (Short "word64"))) (Dlet (unk unk) "fromInt" (Fun "v1" (App W64fromInt ((Var (Short "v1")))))) (Dlet (unk unk) "toInt" (Fun "v1" (App W64toInt ((Var (Short "v1")))))) (Dlet (unk unk) "toIntSigned" (Fun "v1" (Let (SOME "x") (App W64toInt ((Var (Short "v1")))) (If (App OpbLt ((Var (Short "x")) (Lit 9223372036854775808))) (Var (Short "x")) (App OpnMinus ((Var (Short "x")) (Lit 18446744073709551616))))))) (Dlet (unk unk) "andb" (Fun "v1" (Fun "v2" (App Opw64Andw ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "orb" (Fun "v1" (Fun "v2" (App Opw64Orw ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "xorb" (Fun "v1" (Fun "v2" (App Opw64Xor ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "notb" (Fun "v1" (App Opw64Xor ((Var (Short "v1")) (Lit (word64 18446744073709551615)))))) (Dlet (unk unk) "+" (Fun "v1" (Fun "v2" (App Opw64Add ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "-" (Fun "v1" (Fun "v2" (App Opw64Sub ((Var (Short "v1")) (Var (Short "v2"))))))) (Dletrec (unk unk) (("<<" "v2" Fun "v1" (If (App OpbLt ((Lit 64) (Var (Short "v1")))) (Lit (word64 0)) (If (App OpbLt ((Var (Short "v1")) (Lit 8))) (If (App OpbLt ((Var (Short "v1")) (Lit 4))) (If (App OpbLt ((Var (Short "v1")) (Lit 2))) (If (App OpbLt ((Var (Short "v1")) (Lit 1))) (Var (Short "v2")) (App (Shift64Lsl . 1) ((Var (Short "v2"))))) (If (App OpbLt ((Var (Short "v1")) (Lit 3))) (App (Shift64Lsl . 2) ((Var (Short "v2")))) (App (Shift64Lsl . 3) ((Var (Short "v2")))))) (If (App OpbLt ((Var (Short "v1")) (Lit 6))) (If (App OpbLt ((Var (Short "v1")) (Lit 5))) (App (Shift64Lsl . 4) ((Var (Short "v2")))) (App (Shift64Lsl . 5) ((Var (Short "v2"))))) (If (App OpbLt ((Var (Short "v1")) (Lit 7))) (App (Shift64Lsl . 6) ((Var (Short "v2")))) (App (Shift64Lsl . 7) ((Var (Short "v2"))))))) (App Opapp ((App Opapp ((Var (Short "<<")) (App (Shift64Lsl . 8) ((Var (Short "v2")))))) (Let (SOME "k") (App OpnMinus ((Var (Short "v1")) (Lit 8))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k"))))))))))) (Dletrec (unk unk) ((">>" "v2" Fun "v1" (If (App OpbLt ((Lit 64) (Var (Short "v1")))) (Lit (word64 0)) (If (App OpbLt ((Var (Short "v1")) (Lit 8))) (If (App OpbLt ((Var (Short "v1")) (Lit 4))) (If (App OpbLt ((Var (Short "v1")) (Lit 2))) (If (App OpbLt ((Var (Short "v1")) (Lit 1))) (Var (Short "v2")) (App (Shift64Lsr . 1) ((Var (Short "v2"))))) (If (App OpbLt ((Var (Short "v1")) (Lit 3))) (App (Shift64Lsr . 2) ((Var (Short "v2")))) (App (Shift64Lsr . 3) ((Var (Short "v2")))))) (If (App OpbLt ((Var (Short "v1")) (Lit 6))) (If (App OpbLt ((Var (Short "v1")) (Lit 5))) (App (Shift64Lsr . 4) ((Var (Short "v2")))) (App (Shift64Lsr . 5) ((Var (Short "v2"))))) (If (App OpbLt ((Var (Short "v1")) (Lit 7))) (App (Shift64Lsr . 6) ((Var (Short "v2")))) (App (Shift64Lsr . 7) ((Var (Short "v2"))))))) (App Opapp ((App Opapp ((Var (Short ">>")) (App (Shift64Lsr . 8) ((Var (Short "v2")))))) (Let (SOME "k") (App OpnMinus ((Var (Short "v1")) (Lit 8))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k"))))))))))) (Dletrec (unk unk) (("~>>" "v2" Fun "v1" (If (App OpbLt ((Lit 64) (Var (Short "v1")))) (App (Shift64Asr . 64) ((Var (Short "v2")))) (If (App OpbLt ((Var (Short "v1")) (Lit 8))) (If (App OpbLt ((Var (Short "v1")) (Lit 4))) (If (App OpbLt ((Var (Short "v1")) (Lit 2))) (If (App OpbLt ((Var (Short "v1")) (Lit 1))) (Var (Short "v2")) (App (Shift64Asr . 1) ((Var (Short "v2"))))) (If (App OpbLt ((Var (Short "v1")) (Lit 3))) (App (Shift64Asr . 2) ((Var (Short "v2")))) (App (Shift64Asr . 3) ((Var (Short "v2")))))) (If (App OpbLt ((Var (Short "v1")) (Lit 6))) (If (App OpbLt ((Var (Short "v1")) (Lit 5))) (App (Shift64Asr . 4) ((Var (Short "v2")))) (App (Shift64Asr . 5) ((Var (Short "v2"))))) (If (App OpbLt ((Var (Short "v1")) (Lit 7))) (App (Shift64Asr . 6) ((Var (Short "v2")))) (App (Shift64Asr . 7) ((Var (Short "v2"))))))) (App Opapp ((App Opapp ((Var (Short "~>>")) (App (Shift64Asr . 8) ((Var (Short "v2")))))) (Let (SOME "k") (App OpnMinus ((Var (Short "v1")) (Lit 8))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k"))))))))))) (Dlet (unk unk) "concatAll" (Fun "v1" (Fun "v2" (Fun "v3" (Fun "v4" (Fun "v5" (Fun "v6" (Fun "v7" (Fun "v8" (App Opw64Orw ((App (Shift64Lsl . 0) ((App (Shift64Lsr . 0) ((App W64fromInt ((App W8toInt ((Var (Short "v1")))))))))) (App (Shift64Lsl . 8) ((App Opw64Orw ((App (Shift64Lsl . 0) ((App (Shift64Lsr . 0) ((App W64fromInt ((App W8toInt ((Var (Short "v2")))))))))) (App (Shift64Lsl . 8) ((App Opw64Orw ((App (Shift64Lsl . 0) ((App (Shift64Lsr . 0) ((App W64fromInt ((App W8toInt ((Var (Short "v3")))))))))) (App (Shift64Lsl . 8) ((App Opw64Orw ((App (Shift64Lsl . 0) ((App (Shift64Lsr . 0) ((App W64fromInt ((App W8toInt ((Var (Short "v4")))))))))) (App (Shift64Lsl . 8) ((App Opw64Orw ((App (Shift64Lsl . 0) ((App (Shift64Lsr . 0) ((App W64fromInt ((App W8toInt ((Var (Short "v5")))))))))) (App (Shift64Lsl . 8) ((App Opw64Orw ((App (Shift64Lsl . 0) ((App (Shift64Lsr . 0) ((App W64fromInt ((App W8toInt ((Var (Short "v6")))))))))) (App (Shift64Lsl . 8) ((App Opw64Orw ((App (Shift64Lsl . 0) ((App (Shift64Lsr . 0) ((App W64fromInt ((App W8toInt ((Var (Short "v7")))))))))) (App (Shift64Lsl . 8) ((App (Shift64Lsl . 0) ((App (Shift64Lsr . 0) ((App W64fromInt ((App W8toInt ((Var (Short "v8"))))))))))))))))))))))))))))))))))))))))))))))))) (Dtabbrev (unk unk) nil "byte" (Atapp nil (Short "word8"))) (Dmod "Word8" ((Dtabbrev (unk unk) nil "word" (Atapp nil (Short "word8"))) (Dlet (unk unk) "fromInt" (Fun "v1" (App W8fromInt ((Var (Short "v1")))))) (Dlet (unk unk) "toInt" (Fun "v1" (App W8toInt ((Var (Short "v1")))))) (Dlet (unk unk) "toIntSigned" (Fun "v1" (Let (SOME "x") (App W8toInt ((Var (Short "v1")))) (If (App OpbLt ((Var (Short "x")) (Lit 128))) (Var (Short "x")) (App OpnMinus ((Var (Short "x")) (Lit 256))))))) (Dlet (unk unk) "andb" (Fun "v1" (Fun "v2" (App Opw8Andw ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "orb" (Fun "v1" (Fun "v2" (App Opw8Orw ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "xorb" (Fun "v1" (Fun "v2" (App Opw8Xor ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "notb" (Fun "v1" (App Opw8Xor ((Var (Short "v1")) (Lit (word8 255)))))) (Dlet (unk unk) "+" (Fun "v1" (Fun "v2" (App Opw8Add ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "-" (Fun "v1" (Fun "v2" (App Opw8Sub ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "<<" (Fun "v2" (Fun "v1" (If (App OpbLt ((Var (Short "v1")) (Lit 8))) (If (App OpbLt ((Var (Short "v1")) (Lit 4))) (If (App OpbLt ((Var (Short "v1")) (Lit 2))) (If (App OpbLt ((Var (Short "v1")) (Lit 1))) (Var (Short "v2")) (App (Shift8Lsl . 1) ((Var (Short "v2"))))) (If (App OpbLt ((Var (Short "v1")) (Lit 3))) (App (Shift8Lsl . 2) ((Var (Short "v2")))) (App (Shift8Lsl . 3) ((Var (Short "v2")))))) (If (App OpbLt ((Var (Short "v1")) (Lit 6))) (If (App OpbLt ((Var (Short "v1")) (Lit 5))) (App (Shift8Lsl . 4) ((Var (Short "v2")))) (App (Shift8Lsl . 5) ((Var (Short "v2"))))) (If (App OpbLt ((Var (Short "v1")) (Lit 7))) (App (Shift8Lsl . 6) ((Var (Short "v2")))) (App (Shift8Lsl . 7) ((Var (Short "v2"))))))) (Lit (word8 0)))))) (Dlet (unk unk) ">>" (Fun "v2" (Fun "v1" (If (App OpbLt ((Var (Short "v1")) (Lit 8))) (If (App OpbLt ((Var (Short "v1")) (Lit 4))) (If (App OpbLt ((Var (Short "v1")) (Lit 2))) (If (App OpbLt ((Var (Short "v1")) (Lit 1))) (Var (Short "v2")) (App (Shift8Lsr . 1) ((Var (Short "v2"))))) (If (App OpbLt ((Var (Short "v1")) (Lit 3))) (App (Shift8Lsr . 2) ((Var (Short "v2")))) (App (Shift8Lsr . 3) ((Var (Short "v2")))))) (If (App OpbLt ((Var (Short "v1")) (Lit 6))) (If (App OpbLt ((Var (Short "v1")) (Lit 5))) (App (Shift8Lsr . 4) ((Var (Short "v2")))) (App (Shift8Lsr . 5) ((Var (Short "v2"))))) (If (App OpbLt ((Var (Short "v1")) (Lit 7))) (App (Shift8Lsr . 6) ((Var (Short "v2")))) (App (Shift8Lsr . 7) ((Var (Short "v2"))))))) (Lit (word8 0)))))) (Dlet (unk unk) "~>>" (Fun "v2" (Fun "v1" (If (App OpbLt ((Var (Short "v1")) (Lit 8))) (If (App OpbLt ((Var (Short "v1")) (Lit 4))) (If (App OpbLt ((Var (Short "v1")) (Lit 2))) (If (App OpbLt ((Var (Short "v1")) (Lit 1))) (Var (Short "v2")) (App (Shift8Asr . 1) ((Var (Short "v2"))))) (If (App OpbLt ((Var (Short "v1")) (Lit 3))) (App (Shift8Asr . 2) ((Var (Short "v2")))) (App (Shift8Asr . 3) ((Var (Short "v2")))))) (If (App OpbLt ((Var (Short "v1")) (Lit 6))) (If (App OpbLt ((Var (Short "v1")) (Lit 5))) (App (Shift8Asr . 4) ((Var (Short "v2")))) (App (Shift8Asr . 5) ((Var (Short "v2"))))) (If (App OpbLt ((Var (Short "v1")) (Lit 7))) (App (Shift8Asr . 6) ((Var (Short "v2")))) (App (Shift8Asr . 7) ((Var (Short "v2"))))))) (App (Shift8Asr . 8) ((Var (Short "v2")))))))))) (Dtabbrev (unk unk) nil "byte_array" (Atapp nil (Short "word8array"))) (Dmod "Word8Array" ((Dlet (unk unk) "array" (Fun "x" (Fun "y" (App Aw8alloc ((Var (Short "x")) (Var (Short "y"))))))) (Dlet (unk unk) "sub" (Fun "x" (Fun "y" (App Aw8sub ((Var (Short "x")) (Var (Short "y"))))))) (Dlet (unk unk) "length" (Fun "x" (App Aw8length ((Var (Short "x")))))) (Dlet (unk unk) "update" (Fun "x" (Fun "y" (Fun "z" (App Aw8update ((Var (Short "x")) (Var (Short "y")) (Var (Short "z")))))))) (Dlet (unk unk) "copy" (Fun "src" (Fun "srcoff" (Fun "len" (Fun "dst" (Fun "dstoff" (App CopyAw8Aw8 ((Var (Short "src")) (Var (Short "srcoff")) (Var (Short "len")) (Var (Short "dst")) (Var (Short "dstoff")))))))))) (Dlet (unk unk) "copyVec" (Fun "src" (Fun "srcoff" (Fun "len" (Fun "dst" (Fun "dstoff" (App CopyStrAw8 ((Var (Short "src")) (Var (Short "srcoff")) (Var (Short "len")) (Var (Short "dst")) (Var (Short "dstoff")))))))))) (Dlet (unk unk) "substring" (Fun "src" (Fun "srcoff" (Fun "len" (App CopyAw8Str ((Var (Short "src")) (Var (Short "srcoff")) (Var (Short "len")))))))) (Dlocal ((Dletrec ((0 14) (5 38)) (("findi_aux" "f" Fun "arr" (Fun "max" (Fun "n" (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "n")))) (Var (Short "max")))) (If (Var (Short " v0")) (Con (SOME (Short "None")) nil) (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "sub")) (Var (Short "arr")))) (Var (Short "n")))) (Let (SOME " v2") (App Opapp ((Var (Short "f")) (Var (Short " v1")))) (If (Var (Short " v2")) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Short "sub")) (Var (Short "arr")))) (Var (Short "n")))) (Let (SOME " v4") (Con NONE ((Var (Short "n")) (Var (Short " v3")))) (Con (SOME (Short "Some")) ((Var (Short " v4")))))) (Let (SOME " v5") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "n")))) (Lit 1))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "findi_aux")) (Var (Short "f")))) (Var (Short "arr")))) (Var (Short "max")))) (Var (Short " v5")))))))))))))))) ((Dletrec ((0 14) (1 33)) (("findi" "f" Fun "arr" (Let (SOME " v0") (App Opapp ((Var (Short "length")) (Var (Short "arr")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "findi_aux")) (Var (Short "f")))) (Var (Short "arr")))) (Var (Short " v0")))) (Lit 0))))))))))) (Dmod "Array" ((Dtabbrev (unk unk) ("'a") "array" (Atapp ((Atvar "'a")) (Short "array"))) (Dlet (unk unk) "array" (Fun "x" (Fun "y" (App Aalloc ((Var (Short "x")) (Var (Short "y"))))))) (Dlet (unk unk) "arrayEmpty" (Fun "x" (App AallocEmpty ((Var (Short "x")))))) (Dlet (unk unk) "sub" (Fun "x" (Fun "y" (App Asub ((Var (Short "x")) (Var (Short "y"))))))) (Dlet (unk unk) "length" (Fun "x" (App Alength ((Var (Short "x")))))) (Dlet (unk unk) "update" (Fun "x" (Fun "y" (Fun "z" (App Aupdate ((Var (Short "x")) (Var (Short "y")) (Var (Short "z")))))))) (Dletrec ((0 14) (9 6)) (("fromList" "l" Letrec (("f" "arr" Fun "l" (Fun "i" (Mat (Var (Short "l")) (((Pcon (SOME (Short "[]")) nil) Var (Short "arr")) ((Pcon (SOME (Short "::")) ("h" "t")) Let NONE (App Opapp ((App Opapp ((App Opapp ((Var (Short "update")) (Var (Short "arr")))) (Var (Short "i")))) (Var (Short "h")))) (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "i")))) (Lit 1))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "f")) (Var (Short "arr")))) (Var (Short "t")))) (Var (Short " v0"))))))))))) (Mat (Var (Short "l")) (((Pcon (SOME (Short "[]")) nil) Let (SOME " v1") (Con NONE nil) (App Opapp ((Var (Short "arrayEmpty")) (Var (Short " v1"))))) ((Pcon (SOME (Short "::")) ("h" "t")) Let (SOME " v2") (App Opapp ((Var (Long "List" (Short "length"))) (Var (Short "l")))) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Short "array")) (Var (Short " v2")))) (Var (Short "h")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "f")) (Var (Short " v3")))) (Var (Short "t")))) (Lit 1)))))))))) (Dletrec ((0 14) (9 6)) (("tabulate" "n" Fun "f" (Letrec (("u" "arr" Fun "x" (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "x")))) (Var (Short "n")))) (If (Var (Short " v0")) (Var (Short "arr")) (Let (SOME " v1") (App Opapp ((Var (Short "f")) (Var (Short "x")))) (Let NONE (App Opapp ((App Opapp ((App Opapp ((Var (Short "update")) (Var (Short "arr")))) (Var (Short "x")))) (Var (Short " v1")))) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "x")))) (Lit 1))) (App Opapp ((App Opapp ((Var (Short "u")) (Var (Short "arr")))) (Var (Short " v2"))))))))))) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "n")))) (Lit 0))) (If (Var (Short " v3")) (Let (SOME " v4") (Con NONE nil) (App Opapp ((Var (Short "arrayEmpty")) (Var (Short " v4"))))) (Let (SOME " v5") (App Opapp ((Var (Short "f")) (Lit 0))) (Let (SOME " v6") (App Opapp ((App Opapp ((Var (Short "array")) (Var (Short "n")))) (Var (Short " v5")))) (App Opapp ((App Opapp ((Var (Short "u")) (Var (Short " v6")))) (Lit 1))))))))))) (Dlocal ((Dletrec ((0 14) (3 74)) (("copy_aux" "src" Fun "dst" (Fun "di" (Fun "max" (Fun "n" (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "n")))) (Var (Short "max")))) (If (Var (Short " v0")) (Con NONE nil) (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "sub")) (Var (Short "src")))) (Var (Short "n")))) (Let NONE (App Opapp ((App Opapp ((App Opapp ((Var (Short "update")) (Var (Short "dst")))) (Var (Short "di")))) (Var (Short " v1")))) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "n")))) (Lit 1))) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "di")))) (Lit 1))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "copy_aux")) (Var (Short "src")))) (Var (Short "dst")))) (Var (Short " v2")))) (Var (Short "max")))) (Var (Short " v3"))))))))))))))))) ((Dletrec ((0 14) (1 37)) (("copy" "src" Fun "dst" (Fun "di" (Let (SOME " v0") (App Opapp ((Var (Short "length")) (Var (Short "src")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "copy_aux")) (Var (Short "src")))) (Var (Short "dst")))) (Var (Short "di")))) (Var (Short " v0")))) (Lit 0)))))))) (Dlocal ((Dletrec ((0 14) (3 84)) (("copyVec_aux" "src" Fun "dst" (Fun "di" (Fun "max" (Fun "n" (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "n")))) (Var (Short "max")))) (If (Var (Short " v0")) (Con NONE nil) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Long "Vector" (Short "sub"))) (Var (Short "src")))) (Var (Short "n")))) (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "di")))) (Var (Short "n")))) (Let NONE (App Opapp ((App Opapp ((App Opapp ((Var (Short "update")) (Var (Short "dst")))) (Var (Short " v1")))) (Var (Short " v2")))) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "n")))) (Lit 1))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "copyVec_aux")) (Var (Short "src")))) (Var (Short "dst")))) (Var (Short "di")))) (Var (Short "max")))) (Var (Short " v3"))))))))))))))))) ((Dletrec ((0 14) (1 47)) (("copyVec" "src" Fun "dst" (Fun "di" (Let (SOME " v0") (App Opapp ((Var (Long "Vector" (Short "length"))) (Var (Short "src")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "copyVec_aux")) (Var (Short "src")))) (Var (Short "dst")))) (Var (Short "di")))) (Var (Short " v0")))) (Lit 0)))))))) (Dlocal ((Dletrec ((0 14) (3 50)) (("app_aux" "f" Fun "arr" (Fun "max" (Fun "n" (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "n")))) (Var (Short "max")))) (If (Var (Short " v0")) (Con NONE nil) (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "sub")) (Var (Short "arr")))) (Var (Short "n")))) (Let NONE (App Opapp ((Var (Short "f")) (Var (Short " v1")))) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "n")))) (Lit 1))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "app_aux")) (Var (Short "f")))) (Var (Short "arr")))) (Var (Short "max")))) (Var (Short " v2"))))))))))))))) ((Dletrec ((0 15) (1 31)) (("app" "f" Fun "arr" (Let (SOME " v0") (App Opapp ((Var (Short "length")) (Var (Short "arr")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "app_aux")) (Var (Short "f")))) (Var (Short "arr")))) (Var (Short " v0")))) (Lit 0))))))) (Dlocal ((Dletrec ((0 15) (4 36)) (("appi_aux" "f" Fun "arr" (Fun "max" (Fun "n" (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "n")))) (Var (Short "max")))) (If (Var (Short " v0")) (Con NONE nil) (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "sub")) (Var (Short "arr")))) (Var (Short "n")))) (Let NONE (App Opapp ((App Opapp ((Var (Short "f")) (Var (Short "n")))) (Var (Short " v1")))) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "n")))) (Lit 1))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "appi_aux")) (Var (Short "f")))) (Var (Short "arr")))) (Var (Short "max")))) (Var (Short " v2"))))))))))))))) ((Dletrec ((0 15) (1 32)) (("appi" "f" Fun "arr" (Let (SOME " v0") (App Opapp ((Var (Short "length")) (Var (Short "arr")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "appi_aux")) (Var (Short "f")))) (Var (Short "arr")))) (Var (Short " v0")))) (Lit 0))))))) (Dlocal ((Dletrec ((0 15) (3 68)) (("modify_aux" "f" Fun "arr" (Fun "max" (Fun "n" (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "n")))) (Var (Short "max")))) (If (Var (Short " v0")) (Con NONE nil) (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "sub")) (Var (Short "arr")))) (Var (Short "n")))) (Let (SOME " v2") (App Opapp ((Var (Short "f")) (Var (Short " v1")))) (Let NONE (App Opapp ((App Opapp ((App Opapp ((Var (Short "update")) (Var (Short "arr")))) (Var (Short "n")))) (Var (Short " v2")))) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "n")))) (Lit 1))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "modify_aux")) (Var (Short "f")))) (Var (Short "arr")))) (Var (Short "max")))) (Var (Short " v3")))))))))))))))) ((Dletrec ((0 15) (1 34)) (("modify" "f" Fun "arr" (Let (SOME " v0") (App Opapp ((Var (Short "length")) (Var (Short "arr")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "modify_aux")) (Var (Short "f")))) (Var (Short "arr")))) (Var (Short " v0")))) (Lit 0))))))) (Dlocal ((Dletrec ((0 15) (3 71)) (("modifyi_aux" "f" Fun "arr" (Fun "max" (Fun "n" (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "n")))) (Var (Short "max")))) (If (Var (Short " v0")) (Con NONE nil) (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "sub")) (Var (Short "arr")))) (Var (Short "n")))) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "f")) (Var (Short "n")))) (Var (Short " v1")))) (Let NONE (App Opapp ((App Opapp ((App Opapp ((Var (Short "update")) (Var (Short "arr")))) (Var (Short "n")))) (Var (Short " v2")))) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "n")))) (Lit 1))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "modifyi_aux")) (Var (Short "f")))) (Var (Short "arr")))) (Var (Short "max")))) (Var (Short " v3")))))))))))))))) ((Dletrec ((0 15) (1 35)) (("modifyi" "f" Fun "arr" (Let (SOME " v0") (App Opapp ((Var (Short "length")) (Var (Short "arr")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "modifyi_aux")) (Var (Short "f")))) (Var (Short "arr")))) (Var (Short " v0")))) (Lit 0))))))) (Dlocal ((Dletrec ((0 15) (3 60)) (("foldli_aux" "f" Fun "init" (Fun "arr" (Fun "max" (Fun "n" (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "n")))) (Var (Short "max")))) (If (Var (Short " v0")) (Var (Short "init")) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "n")))) (Lit 1))) (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "sub")) (Var (Short "arr")))) (Var (Short "n")))) (Let (SOME " v2") (App Opapp ((App Opapp ((App Opapp ((Var (Short "f")) (Var (Short "n")))) (Var (Short " v1")))) (Var (Short "init")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "foldli_aux")) (Var (Short "f")))) (Var (Short " v2")))) (Var (Short "arr")))) (Var (Short "max")))) (Var (Short " v3")))))))))))))))) ((Dletrec ((0 15) (1 39)) (("foldli" "f" Fun "init" (Fun "arr" (Let (SOME " v0") (App Opapp ((Var (Short "length")) (Var (Short "arr")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "foldli_aux")) (Var (Short "f")))) (Var (Short "init")))) (Var (Short "arr")))) (Var (Short " v0")))) (Lit 0)))))))) (Dlocal ((Dletrec ((0 15) (3 57)) (("foldl_aux" "f" Fun "init" (Fun "arr" (Fun "max" (Fun "n" (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "n")))) (Var (Short "max")))) (If (Var (Short " v0")) (Var (Short "init")) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "n")))) (Lit 1))) (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "sub")) (Var (Short "arr")))) (Var (Short "n")))) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "f")) (Var (Short " v1")))) (Var (Short "init")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "foldl_aux")) (Var (Short "f")))) (Var (Short " v2")))) (Var (Short "arr")))) (Var (Short "max")))) (Var (Short " v3")))))))))))))))) ((Dletrec ((0 15) (1 38)) (("foldl" "f" Fun "init" (Fun "arr" (Let (SOME " v0") (App Opapp ((Var (Short "length")) (Var (Short "arr")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "foldl_aux")) (Var (Short "f")))) (Var (Short "init")))) (Var (Short "arr")))) (Var (Short " v0")))) (Lit 0)))))))) (Dlocal ((Dletrec ((0 15) (3 67)) (("foldri_aux" "f" Fun "init" (Fun "arr" (Fun "n" (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "n")))) (Lit 0))) (If (Var (Short " v0")) (Var (Short "init")) (Let (SOME " v5") (App Opapp ((App Opapp ((Var (Short "-")) (Var (Short "n")))) (Lit 1))) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "-")) (Var (Short "n")))) (Lit 1))) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Short "sub")) (Var (Short "arr")))) (Var (Short " v2")))) (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "-")) (Var (Short "n")))) (Lit 1))) (Let (SOME " v4") (App Opapp ((App Opapp ((App Opapp ((Var (Short "f")) (Var (Short " v1")))) (Var (Short " v3")))) (Var (Short "init")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "foldri_aux")) (Var (Short "f")))) (Var (Short " v4")))) (Var (Short "arr")))) (Var (Short " v5"))))))))))))))))) ((Dletrec ((0 15) (1 37)) (("foldri" "f" Fun "init" (Fun "arr" (Let (SOME " v0") (App Opapp ((Var (Short "length")) (Var (Short "arr")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "foldri_aux")) (Var (Short "f")))) (Var (Short "init")))) (Var (Short "arr")))) (Var (Short " v0"))))))))) (Dlocal ((Dletrec ((0 15) (3 58)) (("foldr_aux" "f" Fun "init" (Fun "arr" (Fun "n" (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "n")))) (Lit 0))) (If (Var (Short " v0")) (Var (Short "init")) (Let (SOME " v4") (App Opapp ((App Opapp ((Var (Short "-")) (Var (Short "n")))) (Lit 1))) (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "-")) (Var (Short "n")))) (Lit 1))) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "sub")) (Var (Short "arr")))) (Var (Short " v1")))) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Short "f")) (Var (Short " v2")))) (Var (Short "init")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "foldr_aux")) (Var (Short "f")))) (Var (Short " v3")))) (Var (Short "arr")))) (Var (Short " v4")))))))))))))))) ((Dletrec ((0 15) (1 36)) (("foldr" "f" Fun "init" (Fun "arr" (Let (SOME " v0") (App Opapp ((Var (Short "length")) (Var (Short "arr")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "foldr_aux")) (Var (Short "f")))) (Var (Short "init")))) (Var (Short "arr")))) (Var (Short " v0"))))))))) (Dlocal ((Dletrec ((0 15) (5 37)) (("find_aux" "f" Fun "arr" (Fun "max" (Fun "n" (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "n")))) (Var (Short "max")))) (If (Var (Short " v0")) (Con (SOME (Short "None")) nil) (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "sub")) (Var (Short "arr")))) (Var (Short "n")))) (Let (SOME " v2") (App Opapp ((Var (Short "f")) (Var (Short " v1")))) (If (Var (Short " v2")) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Short "sub")) (Var (Short "arr")))) (Var (Short "n")))) (Con (SOME (Short "Some")) ((Var (Short " v3"))))) (Let (SOME " v4") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "n")))) (Lit 1))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "find_aux")) (Var (Short "f")))) (Var (Short "arr")))) (Var (Short "max")))) (Var (Short " v4")))))))))))))))) ((Dletrec ((0 15) (1 32)) (("find" "f" Fun "arr" (Let (SOME " v0") (App Opapp ((Var (Short "length")) (Var (Short "arr")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "find_aux")) (Var (Short "f")))) (Var (Short "arr")))) (Var (Short " v0")))) (Lit 0))))))) (Dlocal ((Dletrec (unk unk) (("findi_aux" "f" Fun "arr" (Fun "max" (Fun "n" (Let (SOME "a") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "n")))) (Var (Short "max")))) (If (Var (Short "a")) (Con (SOME (Short "None")) nil) (Let (SOME "b") (App Opapp ((App Opapp ((Var (Short "sub")) (Var (Short "arr")))) (Var (Short "n")))) (Let (SOME "c") (App Opapp ((App Opapp ((Var (Short "f")) (Var (Short "n")))) (Var (Short "b")))) (If (Var (Short "c")) (Let (SOME "d") (App Opapp ((App Opapp ((Var (Short "sub")) (Var (Short "arr")))) (Var (Short "n")))) (Con (SOME (Short "Some")) ((Con NONE ((Var (Short "n")) (Var (Short "d"))))))) (Let (SOME "e") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "n")))) (Lit 1))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "findi_aux")) (Var (Short "f")))) (Var (Short "arr")))) (Var (Short "max")))) (Var (Short "e")))))))))))))))) ((Dletrec ((0 15) (1 33)) (("findi" "f" Fun "arr" (Let (SOME " v0") (App Opapp ((Var (Short "length")) (Var (Short "arr")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "findi_aux")) (Var (Short "f")))) (Var (Short "arr")))) (Var (Short " v0")))) (Lit 0))))))) (Dlocal ((Dletrec ((0 15) (5 37)) (("exists_aux" "f" Fun "arr" (Fun "max" (Fun "n" (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "n")))) (Var (Short "max")))) (If (Var (Short " v0")) (Con (SOME (Short "False")) nil) (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "sub")) (Var (Short "arr")))) (Var (Short "n")))) (Let (SOME " v2") (App Opapp ((Var (Short "f")) (Var (Short " v1")))) (If (Var (Short " v2")) (Con (SOME (Short "True")) nil) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "n")))) (Lit 1))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "exists_aux")) (Var (Short "f")))) (Var (Short "arr")))) (Var (Short "max")))) (Var (Short " v3")))))))))))))))) ((Dletrec ((0 15) (1 34)) (("exists" "f" Fun "arr" (Let (SOME " v0") (App Opapp ((Var (Short "length")) (Var (Short "arr")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "exists_aux")) (Var (Short "f")))) (Var (Short "arr")))) (Var (Short " v0")))) (Lit 0))))))) (Dlocal ((Dletrec ((0 15) (5 14)) (("all_aux" "f" Fun "arr" (Fun "max" (Fun "n" (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "n")))) (Var (Short "max")))) (If (Var (Short " v0")) (Con (SOME (Short "True")) nil) (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "sub")) (Var (Short "arr")))) (Var (Short "n")))) (Let (SOME " v2") (App Opapp ((Var (Short "f")) (Var (Short " v1")))) (If (Var (Short " v2")) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "n")))) (Lit 1))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "all_aux")) (Var (Short "f")))) (Var (Short "arr")))) (Var (Short "max")))) (Var (Short " v3"))))) (Con (SOME (Short "False")) nil)))))))))))) ((Dletrec ((0 15) (1 31)) (("all" "f" Fun "arr" (Let (SOME " v0") (App Opapp ((Var (Short "length")) (Var (Short "arr")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "all_aux")) (Var (Short "f")))) (Var (Short "arr")))) (Var (Short " v0")))) (Lit 0))))))) (Dlocal ((Dletrec ((0 15) (5 34)) (("collate_aux" "f" Fun "a1" (Fun "a2" (Fun "max" (Fun "ord" (Fun "n" (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "n")))) (Var (Short "max")))) (If (Var (Short " v0")) (Var (Short "ord")) (Let (SOME " v4") (Con (SOME (Short "Equal")) nil) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "sub")) (Var (Short "a2")))) (Var (Short "n")))) (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "sub")) (Var (Short "a1")))) (Var (Short "n")))) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Short "f")) (Var (Short " v1")))) (Var (Short " v2")))) (Let (SOME " v5") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short " v3")))) (Var (Short " v4")))) (If (Var (Short " v5")) (Let (SOME " v6") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "n")))) (Lit 1))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "collate_aux")) (Var (Short "f")))) (Var (Short "a1")))) (Var (Short "a2")))) (Var (Short "max")))) (Var (Short "ord")))) (Var (Short " v6"))))) (Let (SOME " v8") (App Opapp ((App Opapp ((Var (Short "sub")) (Var (Short "a2")))) (Var (Short "n")))) (Let (SOME " v7") (App Opapp ((App Opapp ((Var (Short "sub")) (Var (Short "a1")))) (Var (Short "n")))) (App Opapp ((App Opapp ((Var (Short "f")) (Var (Short " v7")))) (Var (Short " v8")))))))))))))))))))))) ((Dletrec ((0 15) (5 47)) (("collate" "f" Fun "a1" (Fun "a2" (Let (SOME " v1") (App Opapp ((Var (Short "length")) (Var (Short "a2")))) (Let (SOME " v0") (App Opapp ((Var (Short "length")) (Var (Short "a1")))) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "<")) (Var (Short " v0")))) (Var (Short " v1")))) (If (Var (Short " v2")) (Let (SOME " v4") (Con (SOME (Short "Less")) nil) (Let (SOME " v3") (App Opapp ((Var (Short "length")) (Var (Short "a1")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "collate_aux")) (Var (Short "f")))) (Var (Short "a1")))) (Var (Short "a2")))) (Var (Short " v3")))) (Var (Short " v4")))) (Lit 0))))) (Let (SOME " v6") (App Opapp ((Var (Short "length")) (Var (Short "a1")))) (Let (SOME " v5") (App Opapp ((Var (Short "length")) (Var (Short "a2")))) (Let (SOME " v7") (App Opapp ((App Opapp ((Var (Short "<")) (Var (Short " v5")))) (Var (Short " v6")))) (If (Var (Short " v7")) (Let (SOME " v9") (Con (SOME (Short "Greater")) nil) (Let (SOME " v8") (App Opapp ((Var (Short "length")) (Var (Short "a2")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "collate_aux")) (Var (Short "f")))) (Var (Short "a1")))) (Var (Short "a2")))) (Var (Short " v8")))) (Var (Short " v9")))) (Lit 0))))) (Let (SOME " v11") (Con (SOME (Short "Equal")) nil) (Let (SOME " v10") (App Opapp ((Var (Short "length")) (Var (Short "a2")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "collate_aux")) (Var (Short "f")))) (Var (Short "a1")))) (Var (Short "a2")))) (Var (Short " v10")))) (Var (Short " v11")))) (Lit 0))))))))))))))))) (Dlet ((1 2) (2 32)) "lookup" (Fun "arr" (Fun "default" (Fun "n" (Handle (App Opapp ((App Opapp ((Var (Short "sub")) (Var (Short "arr")))) (Var (Short "n")))) (((Pany) Var (Short "default")))))))) (Dlet ((1 2) (9 6)) "updateResize" (Fun "arr" (Fun "default" (Fun "n" (Fun "v" (Handle (Let NONE (App Opapp ((App Opapp ((App Opapp ((Var (Short "update")) (Var (Short "arr")))) (Var (Short "n")))) (Var (Short "v")))) (Var (Short "arr"))) (((Pany) Let (SOME " v0") (App Opapp ((App Opapp ((Var (Short "*")) (Lit 2))) (Var (Short "n")))) (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short " v0")))) (Lit 1))) (Let (SOME "arr'") (App Opapp ((App Opapp ((Var (Short "array")) (Var (Short " v1")))) (Var (Short "default")))) (Let NONE (App Opapp ((App Opapp ((App Opapp ((Var (Short "copy")) (Var (Short "arr")))) (Var (Short "arr'")))) (Lit 0))) (Let NONE (App Opapp ((App Opapp ((App Opapp ((Var (Short "update")) (Var (Short "arr'")))) (Var (Short "n")))) (Var (Short "v")))) (Var (Short "arr'")))))))))))))))))))))))))))))))))))))))))))))) (Dtype (unk unk) ((("'k" "'w") "balanced_map" ("Bin" (Atapp nil (Short "int")) (Atvar "'k") (Atvar "'w") (Atapp ((Atvar "'k") (Atvar "'w")) (Short "balanced_map")) (Atapp ((Atvar "'k") (Atvar "'w")) (Short "balanced_map"))) ("Tip")))) (Dlocal ((Dtype (unk unk) ((("'a" "'b") "map" ("Map" (Atfun (Atvar "'a") (Atfun (Atvar "'a") (Atapp nil (Short "ordering")))) (Atapp ((Atvar "'a") (Atvar "'b")) (Short "balanced_map")))))) (Dlet (unk unk) "size" (Fun "v6" (Mat (Var (Short "v6")) (((Pcon (SOME (Short "Tip")) nil) Lit 0) ((Pcon (SOME (Short "Bin")) ("v5" "v4" "v3" "v2" "v1")) Var (Short "v5")))))) (Dlet (unk unk) "singleton" (Fun "v1" (Fun "v2" (Con (SOME (Short "Bin")) ((Lit 1) (Var (Short "v1")) (Var (Short "v2")) (Con (SOME (Short "Tip")) nil) (Con (SOME (Short "Tip")) nil)))))) (Dlet (unk unk) "ratio" (Lit 2)) (Dlet (unk unk) "delta" (Lit 3)) (Dlet (unk unk) "balancel" (Fun "v41" (Fun "v42" (Fun "v43" (Fun "v44" (Mat (Var (Short "v43")) (((Pcon (SOME (Short "Tip")) nil) Mat (Var (Short "v44")) (((Pcon (SOME (Short "Tip")) nil) Con (SOME (Short "Bin")) ((Lit 1) (Var (Short "v41")) (Var (Short "v42")) (Con (SOME (Short "Tip")) nil) (Con (SOME (Short "Tip")) nil))) ((Pcon (SOME (Short "Bin")) ("v5" "v4" "v3" "v2" "v1")) Con (SOME (Short "Bin")) ((App OpnPlus ((Lit 1) (Var (Short "v5")))) (Var (Short "v41")) (Var (Short "v42")) (Con (SOME (Short "Tip")) nil) (Con (SOME (Short "Bin")) ((Var (Short "v5")) (Var (Short "v4")) (Var (Short "v3")) (Var (Short "v2")) (Var (Short "v1")))))))) ((Pcon (SOME (Short "Bin")) ("v40" "v39" "v38" "v37" "v36")) Mat (Var (Short "v44")) (((Pcon (SOME (Short "Tip")) nil) Mat (Var (Short "v37")) (((Pcon (SOME (Short "Tip")) nil) Mat (Var (Short "v36")) (((Pcon (SOME (Short "Tip")) nil) Con (SOME (Short "Bin")) ((Lit 2) (Var (Short "v41")) (Var (Short "v42")) (Con (SOME (Short "Bin")) ((Var (Short "v40")) (Var (Short "v39")) (Var (Short "v38")) (Con (SOME (Short "Tip")) nil) (Con (SOME (Short "Tip")) nil))) (Con (SOME (Short "Tip")) nil))) ((Pcon (SOME (Short "Bin")) ("v10" "v9" "v8" "v7" "v6")) Con (SOME (Short "Bin")) ((Lit 3) (Var (Short "v9")) (Var (Short "v8")) (Con (SOME (Short "Bin")) ((Lit 1) (Var (Short "v39")) (Var (Short "v38")) (Con (SOME (Short "Tip")) nil) (Con (SOME (Short "Tip")) nil))) (Con (SOME (Short "Bin")) ((Lit 1) (Var (Short "v41")) (Var (Short "v42")) (Con (SOME (Short "Tip")) nil) (Con (SOME (Short "Tip")) nil))))))) ((Pcon (SOME (Short "Bin")) ("v20" "v19" "v18" "v17" "v16")) Mat (Var (Short "v36")) (((Pcon (SOME (Short "Tip")) nil) Con (SOME (Short "Bin")) ((Lit 3) (Var (Short "v39")) (Var (Short "v38")) (Con (SOME (Short "Bin")) ((Var (Short "v20")) (Var (Short "v19")) (Var (Short "v18")) (Var (Short "v17")) (Var (Short "v16")))) (Con (SOME (Short "Bin")) ((Lit 1) (Var (Short "v41")) (Var (Short "v42")) (Con (SOME (Short "Tip")) nil) (Con (SOME (Short "Tip")) nil))))) ((Pcon (SOME (Short "Bin")) ("v15" "v14" "v13" "v12" "v11")) If (App OpbLt ((Var (Short "v15")) (App OpnTimes ((Var (Short "ratio")) (Var (Short "v20")))))) (Con (SOME (Short "Bin")) ((App OpnPlus ((Lit 1) (Var (Short "v40")))) (Var (Short "v39")) (Var (Short "v38")) (Con (SOME (Short "Bin")) ((Var (Short "v20")) (Var (Short "v19")) (Var (Short "v18")) (Var (Short "v17")) (Var (Short "v16")))) (Con (SOME (Short "Bin")) ((App OpnPlus ((Lit 1) (Var (Short "v15")))) (Var (Short "v41")) (Var (Short "v42")) (Con (SOME (Short "Bin")) ((Var (Short "v15")) (Var (Short "v14")) (Var (Short "v13")) (Var (Short "v12")) (Var (Short "v11")))) (Con (SOME (Short "Tip")) nil))))) (Con (SOME (Short "Bin")) ((App OpnPlus ((Lit 1) (Var (Short "v40")))) (Var (Short "v14")) (Var (Short "v13")) (Con (SOME (Short "Bin")) ((App OpnPlus ((App OpnPlus ((Lit 1) (Var (Short "v20")))) (App Opapp ((Var (Short "size")) (Var (Short "v12")))))) (Var (Short "v39")) (Var (Short "v38")) (Con (SOME (Short "Bin")) ((Var (Short "v20")) (Var (Short "v19")) (Var (Short "v18")) (Var (Short "v17")) (Var (Short "v16")))) (Var (Short "v12")))) (Con (SOME (Short "Bin")) ((App OpnPlus ((Lit 1) (App Opapp ((Var (Short "size")) (Var (Short "v11")))))) (Var (Short "v41")) (Var (Short "v42")) (Var (Short "v11")) (Con (SOME (Short "Tip")) nil)))))))))) ((Pcon (SOME (Short "Bin")) ("v35" "v34" "v33" "v32" "v31")) If (App OpbGt ((Var (Short "v40")) (App OpnTimes ((Var (Short "delta")) (Var (Short "v35")))))) (Mat (Var (Short "v37")) (((Pcon (SOME (Short "Tip")) nil) Con (SOME (Short "Tip")) nil) ((Pcon (SOME (Short "Bin")) ("v30" "v29" "v28" "v27" "v26")) Mat (Var (Short "v36")) (((Pcon (SOME (Short "Tip")) nil) Con (SOME (Short "Tip")) nil) ((Pcon (SOME (Short "Bin")) ("v25" "v24" "v23" "v22" "v21")) If (App OpbLt ((Var (Short "v25")) (App OpnTimes ((Var (Short "ratio")) (Var (Short "v30")))))) (Con (SOME (Short "Bin")) ((App OpnPlus ((App OpnPlus ((Lit 1) (Var (Short "v40")))) (Var (Short "v35")))) (Var (Short "v39")) (Var (Short "v38")) (Var (Short "v37")) (Con (SOME (Short "Bin")) ((App OpnPlus ((App OpnPlus ((Lit 1) (Var (Short "v35")))) (Var (Short "v25")))) (Var (Short "v41")) (Var (Short "v42")) (Var (Short "v36")) (Con (SOME (Short "Bin")) ((Var (Short "v35")) (Var (Short "v34")) (Var (Short "v33")) (Var (Short "v32")) (Var (Short "v31")))))))) (Con (SOME (Short "Bin")) ((App OpnPlus ((App OpnPlus ((Lit 1) (Var (Short "v40")))) (Var (Short "v35")))) (Var (Short "v24")) (Var (Short "v23")) (Con (SOME (Short "Bin")) ((App OpnPlus ((App OpnPlus ((Lit 1) (Var (Short "v30")))) (App Opapp ((Var (Short "size")) (Var (Short "v22")))))) (Var (Short "v39")) (Var (Short "v38")) (Var (Short "v37")) (Var (Short "v22")))) (Con (SOME (Short "Bin")) ((App OpnPlus ((App OpnPlus ((Lit 1) (Var (Short "v35")))) (App Opapp ((Var (Short "size")) (Var (Short "v21")))))) (Var (Short "v41")) (Var (Short "v42")) (Var (Short "v21")) (Con (SOME (Short "Bin")) ((Var (Short "v35")) (Var (Short "v34")) (Var (Short "v33")) (Var (Short "v32")) (Var (Short "v31"))))))))))))) (Con (SOME (Short "Bin")) ((App OpnPlus ((App OpnPlus ((Lit 1) (Var (Short "v40")))) (Var (Short "v35")))) (Var (Short "v41")) (Var (Short "v42")) (Con (SOME (Short "Bin")) ((Var (Short "v40")) (Var (Short "v39")) (Var (Short "v38")) (Var (Short "v37")) (Var (Short "v36")))) (Con (SOME (Short "Bin")) ((Var (Short "v35")) (Var (Short "v34")) (Var (Short "v33")) (Var (Short "v32")) (Var (Short "v31")))))))))))))))) (Dlet (unk unk) "balancer" (Fun "v41" (Fun "v42" (Fun "v43" (Fun "v44" (Mat (Var (Short "v43")) (((Pcon (SOME (Short "Tip")) nil) Mat (Var (Short "v44")) (((Pcon (SOME (Short "Tip")) nil) Con (SOME (Short "Bin")) ((Lit 1) (Var (Short "v41")) (Var (Short "v42")) (Con (SOME (Short "Tip")) nil) (Con (SOME (Short "Tip")) nil))) ((Pcon (SOME (Short "Bin")) ("v20" "v19" "v18" "v17" "v16")) Mat (Var (Short "v17")) (((Pcon (SOME (Short "Tip")) nil) Mat (Var (Short "v16")) (((Pcon (SOME (Short "Tip")) nil) Con (SOME (Short "Bin")) ((Lit 2) (Var (Short "v41")) (Var (Short "v42")) (Con (SOME (Short "Tip")) nil) (Con (SOME (Short "Bin")) ((Var (Short "v20")) (Var (Short "v19")) (Var (Short "v18")) (Con (SOME (Short "Tip")) nil) (Con (SOME (Short "Tip")) nil))))) ((Pcon (SOME (Short "Bin")) ("v5" "v4" "v3" "v2" "v1")) Con (SOME (Short "Bin")) ((Lit 3) (Var (Short "v19")) (Var (Short "v18")) (Con (SOME (Short "Bin")) ((Lit 1) (Var (Short "v41")) (Var (Short "v42")) (Con (SOME (Short "Tip")) nil) (Con (SOME (Short "Tip")) nil))) (Con (SOME (Short "Bin")) ((Var (Short "v5")) (Var (Short "v4")) (Var (Short "v3")) (Var (Short "v2")) (Var (Short "v1")))))))) ((Pcon (SOME (Short "Bin")) ("v15" "v14" "v13" "v12" "v11")) Mat (Var (Short "v16")) (((Pcon (SOME (Short "Tip")) nil) Con (SOME (Short "Bin")) ((Lit 3) (Var (Short "v14")) (Var (Short "v13")) (Con (SOME (Short "Bin")) ((Lit 1) (Var (Short "v41")) (Var (Short "v42")) (Con (SOME (Short "Tip")) nil) (Con (SOME (Short "Tip")) nil))) (Con (SOME (Short "Bin")) ((Lit 1) (Var (Short "v19")) (Var (Short "v18")) (Con (SOME (Short "Tip")) nil) (Con (SOME (Short "Tip")) nil))))) ((Pcon (SOME (Short "Bin")) ("v10" "v9" "v8" "v7" "v6")) If (App OpbLt ((Var (Short "v15")) (App OpnTimes ((Var (Short "ratio")) (Var (Short "v10")))))) (Con (SOME (Short "Bin")) ((App OpnPlus ((Lit 1) (Var (Short "v20")))) (Var (Short "v19")) (Var (Short "v18")) (Con (SOME (Short "Bin")) ((App OpnPlus ((Lit 1) (Var (Short "v15")))) (Var (Short "v41")) (Var (Short "v42")) (Con (SOME (Short "Tip")) nil) (Con (SOME (Short "Bin")) ((Var (Short "v15")) (Var (Short "v14")) (Var (Short "v13")) (Var (Short "v12")) (Var (Short "v11")))))) (Con (SOME (Short "Bin")) ((Var (Short "v10")) (Var (Short "v9")) (Var (Short "v8")) (Var (Short "v7")) (Var (Short "v6")))))) (Con (SOME (Short "Bin")) ((App OpnPlus ((Lit 1) (Var (Short "v20")))) (Var (Short "v14")) (Var (Short "v13")) (Con (SOME (Short "Bin")) ((App OpnPlus ((Lit 1) (App Opapp ((Var (Short "size")) (Var (Short "v12")))))) (Var (Short "v41")) (Var (Short "v42")) (Con (SOME (Short "Tip")) nil) (Var (Short "v12")))) (Con (SOME (Short "Bin")) ((App OpnPlus ((App OpnPlus ((Lit 1) (Var (Short "v10")))) (App Opapp ((Var (Short "size")) (Var (Short "v11")))))) (Var (Short "v19")) (Var (Short "v18")) (Var (Short "v11")) (Con (SOME (Short "Bin")) ((Var (Short "v10")) (Var (Short "v9")) (Var (Short "v8")) (Var (Short "v7")) (Var (Short "v6"))))))))))))))) ((Pcon (SOME (Short "Bin")) ("v40" "v39" "v38" "v37" "v36")) Mat (Var (Short "v44")) (((Pcon (SOME (Short "Tip")) nil) Con (SOME (Short "Bin")) ((App OpnPlus ((Lit 1) (Var (Short "v40")))) (Var (Short "v41")) (Var (Short "v42")) (Con (SOME (Short "Bin")) ((Var (Short "v40")) (Var (Short "v39")) (Var (Short "v38")) (Var (Short "v37")) (Var (Short "v36")))) (Con (SOME (Short "Tip")) nil))) ((Pcon (SOME (Short "Bin")) ("v35" "v34" "v33" "v32" "v31")) If (App OpbGt ((Var (Short "v35")) (App OpnTimes ((Var (Short "delta")) (Var (Short "v40")))))) (Mat (Var (Short "v32")) (((Pcon (SOME (Short "Tip")) nil) Con (SOME (Short "Tip")) nil) ((Pcon (SOME (Short "Bin")) ("v30" "v29" "v28" "v27" "v26")) Mat (Var (Short "v31")) (((Pcon (SOME (Short "Tip")) nil) Con (SOME (Short "Tip")) nil) ((Pcon (SOME (Short "Bin")) ("v25" "v24" "v23" "v22" "v21")) If (App OpbLt ((Var (Short "v30")) (App OpnTimes ((Var (Short "ratio")) (Var (Short "v25")))))) (Con (SOME (Short "Bin")) ((App OpnPlus ((App OpnPlus ((Lit 1) (Var (Short "v40")))) (Var (Short "v35")))) (Var (Short "v34")) (Var (Short "v33")) (Con (SOME (Short "Bin")) ((App OpnPlus ((App OpnPlus ((Lit 1) (Var (Short "v40")))) (Var (Short "v30")))) (Var (Short "v41")) (Var (Short "v42")) (Con (SOME (Short "Bin")) ((Var (Short "v40")) (Var (Short "v39")) (Var (Short "v38")) (Var (Short "v37")) (Var (Short "v36")))) (Var (Short "v32")))) (Var (Short "v31")))) (Con (SOME (Short "Bin")) ((App OpnPlus ((App OpnPlus ((Lit 1) (Var (Short "v40")))) (Var (Short "v35")))) (Var (Short "v29")) (Var (Short "v28")) (Con (SOME (Short "Bin")) ((App OpnPlus ((App OpnPlus ((Lit 1) (Var (Short "v40")))) (App Opapp ((Var (Short "size")) (Var (Short "v27")))))) (Var (Short "v41")) (Var (Short "v42")) (Con (SOME (Short "Bin")) ((Var (Short "v40")) (Var (Short "v39")) (Var (Short "v38")) (Var (Short "v37")) (Var (Short "v36")))) (Var (Short "v27")))) (Con (SOME (Short "Bin")) ((App OpnPlus ((App OpnPlus ((Lit 1) (Var (Short "v25")))) (App Opapp ((Var (Short "size")) (Var (Short "v26")))))) (Var (Short "v34")) (Var (Short "v33")) (Var (Short "v26")) (Var (Short "v31"))))))))))) (Con (SOME (Short "Bin")) ((App OpnPlus ((App OpnPlus ((Lit 1) (Var (Short "v40")))) (Var (Short "v35")))) (Var (Short "v41")) (Var (Short "v42")) (Con (SOME (Short "Bin")) ((Var (Short "v40")) (Var (Short "v39")) (Var (Short "v38")) (Var (Short "v37")) (Var (Short "v36")))) (Con (SOME (Short "Bin")) ((Var (Short "v35")) (Var (Short "v34")) (Var (Short "v33")) (Var (Short "v32")) (Var (Short "v31")))))))))))))))) (Dletrec (unk unk) (("deletefindmax" "v14" Mat (Var (Short "v14")) (((Pcon (SOME (Short "Tip")) nil) Con NONE ((Raise (Con (SOME (Short "Bind")) nil)) (Con (SOME (Short "Tip")) nil))) ((Pcon (SOME (Short "Bin")) ("v13" "v12" "v11" "v10" "v9")) Mat (Var (Short "v9")) (((Pcon (SOME (Short "Tip")) nil) Con NONE ((Con NONE ((Var (Short "v12")) (Var (Short "v11")))) (Var (Short "v10")))) ((Pcon (SOME (Short "Bin")) ("v8" "v7" "v6" "v5" "v4")) Let (SOME "v3") (App Opapp ((Var (Short "deletefindmax")) (Con (SOME (Short "Bin")) ((Var (Short "v8")) (Var (Short "v7")) (Var (Short "v6")) (Var (Short "v5")) (Var (Short "v4")))))) (Mat (Var (Short "v3")) (((Pcon NONE ("v2" "v1")) Con NONE ((Var (Short "v2")) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "balancel")) (Var (Short "v12")))) (Var (Short "v11")))) (Var (Short "v10")))) (Var (Short "v1"))))))))))))))) (Dletrec (unk unk) (("deletefindmin" "v14" Mat (Var (Short "v14")) (((Pcon (SOME (Short "Tip")) nil) Con NONE ((Raise (Con (SOME (Short "Bind")) nil)) (Con (SOME (Short "Tip")) nil))) ((Pcon (SOME (Short "Bin")) ("v13" "v12" "v11" "v10" "v9")) Mat (Var (Short "v10")) (((Pcon (SOME (Short "Tip")) nil) Con NONE ((Con NONE ((Var (Short "v12")) (Var (Short "v11")))) (Var (Short "v9")))) ((Pcon (SOME (Short "Bin")) ("v8" "v7" "v6" "v5" "v4")) Let (SOME "v3") (App Opapp ((Var (Short "deletefindmin")) (Con (SOME (Short "Bin")) ((Var (Short "v8")) (Var (Short "v7")) (Var (Short "v6")) (Var (Short "v5")) (Var (Short "v4")))))) (Mat (Var (Short "v3")) (((Pcon NONE ("v2" "v1")) Con NONE ((Var (Short "v2")) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "balancer")) (Var (Short "v12")))) (Var (Short "v11")))) (Var (Short "v1")))) (Var (Short "v9"))))))))))))))) (Dlet (unk unk) "glue" (Fun "v23" (Fun "v24" (Mat (Var (Short "v23")) (((Pcon (SOME (Short "Tip")) nil) Var (Short "v24")) ((Pcon (SOME (Short "Bin")) ("v22" "v21" "v20" "v19" "v18")) Mat (Var (Short "v24")) (((Pcon (SOME (Short "Tip")) nil) Con (SOME (Short "Bin")) ((Var (Short "v22")) (Var (Short "v21")) (Var (Short "v20")) (Var (Short "v19")) (Var (Short "v18")))) ((Pcon (SOME (Short "Bin")) ("v17" "v16" "v15" "v14" "v13")) If (App OpbGt ((App Opapp ((Var (Short "size")) (Con (SOME (Short "Bin")) ((Var (Short "v22")) (Var (Short "v21")) (Var (Short "v20")) (Var (Short "v19")) (Var (Short "v18")))))) (App Opapp ((Var (Short "size")) (Con (SOME (Short "Bin")) ((Var (Short "v17")) (Var (Short "v16")) (Var (Short "v15")) (Var (Short "v14")) (Var (Short "v13")))))))) (Let (SOME "v6") (App Opapp ((Var (Short "deletefindmax")) (Con (SOME (Short "Bin")) ((Var (Short "v22")) (Var (Short "v21")) (Var (Short "v20")) (Var (Short "v19")) (Var (Short "v18")))))) (Mat (Var (Short "v6")) (((Pcon NONE ("v5" "v4")) App Opapp ((Mat (Var (Short "v5")) (((Pcon NONE ("v3" "v2")) Fun "v1" (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "balancer")) (Var (Short "v3")))) (Var (Short "v2")))) (Var (Short "v1")))) (Con (SOME (Short "Bin")) ((Var (Short "v17")) (Var (Short "v16")) (Var (Short "v15")) (Var (Short "v14")) (Var (Short "v13"))))))))) (Var (Short "v4"))))))) (Let (SOME "v12") (App Opapp ((Var (Short "deletefindmin")) (Con (SOME (Short "Bin")) ((Var (Short "v17")) (Var (Short "v16")) (Var (Short "v15")) (Var (Short "v14")) (Var (Short "v13")))))) (Mat (Var (Short "v12")) (((Pcon NONE ("v11" "v10")) App Opapp ((Mat (Var (Short "v11")) (((Pcon NONE ("v9" "v8")) Fun "v7" (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "balancel")) (Var (Short "v9")))) (Var (Short "v8")))) (Con (SOME (Short "Bin")) ((Var (Short "v22")) (Var (Short "v21")) (Var (Short "v20")) (Var (Short "v19")) (Var (Short "v18")))))) (Var (Short "v7"))))))) (Var (Short "v10"))))))))))))))) (Dletrec (unk unk) (("trim_help_greater" "v6" Fun "v7" (Fun "v8" (Mat (Var (Short "v8")) (((Pcon (SOME (Short "Tip")) nil) Con (SOME (Short "Tip")) nil) ((Pcon (SOME (Short "Bin")) ("v5" "v4" "v3" "v2" "v1")) If (Log Or (App Equality ((App Opapp ((App Opapp ((Var (Short "v6")) (Var (Short "v4")))) (Var (Short "v7")))) (Con (SOME (Short "Less")) nil))) (App Equality ((App Opapp ((App Opapp ((Var (Short "v6")) (Var (Short "v4")))) (Var (Short "v7")))) (Con (SOME (Short "Equal")) nil)))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "trim_help_greater")) (Var (Short "v6")))) (Var (Short "v7")))) (Var (Short "v1")))) (Con (SOME (Short "Bin")) ((Var (Short "v5")) (Var (Short "v4")) (Var (Short "v3")) (Var (Short "v2")) (Var (Short "v1"))))))))))) (Dletrec (unk unk) (("trim_help_lesser" "v6" Fun "v7" (Fun "v8" (Mat (Var (Short "v8")) (((Pcon (SOME (Short "Tip")) nil) Con (SOME (Short "Tip")) nil) ((Pcon (SOME (Short "Bin")) ("v5" "v4" "v3" "v2" "v1")) If (Log Or (App Equality ((App Opapp ((App Opapp ((Var (Short "v6")) (Var (Short "v4")))) (Var (Short "v7")))) (Con (SOME (Short "Greater")) nil))) (App Equality ((App Opapp ((App Opapp ((Var (Short "v6")) (Var (Short "v4")))) (Var (Short "v7")))) (Con (SOME (Short "Equal")) nil)))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "trim_help_lesser")) (Var (Short "v6")))) (Var (Short "v7")))) (Var (Short "v2")))) (Con (SOME (Short "Bin")) ((Var (Short "v5")) (Var (Short "v4")) (Var (Short "v3")) (Var (Short "v2")) (Var (Short "v1"))))))))))) (Dletrec (unk unk) (("trim_help_middle" "v10" Fun "v8" (Fun "v11" (Fun "v9" (Mat (Con NONE ((Var (Short "v8")) (Var (Short "v9")))) (((Pcon NONE ("v7" "v6")) Mat (Var (Short "v6")) (((Pcon (SOME (Short "Tip")) nil) Con (SOME (Short "Tip")) nil) ((Pcon (SOME (Short "Bin")) ("v5" "v4" "v3" "v2" "v1")) If (Log Or (App Equality ((App Opapp ((App Opapp ((Var (Short "v10")) (Var (Short "v4")))) (Var (Short "v7")))) (Con (SOME (Short "Less")) nil))) (App Equality ((App Opapp ((App Opapp ((Var (Short "v10")) (Var (Short "v4")))) (Var (Short "v7")))) (Con (SOME (Short "Equal")) nil)))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "trim_help_middle")) (Var (Short "v10")))) (Var (Short "v7")))) (Var (Short "v11")))) (Var (Short "v1")))) (If (Log Or (App Equality ((App Opapp ((App Opapp ((Var (Short "v10")) (Var (Short "v4")))) (Var (Short "v11")))) (Con (SOME (Short "Greater")) nil))) (App Equality ((App Opapp ((App Opapp ((Var (Short "v10")) (Var (Short "v4")))) (Var (Short "v11")))) (Con (SOME (Short "Equal")) nil)))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "trim_help_middle")) (Var (Short "v10")))) (Var (Short "v7")))) (Var (Short "v11")))) (Var (Short "v2")))) (Con (SOME (Short "Bin")) ((Var (Short "v5")) (Var (Short "v4")) (Var (Short "v3")) (Var (Short "v2")) (Var (Short "v1"))))))))))))))) (Dlet (unk unk) "trim" (Fun "v4" (Fun "v5" (Fun "v6" (Fun "v7" (Mat (Var (Short "v5")) (((Pcon (SOME (Short "None")) nil) Mat (Var (Short "v6")) (((Pcon (SOME (Short "None")) nil) Var (Short "v7")) ((Pcon (SOME (Short "Some")) ("v1")) App Opapp ((App Opapp ((App Opapp ((Var (Short "trim_help_lesser")) (Var (Short "v4")))) (Var (Short "v1")))) (Var (Short "v7")))))) ((Pcon (SOME (Short "Some")) ("v3")) Mat (Var (Short "v6")) (((Pcon (SOME (Short "None")) nil) App Opapp ((App Opapp ((App Opapp ((Var (Short "trim_help_greater")) (Var (Short "v4")))) (Var (Short "v3")))) (Var (Short "v7")))) ((Pcon (SOME (Short "Some")) ("v2")) App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "trim_help_middle")) (Var (Short "v4")))) (Var (Short "v3")))) (Var (Short "v2")))) (Var (Short "v7"))))))))))))) (Dletrec (unk unk) (("insertmin" "v6" Fun "v8" (Fun "v7" (Mat (Var (Short "v7")) (((Pcon (SOME (Short "Tip")) nil) App Opapp ((App Opapp ((Var (Short "singleton")) (Var (Short "v6")))) (Var (Short "v8")))) ((Pcon (SOME (Short "Bin")) ("v5" "v4" "v3" "v2" "v1")) App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "balancel")) (Var (Short "v4")))) (Var (Short "v3")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "insertmin")) (Var (Short "v6")))) (Var (Short "v8")))) (Var (Short "v2")))))) (Var (Short "v1")))))))))) (Dletrec (unk unk) (("insertmax" "v6" Fun "v8" (Fun "v7" (Mat (Var (Short "v7")) (((Pcon (SOME (Short "Tip")) nil) App Opapp ((App Opapp ((Var (Short "singleton")) (Var (Short "v6")))) (Var (Short "v8")))) ((Pcon (SOME (Short "Bin")) ("v5" "v4" "v3" "v2" "v1")) App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "balancer")) (Var (Short "v4")))) (Var (Short "v3")))) (Var (Short "v2")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "insertmax")) (Var (Short "v6")))) (Var (Short "v8")))) (Var (Short "v1")))))))))))) (Dlet (unk unk) "bin" (Fun "v1" (Fun "v4" (Fun "v2" (Fun "v3" (Con (SOME (Short "Bin")) ((App OpnPlus ((App OpnPlus ((App Opapp ((Var (Short "size")) (Var (Short "v2")))) (App Opapp ((Var (Short "size")) (Var (Short "v3")))))) (Lit 1))) (Var (Short "v1")) (Var (Short "v4")) (Var (Short "v2")) (Var (Short "v3"))))))))) (Dletrec (unk unk) (("link" "v11" Fun "v12" (Fun "v13" (Fun "v14" (Mat (Var (Short "v13")) (((Pcon (SOME (Short "Tip")) nil) App Opapp ((App Opapp ((App Opapp ((Var (Short "insertmin")) (Var (Short "v11")))) (Var (Short "v12")))) (Var (Short "v14")))) ((Pcon (SOME (Short "Bin")) ("v10" "v9" "v8" "v7" "v6")) Mat (Var (Short "v14")) (((Pcon (SOME (Short "Tip")) nil) App Opapp ((App Opapp ((App Opapp ((Var (Short "insertmax")) (Var (Short "v11")))) (Var (Short "v12")))) (Con (SOME (Short "Bin")) ((Var (Short "v10")) (Var (Short "v9")) (Var (Short "v8")) (Var (Short "v7")) (Var (Short "v6")))))) ((Pcon (SOME (Short "Bin")) ("v5" "v4" "v3" "v2" "v1")) If (App OpbLt ((App OpnTimes ((Var (Short "delta")) (Var (Short "v10")))) (Var (Short "v5")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "balancel")) (Var (Short "v4")))) (Var (Short "v3")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "link")) (Var (Short "v11")))) (Var (Short "v12")))) (Con (SOME (Short "Bin")) ((Var (Short "v10")) (Var (Short "v9")) (Var (Short "v8")) (Var (Short "v7")) (Var (Short "v6")))))) (Var (Short "v2")))))) (Var (Short "v1")))) (If (App OpbLt ((App OpnTimes ((Var (Short "delta")) (Var (Short "v5")))) (Var (Short "v10")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "balancer")) (Var (Short "v9")))) (Var (Short "v8")))) (Var (Short "v7")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "link")) (Var (Short "v11")))) (Var (Short "v12")))) (Var (Short "v6")))) (Con (SOME (Short "Bin")) ((Var (Short "v5")) (Var (Short "v4")) (Var (Short "v3")) (Var (Short "v2")) (Var (Short "v1")))))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "bin")) (Var (Short "v11")))) (Var (Short "v12")))) (Con (SOME (Short "Bin")) ((Var (Short "v10")) (Var (Short "v9")) (Var (Short "v8")) (Var (Short "v7")) (Var (Short "v6")))))) (Con (SOME (Short "Bin")) ((Var (Short "v5")) (Var (Short "v4")) (Var (Short "v3")) (Var (Short "v2")) (Var (Short "v1"))))))))))))))))) (Dletrec (unk unk) (("link2" "v11" Fun "v12" (Mat (Var (Short "v12")) (((Pcon (SOME (Short "Tip")) nil) Var (Short "v11")) ((Pcon (SOME (Short "Bin")) ("v10" "v9" "v8" "v7" "v6")) Mat (Var (Short "v11")) (((Pcon (SOME (Short "Tip")) nil) Con (SOME (Short "Bin")) ((Var (Short "v10")) (Var (Short "v9")) (Var (Short "v8")) (Var (Short "v7")) (Var (Short "v6")))) ((Pcon (SOME (Short "Bin")) ("v5" "v4" "v3" "v2" "v1")) If (App OpbLt ((App OpnTimes ((Var (Short "delta")) (Var (Short "v5")))) (Var (Short "v10")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "balancel")) (Var (Short "v9")))) (Var (Short "v8")))) (App Opapp ((App Opapp ((Var (Short "link2")) (Con (SOME (Short "Bin")) ((Var (Short "v5")) (Var (Short "v4")) (Var (Short "v3")) (Var (Short "v2")) (Var (Short "v1")))))) (Var (Short "v7")))))) (Var (Short "v6")))) (If (App OpbLt ((App OpnTimes ((Var (Short "delta")) (Var (Short "v10")))) (Var (Short "v5")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "balancer")) (Var (Short "v4")))) (Var (Short "v3")))) (Var (Short "v2")))) (App Opapp ((App Opapp ((Var (Short "link2")) (Var (Short "v1")))) (Con (SOME (Short "Bin")) ((Var (Short "v10")) (Var (Short "v9")) (Var (Short "v8")) (Var (Short "v7")) (Var (Short "v6")))))))) (App Opapp ((App Opapp ((Var (Short "glue")) (Con (SOME (Short "Bin")) ((Var (Short "v5")) (Var (Short "v4")) (Var (Short "v3")) (Var (Short "v2")) (Var (Short "v1")))))) (Con (SOME (Short "Bin")) ((Var (Short "v10")) (Var (Short "v9")) (Var (Short "v8")) (Var (Short "v7")) (Var (Short "v6"))))))))))))))) (Dletrec (unk unk) (("filterlt_help" "v7" Fun "v6" (Fun "v8" (Mat (Var (Short "v8")) (((Pcon (SOME (Short "Tip")) nil) Con (SOME (Short "Tip")) nil) ((Pcon (SOME (Short "Bin")) ("v5" "v4" "v3" "v2" "v1")) Mat (App Opapp ((App Opapp ((Var (Short "v7")) (Var (Short "v4")))) (Var (Short "v6")))) (((Pcon (SOME (Short "Less")) nil) App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "link")) (Var (Short "v4")))) (Var (Short "v3")))) (Var (Short "v2")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "filterlt_help")) (Var (Short "v7")))) (Var (Short "v6")))) (Var (Short "v1")))))) ((Pcon (SOME (Short "Equal")) nil) Var (Short "v2")) ((Pcon (SOME (Short "Greater")) nil) App Opapp ((App Opapp ((App Opapp ((Var (Short "filterlt_help")) (Var (Short "v7")))) (Var (Short "v6")))) (Var (Short "v2")))))))))))) (Dlet (unk unk) "filterlt" (Fun "v2" (Fun "v3" (Fun "v4" (Mat (Var (Short "v3")) (((Pcon (SOME (Short "None")) nil) Var (Short "v4")) ((Pcon (SOME (Short "Some")) ("v1")) App Opapp ((App Opapp ((App Opapp ((Var (Short "filterlt_help")) (Var (Short "v2")))) (Var (Short "v1")))) (Var (Short "v4")))))))))) (Dletrec (unk unk) (("filtergt_help" "v7" Fun "v6" (Fun "v8" (Mat (Var (Short "v8")) (((Pcon (SOME (Short "Tip")) nil) Con (SOME (Short "Tip")) nil) ((Pcon (SOME (Short "Bin")) ("v5" "v4" "v3" "v2" "v1")) Mat (App Opapp ((App Opapp ((Var (Short "v7")) (Var (Short "v6")))) (Var (Short "v4")))) (((Pcon (SOME (Short "Less")) nil) App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "link")) (Var (Short "v4")))) (Var (Short "v3")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "filtergt_help")) (Var (Short "v7")))) (Var (Short "v6")))) (Var (Short "v2")))))) (Var (Short "v1")))) ((Pcon (SOME (Short "Equal")) nil) Var (Short "v1")) ((Pcon (SOME (Short "Greater")) nil) App Opapp ((App Opapp ((App Opapp ((Var (Short "filtergt_help")) (Var (Short "v7")))) (Var (Short "v6")))) (Var (Short "v1")))))))))))) (Dlet (unk unk) "filtergt" (Fun "v2" (Fun "v3" (Fun "v4" (Mat (Var (Short "v3")) (((Pcon (SOME (Short "None")) nil) Var (Short "v4")) ((Pcon (SOME (Short "Some")) ("v1")) App Opapp ((App Opapp ((App Opapp ((Var (Short "filtergt_help")) (Var (Short "v2")))) (Var (Short "v1")))) (Var (Short "v4")))))))))) (Dletrec (unk unk) (("insertr" "v6" Fun "v7" (Fun "v9" (Fun "v8" (Mat (Var (Short "v8")) (((Pcon (SOME (Short "Tip")) nil) App Opapp ((App Opapp ((Var (Short "singleton")) (Var (Short "v7")))) (Var (Short "v9")))) ((Pcon (SOME (Short "Bin")) ("v5" "v4" "v3" "v2" "v1")) Mat (App Opapp ((App Opapp ((Var (Short "v6")) (Var (Short "v7")))) (Var (Short "v4")))) (((Pcon (SOME (Short "Less")) nil) App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "balancel")) (Var (Short "v4")))) (Var (Short "v3")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "insertr")) (Var (Short "v6")))) (Var (Short "v7")))) (Var (Short "v9")))) (Var (Short "v2")))))) (Var (Short "v1")))) ((Pcon (SOME (Short "Equal")) nil) Con (SOME (Short "Bin")) ((Var (Short "v5")) (Var (Short "v4")) (Var (Short "v3")) (Var (Short "v2")) (Var (Short "v1")))) ((Pcon (SOME (Short "Greater")) nil) App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "balancer")) (Var (Short "v4")))) (Var (Short "v3")))) (Var (Short "v2")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "insertr")) (Var (Short "v6")))) (Var (Short "v7")))) (Var (Short "v9")))) (Var (Short "v1"))))))))))))))) (Dletrec (unk unk) (("hedgeunion" "v21" Fun "v22" (Fun "v23" (Fun "v24" (Fun "v25" (Mat (Var (Short "v25")) (((Pcon (SOME (Short "Tip")) nil) Var (Short "v24")) ((Pcon (SOME (Short "Bin")) ("v20" "v19" "v18" "v17" "v16")) Mat (Var (Short "v24")) (((Pcon (SOME (Short "Tip")) nil) App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "link")) (Var (Short "v19")))) (Var (Short "v18")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "filtergt")) (Var (Short "v21")))) (Var (Short "v22")))) (Var (Short "v17")))))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "filterlt")) (Var (Short "v21")))) (Var (Short "v23")))) (Var (Short "v16")))))) ((Pcon (SOME (Short "Bin")) ("v15" "v14" "v13" "v12" "v11")) Mat (Var (Short "v17")) (((Pcon (SOME (Short "Tip")) nil) Mat (Var (Short "v16")) (((Pcon (SOME (Short "Tip")) nil) App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "insertr")) (Var (Short "v21")))) (Var (Short "v19")))) (Var (Short "v18")))) (Con (SOME (Short "Bin")) ((Var (Short "v15")) (Var (Short "v14")) (Var (Short "v13")) (Var (Short "v12")) (Var (Short "v11")))))) ((Pcon (SOME (Short "Bin")) ("v5" "v4" "v3" "v2" "v1")) App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "link")) (Var (Short "v14")))) (Var (Short "v13")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "hedgeunion")) (Var (Short "v21")))) (Var (Short "v22")))) (Con (SOME (Short "Some")) ((Var (Short "v14")))))) (Var (Short "v12")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "trim")) (Var (Short "v21")))) (Var (Short "v22")))) (Con (SOME (Short "Some")) ((Var (Short "v14")))))) (Con (SOME (Short "Bin")) ((Var (Short "v20")) (Var (Short "v19")) (Var (Short "v18")) (Con (SOME (Short "Tip")) nil) (Con (SOME (Short "Bin")) ((Var (Short "v5")) (Var (Short "v4")) (Var (Short "v3")) (Var (Short "v2")) (Var (Short "v1")))))))))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "hedgeunion")) (Var (Short "v21")))) (Con (SOME (Short "Some")) ((Var (Short "v14")))))) (Var (Short "v23")))) (Var (Short "v11")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "trim")) (Var (Short "v21")))) (Con (SOME (Short "Some")) ((Var (Short "v14")))))) (Var (Short "v23")))) (Con (SOME (Short "Bin")) ((Var (Short "v20")) (Var (Short "v19")) (Var (Short "v18")) (Con (SOME (Short "Tip")) nil) (Con (SOME (Short "Bin")) ((Var (Short "v5")) (Var (Short "v4")) (Var (Short "v3")) (Var (Short "v2")) (Var (Short "v1")))))))))))))) ((Pcon (SOME (Short "Bin")) ("v10" "v9" "v8" "v7" "v6")) App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "link")) (Var (Short "v14")))) (Var (Short "v13")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "hedgeunion")) (Var (Short "v21")))) (Var (Short "v22")))) (Con (SOME (Short "Some")) ((Var (Short "v14")))))) (Var (Short "v12")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "trim")) (Var (Short "v21")))) (Var (Short "v22")))) (Con (SOME (Short "Some")) ((Var (Short "v14")))))) (Con (SOME (Short "Bin")) ((Var (Short "v20")) (Var (Short "v19")) (Var (Short "v18")) (Con (SOME (Short "Bin")) ((Var (Short "v10")) (Var (Short "v9")) (Var (Short "v8")) (Var (Short "v7")) (Var (Short "v6")))) (Var (Short "v16")))))))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "hedgeunion")) (Var (Short "v21")))) (Con (SOME (Short "Some")) ((Var (Short "v14")))))) (Var (Short "v23")))) (Var (Short "v11")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "trim")) (Var (Short "v21")))) (Con (SOME (Short "Some")) ((Var (Short "v14")))))) (Var (Short "v23")))) (Con (SOME (Short "Bin")) ((Var (Short "v20")) (Var (Short "v19")) (Var (Short "v18")) (Con (SOME (Short "Bin")) ((Var (Short "v10")) (Var (Short "v9")) (Var (Short "v8")) (Var (Short "v7")) (Var (Short "v6")))) (Var (Short "v16")))))))))))))))))))))) (Dletrec (unk unk) (("lookup" "v6" Fun "v7" (Fun "v8" (Mat (Var (Short "v8")) (((Pcon (SOME (Short "Tip")) nil) Con (SOME (Short "None")) nil) ((Pcon (SOME (Short "Bin")) ("v5" "v4" "v3" "v2" "v1")) Mat (App Opapp ((App Opapp ((Var (Short "v6")) (Var (Short "v7")))) (Var (Short "v4")))) (((Pcon (SOME (Short "Less")) nil) App Opapp ((App Opapp ((App Opapp ((Var (Short "lookup")) (Var (Short "v6")))) (Var (Short "v7")))) (Var (Short "v2")))) ((Pcon (SOME (Short "Equal")) nil) Con (SOME (Short "Some")) ((Var (Short "v3")))) ((Pcon (SOME (Short "Greater")) nil) App Opapp ((App Opapp ((App Opapp ((Var (Short "lookup")) (Var (Short "v6")))) (Var (Short "v7")))) (Var (Short "v1")))))))))))) (Dletrec (unk unk) (("hedgeunionwithkey" "v21" Fun "v22" (Fun "v23" (Fun "v24" (Fun "v25" (Fun "v26" (Mat (Con NONE ((Var (Short "v22")) (Con NONE ((Var (Short "v23")) (Con NONE ((Var (Short "v24")) (Con NONE ((Var (Short "v25")) (Var (Short "v26")))))))))) (((Pcon NONE ("v20" "v19")) Mat (Var (Short "v19")) (((Pcon NONE ("v18" "v17")) Mat (Var (Short "v17")) (((Pcon NONE ("v16" "v15")) Mat (Var (Short "v15")) (((Pcon NONE ("v14" "v13")) Mat (Var (Short "v13")) (((Pcon (SOME (Short "Tip")) nil) Var (Short "v14")) ((Pcon (SOME (Short "Bin")) ("v12" "v11" "v10" "v9" "v8")) Mat (Var (Short "v14")) (((Pcon (SOME (Short "Tip")) nil) App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "link")) (Var (Short "v11")))) (Var (Short "v10")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "filtergt")) (Var (Short "v21")))) (Var (Short "v18")))) (Var (Short "v9")))))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "filterlt")) (Var (Short "v21")))) (Var (Short "v16")))) (Var (Short "v8")))))) ((Pcon (SOME (Short "Bin")) ("v7" "v6" "v5" "v4" "v3")) Let (SOME "v1") (Mat (App Opapp ((App Opapp ((App Opapp ((Var (Short "lookup")) (Var (Short "v21")))) (Var (Short "v6")))) (Con (SOME (Short "Bin")) ((Var (Short "v12")) (Var (Short "v11")) (Var (Short "v10")) (Var (Short "v9")) (Var (Short "v8")))))) (((Pcon (SOME (Short "None")) nil) Var (Short "v5")) ((Pcon (SOME (Short "Some")) ("v2")) App Opapp ((App Opapp ((App Opapp ((Var (Short "v20")) (Var (Short "v6")))) (Var (Short "v5")))) (Var (Short "v2")))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "link")) (Var (Short "v6")))) (Var (Short "v1")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "hedgeunionwithkey")) (Var (Short "v21")))) (Var (Short "v20")))) (Var (Short "v18")))) (Con (SOME (Short "Some")) ((Var (Short "v6")))))) (Var (Short "v4")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "trim")) (Var (Short "v21")))) (Var (Short "v18")))) (Con (SOME (Short "Some")) ((Var (Short "v6")))))) (Con (SOME (Short "Bin")) ((Var (Short "v12")) (Var (Short "v11")) (Var (Short "v10")) (Var (Short "v9")) (Var (Short "v8")))))))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "hedgeunionwithkey")) (Var (Short "v21")))) (Var (Short "v20")))) (Con (SOME (Short "Some")) ((Var (Short "v6")))))) (Var (Short "v16")))) (Var (Short "v3")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "trim")) (Var (Short "v21")))) (Con (SOME (Short "Some")) ((Var (Short "v6")))))) (Var (Short "v16")))) (Con (SOME (Short "Bin")) ((Var (Short "v12")) (Var (Short "v11")) (Var (Short "v10")) (Var (Short "v9")) (Var (Short "v8")))))))))))))))))))))))))))))) (Dletrec (unk unk) (("splitlookup" "v18" Fun "v19" (Fun "v20" (Mat (Var (Short "v20")) (((Pcon (SOME (Short "Tip")) nil) Con NONE ((Con (SOME (Short "Tip")) nil) (Con NONE ((Con (SOME (Short "None")) nil) (Con (SOME (Short "Tip")) nil))))) ((Pcon (SOME (Short "Bin")) ("v17" "v16" "v15" "v14" "v13")) Mat (App Opapp ((App Opapp ((Var (Short "v18")) (Var (Short "v19")))) (Var (Short "v16")))) (((Pcon (SOME (Short "Less")) nil) Let (SOME "v6") (App Opapp ((App Opapp ((App Opapp ((Var (Short "splitlookup")) (Var (Short "v18")))) (Var (Short "v19")))) (Var (Short "v14")))) (Mat (Var (Short "v6")) (((Pcon NONE ("v5" "v4")) Mat (Var (Short "v4")) (((Pcon NONE ("v3" "v2")) Let (SOME "v1") (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "link")) (Var (Short "v16")))) (Var (Short "v15")))) (Var (Short "v2")))) (Var (Short "v13")))) (Con NONE ((Var (Short "v5")) (Con NONE ((Var (Short "v3")) (Var (Short "v1")))))))))))) ((Pcon (SOME (Short "Equal")) nil) Con NONE ((Var (Short "v14")) (Con NONE ((Con (SOME (Short "Some")) ((Var (Short "v15")))) (Var (Short "v13")))))) ((Pcon (SOME (Short "Greater")) nil) Let (SOME "v12") (App Opapp ((App Opapp ((App Opapp ((Var (Short "splitlookup")) (Var (Short "v18")))) (Var (Short "v19")))) (Var (Short "v13")))) (Mat (Var (Short "v12")) (((Pcon NONE ("v11" "v10")) Mat (Var (Short "v10")) (((Pcon NONE ("v9" "v8")) Let (SOME "v7") (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "link")) (Var (Short "v16")))) (Var (Short "v15")))) (Var (Short "v14")))) (Var (Short "v11")))) (Con NONE ((Var (Short "v7")) (Con NONE ((Var (Short "v9")) (Var (Short "v8")))))))))))))))))))) (Dletrec (unk unk) (("submap'" "v18" Fun "v19" (Fun "v20" (Fun "v21" (Mat (Con NONE ((Var (Short "v20")) (Var (Short "v21")))) (((Pcon NONE ("v17" "v16")) Mat (Var (Short "v17")) (((Pcon (SOME (Short "Tip")) nil) App OpbLeq ((Lit 0) (Lit 0))) ((Pcon (SOME (Short "Bin")) ("v15" "v14" "v13" "v12" "v11")) Mat (Var (Short "v16")) (((Pcon (SOME (Short "Tip")) nil) App OpbLt ((Lit 0) (Lit 0))) ((Pcon (SOME (Short "Bin")) ("v10" "v9" "v8" "v7" "v6")) Mat (App Opapp ((App Opapp ((App Opapp ((Var (Short "splitlookup")) (Var (Short "v18")))) (Var (Short "v14")))) (Con (SOME (Short "Bin")) ((Var (Short "v10")) (Var (Short "v9")) (Var (Short "v8")) (Var (Short "v7")) (Var (Short "v6")))))) (((Pcon NONE ("v5" "v4")) Mat (Var (Short "v4")) (((Pcon NONE ("v3" "v2")) Mat (Var (Short "v3")) (((Pcon (SOME (Short "None")) nil) App OpbLt ((Lit 0) (Lit 0))) ((Pcon (SOME (Short "Some")) ("v1")) Log And (Log And (App Opapp ((App Opapp ((Var (Short "v19")) (Var (Short "v13")))) (Var (Short "v1")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "submap'")) (Var (Short "v18")))) (Var (Short "v19")))) (Var (Short "v12")))) (Var (Short "v5"))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "submap'")) (Var (Short "v18")))) (Var (Short "v19")))) (Var (Short "v11")))) (Var (Short "v2")))))))))))))))))))))) (Dlet (unk unk) "null" (Fun "v6" (Mat (Var (Short "v6")) (((Pcon (SOME (Short "Tip")) nil) App OpbLeq ((Lit 0) (Lit 0))) ((Pcon (SOME (Short "Bin")) ("v5" "v4" "v3" "v2" "v1")) App OpbLt ((Lit 0) (Lit 0))))))) (Dletrec (unk unk) (("member" "v6" Fun "v7" (Fun "v8" (Mat (Var (Short "v8")) (((Pcon (SOME (Short "Tip")) nil) App OpbLt ((Lit 0) (Lit 0))) ((Pcon (SOME (Short "Bin")) ("v5" "v4" "v3" "v2" "v1")) Mat (App Opapp ((App Opapp ((Var (Short "v6")) (Var (Short "v7")))) (Var (Short "v4")))) (((Pcon (SOME (Short "Less")) nil) App Opapp ((App Opapp ((App Opapp ((Var (Short "member")) (Var (Short "v6")))) (Var (Short "v7")))) (Var (Short "v2")))) ((Pcon (SOME (Short "Equal")) nil) App OpbLeq ((Lit 0) (Lit 0))) ((Pcon (SOME (Short "Greater")) nil) App Opapp ((App Opapp ((App Opapp ((Var (Short "member")) (Var (Short "v6")))) (Var (Short "v7")))) (Var (Short "v1")))))))))))) (Dlet (unk unk) "empty" (Con (SOME (Short "Tip")) nil)) (Dletrec (unk unk) (("insert" "v6" Fun "v7" (Fun "v9" (Fun "v8" (Mat (Var (Short "v8")) (((Pcon (SOME (Short "Tip")) nil) App Opapp ((App Opapp ((Var (Short "singleton")) (Var (Short "v7")))) (Var (Short "v9")))) ((Pcon (SOME (Short "Bin")) ("v5" "v4" "v3" "v2" "v1")) Mat (App Opapp ((App Opapp ((Var (Short "v6")) (Var (Short "v7")))) (Var (Short "v4")))) (((Pcon (SOME (Short "Less")) nil) App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "balancel")) (Var (Short "v4")))) (Var (Short "v3")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "insert")) (Var (Short "v6")))) (Var (Short "v7")))) (Var (Short "v9")))) (Var (Short "v2")))))) (Var (Short "v1")))) ((Pcon (SOME (Short "Equal")) nil) Con (SOME (Short "Bin")) ((Var (Short "v5")) (Var (Short "v7")) (Var (Short "v9")) (Var (Short "v2")) (Var (Short "v1")))) ((Pcon (SOME (Short "Greater")) nil) App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "balancer")) (Var (Short "v4")))) (Var (Short "v3")))) (Var (Short "v2")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "insert")) (Var (Short "v6")))) (Var (Short "v7")))) (Var (Short "v9")))) (Var (Short "v1"))))))))))))))) (Dletrec (unk unk) (("delete" "v6" Fun "v7" (Fun "v8" (Mat (Var (Short "v8")) (((Pcon (SOME (Short "Tip")) nil) Con (SOME (Short "Tip")) nil) ((Pcon (SOME (Short "Bin")) ("v5" "v4" "v3" "v2" "v1")) Mat (App Opapp ((App Opapp ((Var (Short "v6")) (Var (Short "v7")))) (Var (Short "v4")))) (((Pcon (SOME (Short "Less")) nil) App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "balancer")) (Var (Short "v4")))) (Var (Short "v3")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "delete")) (Var (Short "v6")))) (Var (Short "v7")))) (Var (Short "v2")))))) (Var (Short "v1")))) ((Pcon (SOME (Short "Equal")) nil) App Opapp ((App Opapp ((Var (Short "glue")) (Var (Short "v2")))) (Var (Short "v1")))) ((Pcon (SOME (Short "Greater")) nil) App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "balancel")) (Var (Short "v4")))) (Var (Short "v3")))) (Var (Short "v2")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "delete")) (Var (Short "v6")))) (Var (Short "v7")))) (Var (Short "v1")))))))))))))) (Dlet (unk unk) "union" (Fun "v11" (Fun "v12" (Fun "v13" (Mat (Var (Short "v12")) (((Pcon (SOME (Short "Tip")) nil) Var (Short "v13")) ((Pcon (SOME (Short "Bin")) ("v10" "v9" "v8" "v7" "v6")) Mat (Var (Short "v13")) (((Pcon (SOME (Short "Tip")) nil) Con (SOME (Short "Bin")) ((Var (Short "v10")) (Var (Short "v9")) (Var (Short "v8")) (Var (Short "v7")) (Var (Short "v6")))) ((Pcon (SOME (Short "Bin")) ("v5" "v4" "v3" "v2" "v1")) App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "hedgeunion")) (Var (Short "v11")))) (Con (SOME (Short "None")) nil))) (Con (SOME (Short "None")) nil))) (Con (SOME (Short "Bin")) ((Var (Short "v10")) (Var (Short "v9")) (Var (Short "v8")) (Var (Short "v7")) (Var (Short "v6")))))) (Con (SOME (Short "Bin")) ((Var (Short "v5")) (Var (Short "v4")) (Var (Short "v3")) (Var (Short "v2")) (Var (Short "v1")))))))))))))) (Dlet (unk unk) "unionWithKey" (Fun "v15" (Fun "v16" (Fun "v17" (Fun "v18" (Mat (Con NONE ((Var (Short "v16")) (Con NONE ((Var (Short "v17")) (Var (Short "v18")))))) (((Pcon NONE ("v14" "v13")) Mat (Var (Short "v13")) (((Pcon NONE ("v12" "v11")) Mat (Var (Short "v12")) (((Pcon (SOME (Short "Tip")) nil) Var (Short "v11")) ((Pcon (SOME (Short "Bin")) ("v10" "v9" "v8" "v7" "v6")) Mat (Var (Short "v11")) (((Pcon (SOME (Short "Tip")) nil) Con (SOME (Short "Bin")) ((Var (Short "v10")) (Var (Short "v9")) (Var (Short "v8")) (Var (Short "v7")) (Var (Short "v6")))) ((Pcon (SOME (Short "Bin")) ("v5" "v4" "v3" "v2" "v1")) App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "hedgeunionwithkey")) (Var (Short "v15")))) (Var (Short "v14")))) (Con (SOME (Short "None")) nil))) (Con (SOME (Short "None")) nil))) (Con (SOME (Short "Bin")) ((Var (Short "v10")) (Var (Short "v9")) (Var (Short "v8")) (Var (Short "v7")) (Var (Short "v6")))))) (Con (SOME (Short "Bin")) ((Var (Short "v5")) (Var (Short "v4")) (Var (Short "v3")) (Var (Short "v2")) (Var (Short "v1"))))))))))))))))))) (Dlet (unk unk) "unionWith" (Fun "v4" (Fun "v5" (Fun "v6" (Fun "v7" (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "unionWithKey")) (Var (Short "v4")))) (Fun "v3" (Fun "v2" (Fun "v1" (App Opapp ((App Opapp ((Var (Short "v5")) (Var (Short "v2")))) (Var (Short "v1"))))))))) (Var (Short "v6")))) (Var (Short "v7"))))))))) (Dletrec (unk unk) (("foldrWithKey" "v6" Fun "v8" (Fun "v7" (Mat (Var (Short "v7")) (((Pcon (SOME (Short "Tip")) nil) Var (Short "v8")) ((Pcon (SOME (Short "Bin")) ("v5" "v4" "v3" "v2" "v1")) App Opapp ((App Opapp ((App Opapp ((Var (Short "foldrWithKey")) (Var (Short "v6")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "v6")) (Var (Short "v4")))) (Var (Short "v3")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "foldrWithKey")) (Var (Short "v6")))) (Var (Short "v8")))) (Var (Short "v1")))))))) (Var (Short "v2")))))))))) (Dlet (unk unk) "toAscList" (Fun "v4" (App Opapp ((App Opapp ((App Opapp ((Var (Short "foldrWithKey")) (Fun "v3" (Fun "v2" (Fun "v1" (Con (SOME (Short "::")) ((Con NONE ((Var (Short "v3")) (Var (Short "v2")))) (Var (Short "v1"))))))))) (Con (SOME (Short "[]")) nil))) (Var (Short "v4")))))) (Dlet (unk unk) "compare" (Fun "v1" (Fun "v2" (Fun "v3" (Fun "v4" (App Opapp ((App Opapp ((App Opapp ((Var (Long "List" (Short "compare"))) (App Opapp ((App Opapp ((Var (Long "Pair" (Short "compare"))) (Var (Short "v1")))) (Var (Short "v2")))))) (App Opapp ((Var (Short "toAscList")) (Var (Short "v3")))))) (App Opapp ((Var (Short "toAscList")) (Var (Short "v4"))))))))))) (Dletrec (unk unk) (("mapWithKey" "v6" Fun "v7" (Mat (Var (Short "v7")) (((Pcon (SOME (Short "Tip")) nil) Con (SOME (Short "Tip")) nil) ((Pcon (SOME (Short "Bin")) ("v5" "v4" "v3" "v2" "v1")) Con (SOME (Short "Bin")) ((Var (Short "v5")) (Var (Short "v4")) (App Opapp ((App Opapp ((Var (Short "v6")) (Var (Short "v4")))) (Var (Short "v3")))) (App Opapp ((App Opapp ((Var (Short "mapWithKey")) (Var (Short "v6")))) (Var (Short "v2")))) (App Opapp ((App Opapp ((Var (Short "mapWithKey")) (Var (Short "v6")))) (Var (Short "v1"))))))))))) (Dlet (unk unk) "map" (Fun "v3" (Fun "v4" (App Opapp ((App Opapp ((Var (Short "mapWithKey")) (Fun "v2" (Fun "v1" (App Opapp ((Var (Short "v3")) (Var (Short "v1")))))))) (Var (Short "v4"))))))) (Dlet (unk unk) "isSubmapOfBy" (Fun "v1" (Fun "v2" (Fun "v3" (Fun "v4" (Log And (App OpbLeq ((App Opapp ((Var (Short "size")) (Var (Short "v3")))) (App Opapp ((Var (Short "size")) (Var (Short "v4")))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "submap'")) (Var (Short "v1")))) (Var (Short "v2")))) (Var (Short "v3")))) (Var (Short "v4")))))))))) (Dlet (unk unk) "isSubmapOf" (Fun "v3" (Fun "v4" (Fun "v5" (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "isSubmapOfBy")) (Var (Short "v3")))) (Fun "v2" (Fun "v1" (App Equality ((Var (Short "v2")) (Var (Short "v1")))))))) (Var (Short "v4")))) (Var (Short "v5")))))))) (Dlet (unk unk) "fromList" (Fun "v5" (Fun "v6" (App Opapp ((App Opapp ((App Opapp ((Var (Long "List" (Short "foldr"))) (Fun "v4" (Mat (Var (Short "v4")) (((Pcon NONE ("v3" "v2")) Fun "v1" (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "insert")) (Var (Short "v5")))) (Var (Short "v3")))) (Var (Short "v2")))) (Var (Short "v1")))))))))) (Var (Short "empty")))) (Var (Short "v6"))))))) (Dletrec (unk unk) (("filterWithKey" "v8" Fun "v9" (Mat (Var (Short "v9")) (((Pcon (SOME (Short "Tip")) nil) Con (SOME (Short "Tip")) nil) ((Pcon (SOME (Short "Bin")) ("v7" "v6" "v5" "v4" "v3")) Let (SOME "v2") (App Opapp ((App Opapp ((Var (Short "filterWithKey")) (Var (Short "v8")))) (Var (Short "v4")))) (Let (SOME "v1") (App Opapp ((App Opapp ((Var (Short "filterWithKey")) (Var (Short "v8")))) (Var (Short "v3")))) (If (App Opapp ((App Opapp ((Var (Short "v8")) (Var (Short "v6")))) (Var (Short "v5")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "link")) (Var (Short "v6")))) (Var (Short "v5")))) (Var (Short "v2")))) (Var (Short "v1")))) (App Opapp ((App Opapp ((Var (Short "link2")) (Var (Short "v2")))) (Var (Short "v1")))))))))))) (Dlet (unk unk) "filter" (Fun "v3" (Fun "v4" (App Opapp ((App Opapp ((Var (Short "filterWithKey")) (Fun "v2" (Fun "v1" (App Opapp ((Var (Short "v3")) (Var (Short "v1")))))))) (Var (Short "v4"))))))) (Dletrec (unk unk) (("all" "v6" Fun "v7" (Mat (Var (Short "v7")) (((Pcon (SOME (Short "Tip")) nil) App OpbLeq ((Lit 0) (Lit 0))) ((Pcon (SOME (Short "Bin")) ("v5" "v4" "v3" "v2" "v1")) If (App Opapp ((App Opapp ((Var (Short "v6")) (Var (Short "v4")))) (Var (Short "v3")))) (If (App Opapp ((App Opapp ((Var (Short "all")) (Var (Short "v6")))) (Var (Short "v2")))) (If (App Opapp ((App Opapp ((Var (Short "all")) (Var (Short "v6")))) (Var (Short "v1")))) (App OpbLeq ((Lit 0) (Lit 0))) (App OpbLt ((Lit 0) (Lit 0)))) (App OpbLt ((Lit 0) (Lit 0)))) (App OpbLt ((Lit 0) (Lit 0))))))))) (Dletrec (unk unk) (("exists" "v6" Fun "v7" (Mat (Var (Short "v7")) (((Pcon (SOME (Short "Tip")) nil) App OpbLt ((Lit 0) (Lit 0))) ((Pcon (SOME (Short "Bin")) ("v5" "v4" "v3" "v2" "v1")) If (App Opapp ((App Opapp ((Var (Short "v6")) (Var (Short "v4")))) (Var (Short "v3")))) (App OpbLeq ((Lit 0) (Lit 0))) (If (App Opapp ((App Opapp ((Var (Short "exists")) (Var (Short "v6")))) (Var (Short "v2")))) (App OpbLeq ((Lit 0) (Lit 0))) (If (App Opapp ((App Opapp ((Var (Short "exists")) (Var (Short "v6")))) (Var (Short "v1")))) (App OpbLeq ((Lit 0) (Lit 0))) (App OpbLt ((Lit 0) (Lit 0)))))))))))) ((Dmod "Map" ((Dtabbrev (unk unk) ("'a" "'b") "map" (Atapp ((Atvar "'a") (Atvar "'b")) (Short "map"))) (Dlet (unk unk) "lookup" (Fun "v4" (Fun "v3" (Mat (Var (Short "v4")) (((Pcon (SOME (Short "Map")) ("v2" "v1")) App Opapp ((App Opapp ((App Opapp ((Var (Short "lookup")) (Var (Short "v2")))) (Var (Short "v3")))) (Var (Short "v1"))))))))) (Dlet (unk unk) "insert" (Fun "v5" (Fun "v3" (Fun "v4" (Mat (Var (Short "v5")) (((Pcon (SOME (Short "Map")) ("v2" "v1")) Con (SOME (Short "Map")) ((Var (Short "v2")) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "insert")) (Var (Short "v2")))) (Var (Short "v3")))) (Var (Short "v4")))) (Var (Short "v1")))))))))))) (Dlet (unk unk) "delete" (Fun "v4" (Fun "v3" (Mat (Var (Short "v4")) (((Pcon (SOME (Short "Map")) ("v2" "v1")) Con (SOME (Short "Map")) ((Var (Short "v2")) (App Opapp ((App Opapp ((App Opapp ((Var (Short "delete")) (Var (Short "v2")))) (Var (Short "v3")))) (Var (Short "v1"))))))))))) (Dlet (unk unk) "null" (Fun "v3" (Mat (Var (Short "v3")) (((Pcon (SOME (Short "Map")) ("v2" "v1")) App Opapp ((Var (Short "null")) (Var (Short "v1")))))))) (Dlet (unk unk) "size" (Fun "v3" (Mat (Var (Short "v3")) (((Pcon (SOME (Short "Map")) ("v2" "v1")) App Opapp ((Var (Short "size")) (Var (Short "v1")))))))) (Dlet (unk unk) "empty" (Fun "v1" (Con (SOME (Short "Map")) ((Var (Short "v1")) (Var (Short "empty")))))) (Dlet (unk unk) "union" (Fun "v6" (Fun "v5" (Mat (Var (Short "v6")) (((Pcon (SOME (Short "Map")) ("v4" "v3")) Mat (Var (Short "v5")) (((Pcon (SOME (Short "Map")) ("v2" "v1")) Con (SOME (Short "Map")) ((Var (Short "v4")) (App Opapp ((App Opapp ((App Opapp ((Var (Short "union")) (Var (Short "v4")))) (Var (Short "v3")))) (Var (Short "v1"))))))))))))) (Dlet (unk unk) "unionWith" (Fun "v5" (Fun "v7" (Fun "v6" (Mat (Var (Short "v7")) (((Pcon (SOME (Short "Map")) ("v4" "v3")) Mat (Var (Short "v6")) (((Pcon (SOME (Short "Map")) ("v2" "v1")) Con (SOME (Short "Map")) ((Var (Short "v4")) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "unionWith")) (Var (Short "v4")))) (Var (Short "v5")))) (Var (Short "v3")))) (Var (Short "v1")))))))))))))) (Dlet (unk unk) "unionWithKey" (Fun "v5" (Fun "v7" (Fun "v6" (Mat (Var (Short "v7")) (((Pcon (SOME (Short "Map")) ("v4" "v3")) Mat (Var (Short "v6")) (((Pcon (SOME (Short "Map")) ("v2" "v1")) Con (SOME (Short "Map")) ((Var (Short "v4")) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "unionWithKey")) (Var (Short "v4")))) (Var (Short "v5")))) (Var (Short "v3")))) (Var (Short "v1")))))))))))))) (Dlet (unk unk) "foldrWithKey" (Fun "v3" (Fun "v5" (Fun "v4" (Mat (Var (Short "v4")) (((Pcon (SOME (Short "Map")) ("v2" "v1")) App Opapp ((App Opapp ((App Opapp ((Var (Short "foldrWithKey")) (Var (Short "v3")))) (Var (Short "v5")))) (Var (Short "v1")))))))))) (Dlet (unk unk) "map" (Fun "v3" (Fun "v4" (Mat (Var (Short "v4")) (((Pcon (SOME (Short "Map")) ("v2" "v1")) Con (SOME (Short "Map")) ((Var (Short "v2")) (App Opapp ((App Opapp ((Var (Short "map")) (Var (Short "v3")))) (Var (Short "v1"))))))))))) (Dlet (unk unk) "mapWithKey" (Fun "v3" (Fun "v4" (Mat (Var (Short "v4")) (((Pcon (SOME (Short "Map")) ("v2" "v1")) Con (SOME (Short "Map")) ((Var (Short "v2")) (App Opapp ((App Opapp ((Var (Short "mapWithKey")) (Var (Short "v3")))) (Var (Short "v1"))))))))))) (Dlet (unk unk) "toAscList" (Fun "v3" (Mat (Var (Short "v3")) (((Pcon (SOME (Short "Map")) ("v2" "v1")) App Opapp ((Var (Short "toAscList")) (Var (Short "v1")))))))) (Dlet (unk unk) "fromList" (Fun "v1" (Fun "v2" (Con (SOME (Short "Map")) ((Var (Short "v1")) (App Opapp ((App Opapp ((Var (Short "fromList")) (Var (Short "v1")))) (Var (Short "v2"))))))))) (Dlet (unk unk) "isSubmapBy" (Fun "v5" (Fun "v7" (Fun "v6" (Mat (Var (Short "v7")) (((Pcon (SOME (Short "Map")) ("v4" "v3")) Mat (Var (Short "v6")) (((Pcon (SOME (Short "Map")) ("v2" "v1")) App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "isSubmapOfBy")) (Var (Short "v4")))) (Var (Short "v5")))) (Var (Short "v3")))) (Var (Short "v1")))))))))))) (Dlet (unk unk) "isSubmap" (Fun "v3" (Fun "v4" (App Opapp ((App Opapp ((App Opapp ((Var (Short "isSubmapBy")) (Fun "v2" (Fun "v1" (App Equality ((Var (Short "v2")) (Var (Short "v1")))))))) (Var (Short "v3")))) (Var (Short "v4"))))))) (Dlet (unk unk) "all" (Fun "v3" (Fun "v4" (Mat (Var (Short "v4")) (((Pcon (SOME (Short "Map")) ("v2" "v1")) App Opapp ((App Opapp ((Var (Short "all")) (Var (Short "v3")))) (Var (Short "v1"))))))))) (Dlet (unk unk) "exists" (Fun "v3" (Fun "v4" (Mat (Var (Short "v4")) (((Pcon (SOME (Short "Map")) ("v2" "v1")) App Opapp ((App Opapp ((Var (Short "exists")) (Var (Short "v3")))) (Var (Short "v1"))))))))) (Dlet (unk unk) "filterWithKey" (Fun "v3" (Fun "v4" (Mat (Var (Short "v4")) (((Pcon (SOME (Short "Map")) ("v2" "v1")) Con (SOME (Short "Map")) ((Var (Short "v2")) (App Opapp ((App Opapp ((Var (Short "filterWithKey")) (Var (Short "v3")))) (Var (Short "v1"))))))))))) (Dlet (unk unk) "filter" (Fun "v3" (Fun "v4" (Mat (Var (Short "v4")) (((Pcon (SOME (Short "Map")) ("v2" "v1")) Con (SOME (Short "Map")) ((Var (Short "v2")) (App Opapp ((App Opapp ((Var (Short "filter")) (Var (Short "v3")))) (Var (Short "v1"))))))))))))) (Dtabbrev (unk unk) ("'a" "'b") "map" (Atapp ((Atvar "'a") (Atvar "'b")) (Short "map"))))) (Dmod "Hashtable" ((Dlocal ((Dtype ((0 14) unk) ((("'k" "'v") "hashtable" ("Hashtable" (Atapp ((Atapp nil (Short "int"))) (Short "ref")) (Atapp ((Atapp ((Atapp ((Atvar "'k") (Atvar "'v")) (Long "Map" (Short "map")))) (Short "array"))) (Short "ref")) (Atfun (Atvar "'k") (Atapp nil (Short "int"))) (Atfun (Atvar "'k") (Atfun (Atvar "'k") (Atapp nil (Short "ordering"))))))))) ((Dtabbrev (unk unk) ("'a" "'b") "hashtable" (Atapp ((Atvar "'a") (Atvar "'b")) (Short "hashtable"))) (Dletrec ((0 14) (14 6)) (("delete" "ht" Fun "k" (Mat (Var (Short "ht")) (((Pcon (SOME (Short "Hashtable")) ("usedRef" "bucketsRef" "hf" (Pany))) Let (SOME "buckets") (App Opapp ((Var (Short "!")) (Var (Short "bucketsRef")))) (Let (SOME " v1") (App Opapp ((Var (Long "Array" (Short "length"))) (Var (Short "buckets")))) (Let (SOME " v0") (App Opapp ((Var (Short "hf")) (Var (Short "k")))) (Let (SOME "index") (App Opapp ((App Opapp ((Var (Short "mod")) (Var (Short " v0")))) (Var (Short " v1")))) (Let (SOME "bucket") (App Opapp ((App Opapp ((Var (Long "Array" (Short "sub"))) (Var (Short "buckets")))) (Var (Short "index")))) (Let (SOME "newBucket") (App Opapp ((App Opapp ((Var (Long "Map" (Short "delete"))) (Var (Short "bucket")))) (Var (Short "k")))) (Let NONE (App Opapp ((App Opapp ((App Opapp ((Var (Long "Array" (Short "update"))) (Var (Short "buckets")))) (Var (Short "index")))) (Var (Short "newBucket")))) (Let (SOME " v2") (App Opapp ((Var (Long "Map" (Short "null"))) (Var (Short "bucket")))) (Let (SOME " v3") (App Opapp ((Var (Short "not")) (Var (Short " v2")))) (Let (SOME " v5") (Log And (Var (Short " v3")) (App Opapp ((Var (Long "Map" (Short "null"))) (Var (Short "newBucket"))))) (Let (SOME " v9") (Log And (Var (Short " v5")) (Let (SOME " v8") (App Opapp ((Var (Short "!")) (Var (Short "usedRef")))) (App Opapp ((App Opapp ((Var (Short "<")) (Lit 0))) (Var (Short " v8")))))) (If (Var (Short " v9")) (Let (SOME " v10") (App Opapp ((Var (Short "!")) (Var (Short "usedRef")))) (Let (SOME " v11") (App Opapp ((App Opapp ((Var (Short "-")) (Var (Short " v10")))) (Lit 1))) (App Opapp ((App Opapp ((Var (Short ":=")) (Var (Short "usedRef")))) (Var (Short " v11")))))) (Con NONE nil)))))))))))))))))) (Dletrec ((0 14) (7 4)) (("lookup" "ht" Fun "k" (Mat (Var (Short "ht")) (((Pcon (SOME (Short "Hashtable")) ("usedRef" "bucketsRef" "hf" "cmp")) Let (SOME "buckets") (App Opapp ((Var (Short "!")) (Var (Short "bucketsRef")))) (Let (SOME " v1") (App Opapp ((Var (Long "Array" (Short "length"))) (Var (Short "buckets")))) (Let (SOME " v0") (App Opapp ((Var (Short "hf")) (Var (Short "k")))) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "mod")) (Var (Short " v0")))) (Var (Short " v1")))) (Let (SOME "bucket") (App Opapp ((App Opapp ((Var (Long "Array" (Short "sub"))) (Var (Short "buckets")))) (Var (Short " v2")))) (App Opapp ((App Opapp ((Var (Long "Map" (Short "lookup"))) (Var (Short "bucket")))) (Var (Short "k")))))))))))))) (Dletrec ((0 14) (2 70)) (("toAscList" "ht" Mat (Var (Short "ht")) (((Pcon (SOME (Short "Hashtable")) ((Pany) "bucketsRef" (Pany) "cmp")) Let (SOME " v1") (App Opapp ((Var (Short "!")) (Var (Short "bucketsRef")))) (Let (SOME " v0") (App Opapp ((Var (Long "Map" (Short "empty"))) (Var (Short "cmp")))) (Let (SOME " v2") (App Opapp ((App Opapp ((App Opapp ((Var (Long "Array" (Short "foldr"))) (Var (Long "Map" (Short "union"))))) (Var (Short " v0")))) (Var (Short " v1")))) (App Opapp ((Var (Long "Map" (Short "toAscList"))) (Var (Short " v2"))))))))))) (Dletrec ((0 14) (2 11)) (("size" "ht" Mat (Var (Short "ht")) (((Pcon (SOME (Short "Hashtable")) ("usedRef" "bucketsRef" "hf" "cmp")) App Opapp ((Var (Short "!")) (Var (Short "usedRef")))))))) (Dlocal ((Dletrec ((0 15) (0 67)) (("initBuckets" "n" Fun "cmp" (Let (SOME " v0") (App Opapp ((Var (Long "Map" (Short "empty"))) (Var (Short "cmp")))) (App Opapp ((App Opapp ((Var (Long "Array" (Short "array"))) (Var (Short "n")))) (Var (Short " v0"))))))))) ((Dletrec ((0 15) (6 2)) (("empty" "size" Fun "hf" (Fun "cmp" (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "<")) (Var (Short "size")))) (Lit 1))) (Let (SOME " v2") (If (Var (Short " v1")) (Lit 1) (Var (Short "size"))) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Short "initBuckets")) (Var (Short " v2")))) (Var (Short "cmp")))) (Let (SOME " v4") (App Opref ((Var (Short " v3")))) (Let (SOME " v0") (App Opref ((Lit 0))) (Con (SOME (Short "Hashtable")) ((Var (Short " v0")) (Var (Short " v4")) (Var (Short "hf")) (Var (Short "cmp"))))))))))))) (Dletrec ((0 15) (3 27)) (("clear" "ht" Mat (Var (Short "ht")) (((Pcon (SOME (Short "Hashtable")) ("usedRef" "bucketsRef" (Pany) "cmp")) Let (SOME " v0") (App Opapp ((Var (Short "!")) (Var (Short "bucketsRef")))) (Let (SOME " v1") (App Opapp ((Var (Long "Array" (Short "length"))) (Var (Short " v0")))) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "initBuckets")) (Var (Short " v1")))) (Var (Short "cmp")))) (Let NONE (App Opapp ((App Opapp ((Var (Short ":=")) (Var (Short "bucketsRef")))) (Var (Short " v2")))) (Let (SOME " v3") (App Opapp ((Var (Short "!")) (Var (Short "usedRef")))) (Let (SOME " v4") (App Opapp ((App Opapp ((Var (Short "*")) (Var (Short " v3")))) (Lit 0))) (App Opapp ((App Opapp ((Var (Short ":=")) (Var (Short "usedRef")))) (Var (Short " v4")))))))))))))) (Dlocal ((Dletrec ((0 15) (12 6)) (("staticInsert" "ht" Fun "k" (Fun "v" (Mat (Var (Short "ht")) (((Pcon (SOME (Short "Hashtable")) ("usedRef" "bucketsRef" "hf" "cmp")) Let (SOME "buckets") (App Opapp ((Var (Short "!")) (Var (Short "bucketsRef")))) (Let (SOME " v1") (App Opapp ((Var (Long "Array" (Short "length"))) (Var (Short "buckets")))) (Let (SOME " v0") (App Opapp ((Var (Short "hf")) (Var (Short "k")))) (Let (SOME "index") (App Opapp ((App Opapp ((Var (Short "mod")) (Var (Short " v0")))) (Var (Short " v1")))) (Let (SOME "bucket") (App Opapp ((App Opapp ((Var (Long "Array" (Short "sub"))) (Var (Short "buckets")))) (Var (Short "index")))) (Let (SOME " v2") (App Opapp ((App Opapp ((App Opapp ((Var (Long "Map" (Short "insert"))) (Var (Short "bucket")))) (Var (Short "k")))) (Var (Short "v")))) (Let NONE (App Opapp ((App Opapp ((App Opapp ((Var (Long "Array" (Short "update"))) (Var (Short "buckets")))) (Var (Short "index")))) (Var (Short " v2")))) (Let (SOME " v3") (App Opapp ((Var (Long "Map" (Short "null"))) (Var (Short "bucket")))) (If (Var (Short " v3")) (Let (SOME " v4") (App Opapp ((Var (Short "!")) (Var (Short "usedRef")))) (Let (SOME " v5") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short " v4")))) (Lit 1))) (App Opapp ((App Opapp ((Var (Short ":=")) (Var (Short "usedRef")))) (Var (Short " v5")))))) (Con NONE nil))))))))))))))))) ((Dlocal ((Dletrec ((0 15) (0 80)) (("insertList" "ht" Fun "l" (Let (SOME " v0") (Fun "" (Mat (Var (Short "")) (((Pcon NONE ("k" "v")) App Opapp ((App Opapp ((App Opapp ((Var (Short "staticInsert")) (Var (Short "ht")))) (Var (Short "k")))) (Var (Short "v"))))))) (App Opapp ((App Opapp ((Var (Long "List" (Short "app"))) (Var (Short " v0")))) (Var (Short "l")))))))) (Dletrec ((0 15) (10 6)) (("doubleCapacity" "ht" Mat (Var (Short "ht")) (((Pcon (SOME (Short "Hashtable")) ("usedRef" "bucketsRef" (Pany) "cmp")) Let (SOME "oldArr") (App Opapp ((Var (Short "!")) (Var (Short "bucketsRef")))) (Let (SOME " v0") (App Opapp ((Var (Long "Array" (Short "length"))) (Var (Short "oldArr")))) (Let (SOME "newLen") (App Opapp ((App Opapp ((Var (Short "*")) (Var (Short " v0")))) (Lit 2))) (Let (SOME "oldList") (App Opapp ((Var (Short "toAscList")) (Var (Short "ht")))) (Let NONE (App Opapp ((App Opapp ((Var (Short ":=")) (Var (Short "usedRef")))) (Lit 0))) (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "initBuckets")) (Var (Short "newLen")))) (Var (Short "cmp")))) (Let NONE (App Opapp ((App Opapp ((Var (Short ":=")) (Var (Short "bucketsRef")))) (Var (Short " v1")))) (App Opapp ((App Opapp ((Var (Short "insertList")) (Var (Short "ht")))) (Var (Short "oldList")))))))))))))))) ((Dletrec ((0 15) (4 48)) (("insert" "ht" Fun "k" (Fun "v" (Mat (Var (Short "ht")) (((Pcon (SOME (Short "Hashtable")) ("usedRef" "bucketsRef" (Pany) (Pany))) Let (SOME " v2") (App Opapp ((Var (Short "!")) (Var (Short "bucketsRef")))) (Let (SOME " v3") (App Opapp ((Var (Long "Array" (Short "length"))) (Var (Short " v2")))) (Let (SOME " v4") (App Opapp ((App Opapp ((Var (Short "*")) (Lit 3))) (Var (Short " v3")))) (Let (SOME " v0") (App Opapp ((Var (Short "!")) (Var (Short "usedRef")))) (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "*")) (Lit 4))) (Var (Short " v0")))) (Let (SOME " v5") (App Opapp ((App Opapp ((Var (Short "<")) (Var (Short " v1")))) (Var (Short " v4")))) (If (Var (Short " v5")) (App Opapp ((App Opapp ((App Opapp ((Var (Short "staticInsert")) (Var (Short "ht")))) (Var (Short "k")))) (Var (Short "v")))) (Let NONE (App Opapp ((Var (Short "doubleCapacity")) (Var (Short "ht")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "staticInsert")) (Var (Short "ht")))) (Var (Short "k")))) (Var (Short "v")))))))))))))))))))))))))))) (Dmod "CommandLine" ((Dlocal ((Dletrec ((1 2) (5 49)) (("read16bit" "a" Let (SOME "w0") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "sub"))) (Var (Short "a")))) (Lit 0))) (Let (SOME "w1") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "sub"))) (Var (Short "a")))) (Lit 1))) (Let (SOME " v1") (App Opapp ((Var (Long "Word8" (Short "toInt"))) (Var (Short "w1")))) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "*")) (Var (Short " v1")))) (Lit 256))) (Let (SOME " v0") (App Opapp ((Var (Long "Word8" (Short "toInt"))) (Var (Short "w0")))) (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short " v0")))) (Var (Short " v2"))))))))))) (Dletrec ((1 2) (3 54)) (("write16bit" "a" Fun "i" (Let (SOME " v0") (App Opapp ((Var (Long "Word8" (Short "fromInt"))) (Var (Short "i")))) (Let NONE (App Opapp ((App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "update"))) (Var (Short "a")))) (Lit 0))) (Var (Short " v0")))) (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "div")) (Var (Short "i")))) (Lit 256))) (Let (SOME " v2") (App Opapp ((Var (Long "Word8" (Short "fromInt"))) (Var (Short " v1")))) (App Opapp ((App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "update"))) (Var (Short "a")))) (Lit 1))) (Var (Short " v2"))))))))))) (Dletrec ((1 2) (12 34)) (("cloop" "a" Fun "n" (Fun "acc" (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "n")))) (Lit 0))) (If (Var (Short " v0")) (Var (Short "acc")) (Let (SOME "n") (App Opapp ((App Opapp ((Var (Short "-")) (Var (Short "n")))) (Lit 1))) (Let (SOME "u") (App Opapp ((App Opapp ((Var (Short "write16bit")) (Var (Short "a")))) (Var (Short "n")))) (Let (SOME "u") (App (FFI . "get_arg_length") ((Lit "") (Var (Short "a")))) (Let (SOME "l") (App Opapp ((Var (Short "read16bit")) (Var (Short "a")))) (Let (SOME " v2") (App Opapp ((Var (Long "Word8" (Short "fromInt"))) (Lit 0))) (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "max")) (Lit 2))) (Var (Short "l")))) (Let (SOME "tmp") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "array"))) (Var (Short " v1")))) (Var (Short " v2")))) (Let (SOME "u") (App Opapp ((App Opapp ((Var (Short "write16bit")) (Var (Short "tmp")))) (Var (Short "n")))) (Let (SOME "u") (App (FFI . "get_arg") ((Lit "") (Var (Short "tmp")))) (Let (SOME "arg") (App Opapp ((App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "substring"))) (Var (Short "tmp")))) (Lit 0))) (Var (Short "l")))) (Let (SOME " v3") (Con (SOME (Short "::")) ((Var (Short "arg")) (Var (Short "acc")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "cloop")) (Var (Short "a")))) (Var (Short "n")))) (Var (Short " v3")))))))))))))))))))))) ((Dletrec ((1 2) (7 22)) (("cline" "u" Mat (Var (Short "u")) (((Pcon NONE nil) Let (SOME " v0") (App Opapp ((Var (Long "Word8" (Short "fromInt"))) (Lit 0))) (Let (SOME "a") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "array"))) (Lit 2))) (Var (Short " v0")))) (Let (SOME "u") (App (FFI . "get_arg_count") ((Lit "") (Var (Short "a")))) (Let (SOME "n") (App Opapp ((Var (Short "read16bit")) (Var (Short "a")))) (Let (SOME " v1") (Con (SOME (Short "[]")) nil) (App Opapp ((App Opapp ((App Opapp ((Var (Short "cloop")) (Var (Short "a")))) (Var (Short "n")))) (Var (Short " v1"))))))))))))) (Dletrec ((0 15) (0 44)) (("name" "u" Let (SOME " v0") (App Opapp ((Var (Short "cline")) (Var (Short "u")))) (App Opapp ((Var (Long "List" (Short "hd"))) (Var (Short " v0"))))))) (Dletrec ((0 15) (0 49)) (("arguments" "u" Let (SOME " v0") (App Opapp ((Var (Short "cline")) (Var (Short "u")))) (App Opapp ((Var (Long "List" (Short "tl"))) (Var (Short " v0"))))))))))) (Dmod "Double" ((Dtabbrev (unk unk) nil "double" (Atapp nil (Short "word64"))) (Dlocal ((Dlet (unk unk) "replacemlneg" (Fun "v1" (If (App Equality ((Var (Short "v1")) (Lit (char "~")))) (Lit (char "-")) (Var (Short "v1"))))) (Dlet (unk unk) "preparestring" (Fun "v1" (App Opapp ((App Opapp ((Var (Long "String" (Short "translate"))) (Var (Short "replacemlneg")))) (Var (Short "v1"))))))) ((Dlet (unk unk) "fromWord" (Fun "v1" (App FpFromWord ((Var (Short "v1")))))) (Dlet (unk unk) "toWord" (Fun "v1" (App FpToWord ((Var (Short "v1")))))) (Dletrec ((0 14) (15 6)) (("fromString" "s" Let (SOME "sPrepped") (App Opapp ((Var (Short "preparestring")) (Var (Short "s")))) (Let (SOME " v0") (App Opapp ((Var (Long "Word8" (Short "fromInt"))) (Lit 0))) (Let (SOME "iobuff") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "array"))) (Lit 8))) (Var (Short " v0")))) (Let NONE (App (FFI . "double_fromString") ((Var (Short "sPrepped")) (Var (Short "iobuff")))) (Let (SOME "a") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "sub"))) (Var (Short "iobuff")))) (Lit 0))) (Let (SOME "b") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "sub"))) (Var (Short "iobuff")))) (Lit 1))) (Let (SOME "c") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "sub"))) (Var (Short "iobuff")))) (Lit 2))) (Let (SOME "d") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "sub"))) (Var (Short "iobuff")))) (Lit 3))) (Let (SOME "e") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "sub"))) (Var (Short "iobuff")))) (Lit 4))) (Let (SOME "f") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "sub"))) (Var (Short "iobuff")))) (Lit 5))) (Let (SOME "g") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "sub"))) (Var (Short "iobuff")))) (Lit 6))) (Let (SOME "h") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "sub"))) (Var (Short "iobuff")))) (Lit 7))) (Let (SOME " v1") (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Long "Word64" (Short "concatAll"))) (Var (Short "a")))) (Var (Short "b")))) (Var (Short "c")))) (Var (Short "d")))) (Var (Short "e")))) (Var (Short "f")))) (Var (Short "g")))) (Var (Short "h")))) (App Opapp ((Var (Short "fromWord")) (Var (Short " v1"))))))))))))))))))))) (Dlocal ((Dlet (unk unk) "byte_0" (Fun "v1" (App (Shift8Lsl . 0) ((App W8fromInt ((App W64toInt ((App (Shift64Lsr . 0) ((Var (Short "v1")))))))))))) (Dlet (unk unk) "byte_1" (Fun "v1" (App (Shift8Lsl . 0) ((App W8fromInt ((App W64toInt ((App (Shift64Lsr . 0) ((App (Shift64Lsr . 8) ((Var (Short "v1")))))))))))))) (Dlet (unk unk) "byte_2" (Fun "v1" (App (Shift8Lsl . 0) ((App W8fromInt ((App W64toInt ((App (Shift64Lsr . 0) ((App (Shift64Lsr . 16) ((Var (Short "v1")))))))))))))) (Dlet (unk unk) "byte_3" (Fun "v1" (App (Shift8Lsl . 0) ((App W8fromInt ((App W64toInt ((App (Shift64Lsr . 0) ((App (Shift64Lsr . 24) ((Var (Short "v1")))))))))))))) (Dlet (unk unk) "byte_4" (Fun "v1" (App (Shift8Lsl . 0) ((App W8fromInt ((App W64toInt ((App (Shift64Lsr . 0) ((App (Shift64Lsr . 32) ((Var (Short "v1")))))))))))))) (Dlet (unk unk) "byte_5" (Fun "v1" (App (Shift8Lsl . 0) ((App W8fromInt ((App W64toInt ((App (Shift64Lsr . 0) ((App (Shift64Lsr . 40) ((Var (Short "v1")))))))))))))) (Dlet (unk unk) "byte_6" (Fun "v1" (App (Shift8Lsl . 0) ((App W8fromInt ((App W64toInt ((App (Shift64Lsr . 0) ((App (Shift64Lsr . 48) ((Var (Short "v1")))))))))))))) (Dlet (unk unk) "byte_7" (Fun "v1" (App (Shift8Lsl . 0) ((App W8fromInt ((App W64toInt ((App (Shift64Lsr . 0) ((App (Shift64Lsr . 56) ((Var (Short "v1")))))))))))))) (Dlet (unk unk) "is_0_byte" (Fun "v1" (App Equality ((Var (Short "v1")) (Lit (word8 0))))))) ((Dletrec ((0 14) (16 6)) (("toString" "d" Let (SOME "w") (App Opapp ((Var (Short "toWord")) (Var (Short "d")))) (Let (SOME " v0") (App Opapp ((Var (Long "Word8" (Short "fromInt"))) (Lit 0))) (Let (SOME "iobuff") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "array"))) (Lit 256))) (Var (Short " v0")))) (Let (SOME " v1") (App Opapp ((Var (Short "byte_0")) (Var (Short "w")))) (Let NONE (App Opapp ((App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "update"))) (Var (Short "iobuff")))) (Lit 0))) (Var (Short " v1")))) (Let (SOME " v2") (App Opapp ((Var (Short "byte_1")) (Var (Short "w")))) (Let NONE (App Opapp ((App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "update"))) (Var (Short "iobuff")))) (Lit 1))) (Var (Short " v2")))) (Let (SOME " v3") (App Opapp ((Var (Short "byte_2")) (Var (Short "w")))) (Let NONE (App Opapp ((App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "update"))) (Var (Short "iobuff")))) (Lit 2))) (Var (Short " v3")))) (Let (SOME " v4") (App Opapp ((Var (Short "byte_3")) (Var (Short "w")))) (Let NONE (App Opapp ((App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "update"))) (Var (Short "iobuff")))) (Lit 3))) (Var (Short " v4")))) (Let (SOME " v5") (App Opapp ((Var (Short "byte_4")) (Var (Short "w")))) (Let NONE (App Opapp ((App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "update"))) (Var (Short "iobuff")))) (Lit 4))) (Var (Short " v5")))) (Let (SOME " v6") (App Opapp ((Var (Short "byte_5")) (Var (Short "w")))) (Let NONE (App Opapp ((App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "update"))) (Var (Short "iobuff")))) (Lit 5))) (Var (Short " v6")))) (Let (SOME " v7") (App Opapp ((Var (Short "byte_6")) (Var (Short "w")))) (Let NONE (App Opapp ((App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "update"))) (Var (Short "iobuff")))) (Lit 6))) (Var (Short " v7")))) (Let (SOME " v8") (App Opapp ((Var (Short "byte_7")) (Var (Short "w")))) (Let NONE (App Opapp ((App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "update"))) (Var (Short "iobuff")))) (Lit 7))) (Var (Short " v8")))) (Let NONE (App (FFI . "double_toString") ((Lit "") (Var (Short "iobuff")))) (Let (SOME " v9") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "findi"))) (Var (Short "is_0_byte")))) (Var (Short "iobuff")))) (Let (SOME " v10") (App Opapp ((Var (Long "Option" (Short "valOf"))) (Var (Short " v9")))) (Let (SOME "n") (App Opapp ((Var (Short "fst")) (Var (Short " v10")))) (App Opapp ((App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "substring"))) (Var (Short "iobuff")))) (Lit 0))) (Var (Short "n"))))))))))))))))))))))))))))))) (Dlet (unk unk) "fma" (Fun "v1" (Fun "v2" (Fun "v3" (FpOptimise NoOpt (App FPtopFPFma ((Var (Short "v3")) (Var (Short "v1")) (Var (Short "v2"))))))))) (Dlet (unk unk) "+" (Fun "v1" (Fun "v2" (FpOptimise NoOpt (App FPbopFPAdd ((Var (Short "v1")) (Var (Short "v2")))))))) (Dlet (unk unk) "-" (Fun "v1" (Fun "v2" (FpOptimise NoOpt (App FPbopFPSub ((Var (Short "v1")) (Var (Short "v2")))))))) (Dlet (unk unk) "*" (Fun "v1" (Fun "v2" (FpOptimise NoOpt (App FPbopFPMul ((Var (Short "v1")) (Var (Short "v2")))))))) (Dlet (unk unk) "/" (Fun "v1" (Fun "v2" (FpOptimise NoOpt (App FPbopFPDiv ((Var (Short "v1")) (Var (Short "v2")))))))) (Dlet (unk unk) "<" (Fun "v1" (Fun "v2" (FpOptimise NoOpt (App FPcmpFPLess ((Var (Short "v1")) (Var (Short "v2")))))))) (Dlet (unk unk) "<=" (Fun "v1" (Fun "v2" (FpOptimise NoOpt (App FPcmpFPLessEqual ((Var (Short "v1")) (Var (Short "v2")))))))) (Dlet (unk unk) ">" (Fun "v1" (Fun "v2" (FpOptimise NoOpt (App FPcmpFPGreater ((Var (Short "v1")) (Var (Short "v2")))))))) (Dlet (unk unk) ">=" (Fun "v1" (Fun "v2" (FpOptimise NoOpt (App FPcmpFPGreaterEqual ((Var (Short "v1")) (Var (Short "v2")))))))) (Dlet (unk unk) "=" (Fun "v1" (Fun "v2" (FpOptimise NoOpt (App FPcmpFPEqual ((Var (Short "v1")) (Var (Short "v2")))))))) (Dlet (unk unk) "abs" (Fun "v1" (FpOptimise NoOpt (App FPuopFPAbs ((Var (Short "v1"))))))) (Dlet (unk unk) "sqrt" (Fun "v1" (FpOptimise NoOpt (App FPuopFPSqrt ((Var (Short "v1"))))))) (Dlet (unk unk) "~" (Fun "v1" (FpOptimise NoOpt (App FPuopFPNeg ((Var (Short "v1"))))))))) (Dmod "Marshalling" ((Dletrec ((0 15) (3 10)) (("n2w2" "n" Fun "bytes" (Fun "off" (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Short "div")) (Var (Short "n")))) (Lit 256))) (Let (SOME " v1") (App Opapp ((Var (Long "Word8" (Short "fromInt"))) (Var (Short " v0")))) (Let (SOME "a") (App Opapp ((App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "update"))) (Var (Short "bytes")))) (Var (Short "off")))) (Var (Short " v1")))) (Let (SOME " v3") (App Opapp ((Var (Long "Word8" (Short "fromInt"))) (Var (Short "n")))) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "off")))) (Lit 1))) (Let (SOME "a") (App Opapp ((App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "update"))) (Var (Short "bytes")))) (Var (Short " v2")))) (Var (Short " v3")))) (Con NONE nil))))))))))) (Dletrec ((0 15) (3 45)) (("w22n" "bytes" Fun "off" (Let (SOME "b1") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "sub"))) (Var (Short "bytes")))) (Var (Short "off")))) (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "off")))) (Lit 1))) (Let (SOME "b0") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "sub"))) (Var (Short "bytes")))) (Var (Short " v0")))) (Let (SOME " v3") (App Opapp ((Var (Long "Word8" (Short "toInt"))) (Var (Short "b0")))) (Let (SOME " v1") (App Opapp ((Var (Long "Word8" (Short "toInt"))) (Var (Short "b1")))) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "*")) (Var (Short " v1")))) (Lit 256))) (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short " v2")))) (Var (Short " v3"))))))))))))))) (Dmod "TextIO" ((Dlocal ((Dtype (unk unk) ((nil "instream" ("Instream" (Atapp nil (Short "string")))))) (Dtype (unk unk) ((nil "outstream" ("Outstream" (Atapp nil (Short "string")))))) (Dtype ((0 14) unk) ((nil "instreambuffered" ("InstreamBuffered" (Atapp nil (Short "instream")) (Atapp ((Atapp nil (Short "int"))) (Short "ref")) (Atapp ((Atapp nil (Short "int"))) (Short "ref")) (Atapp nil (Short "byte_array")))))) (Dlet (unk unk) "get_out" (Fun "v2" (Mat (Var (Short "v2")) (((Pcon (SOME (Short "Outstream")) ("v1")) Var (Short "v1")))))) (Dlet (unk unk) "get_in" (Fun "v2" (Mat (Var (Short "v2")) (((Pcon (SOME (Short "Instream")) ("v1")) Var (Short "v1"))))))) ((Dtabbrev (unk unk) nil "instream" (Atapp nil (Short "instream"))) (Dtabbrev (unk unk) nil "outstream" (Atapp nil (Short "outstream"))) (Dtabbrev (unk unk) nil "b_instream" (Atapp nil (Short "instreambuffered"))) (Dexn ((1 2) unk) "BadFileName" nil) (Dexn ((2 2) unk) "InvalidFD" nil) (Dexn ((3 2) unk) "EndOfFile" nil) (Dexn ((4 2) unk) "IllegalArgument" nil) (Dlocal ((Dlet (unk unk) "iobuff" (App Aw8alloc ((Lit 2052) (Lit (word8 0)))))) ((Dlet (unk unk) "stdIn" (Con (SOME (Short "Instream")) ((Lit "\\00\\00\\00\\00\\00\\00\\00\\00")))) (Dlet (unk unk) "stdOut" (Con (SOME (Short "Outstream")) ((Lit "\\00\\00\\00\\00\\00\\00\\00\\01")))) (Dlet (unk unk) "stdErr" (Con (SOME (Short "Outstream")) ((Lit "\\00\\00\\00\\00\\00\\00\\00\\02")))) (Dlocal ((Dletrec ((0 16) (11 6)) (("writei" "fd" Fun "n" (Fun "i" (Let (SOME "a") (App Opapp ((App Opapp ((App Opapp ((Var (Long "Marshalling" (Short "n2w2"))) (Var (Short "n")))) (Var (Short "iobuff")))) (Lit 0))) (Let (SOME "a") (App Opapp ((App Opapp ((App Opapp ((Var (Long "Marshalling" (Short "n2w2"))) (Var (Short "i")))) (Var (Short "iobuff")))) (Lit 2))) (Let (SOME "a") (App (FFI . "write") ((Var (Short "fd")) (Var (Short "iobuff")))) (Let (SOME " v1") (App Opapp ((Var (Long "Word8" (Short "fromInt"))) (Lit 1))) (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "sub"))) (Var (Short "iobuff")))) (Lit 0))) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short " v0")))) (Var (Short " v1")))) (If (Var (Short " v2")) (Let (SOME " v3") (Con (SOME (Short "InvalidFD")) nil) (Raise (Var (Short " v3")))) (Let (SOME "nw") (App Opapp ((App Opapp ((Var (Long "Marshalling" (Short "w22n"))) (Var (Short "iobuff")))) (Lit 1))) (Let (SOME " v4") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "nw")))) (Lit 0))) (If (Var (Short " v4")) (App Opapp ((App Opapp ((App Opapp ((Var (Short "writei")) (Var (Short "fd")))) (Var (Short "n")))) (Var (Short "i")))) (Var (Short "nw")))))))))))))))) (Dletrec ((12 4) (15 58)) (("write" "fd" Fun "n" (Fun "i" (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "n")))) (Lit 0))) (If (Var (Short " v0")) (Con NONE nil) (Let (SOME "nw") (App Opapp ((App Opapp ((App Opapp ((Var (Short "writei")) (Var (Short "fd")))) (Var (Short "n")))) (Var (Short "i")))) (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "<")) (Var (Short "nw")))) (Var (Short "n")))) (If (Var (Short " v1")) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "i")))) (Var (Short "nw")))) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "-")) (Var (Short "n")))) (Var (Short "nw")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "write")) (Var (Short "fd")))) (Var (Short " v2")))) (Var (Short " v3")))))) (Con NONE nil))))))))))) ((Dletrec ((0 17) (1 87)) (("output1" "fd" Fun "c" (Let (SOME " v0") (App Opapp ((Var (Long "Char" (Short "ord"))) (Var (Short "c")))) (Let (SOME " v1") (App Opapp ((Var (Long "Word8" (Short "fromInt"))) (Var (Short " v0")))) (Let NONE (App Opapp ((App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "update"))) (Var (Short "iobuff")))) (Lit 4))) (Var (Short " v1")))) (Let (SOME " v2") (App Opapp ((Var (Short "get_out")) (Var (Short "fd")))) (Let NONE (App Opapp ((App Opapp ((App Opapp ((Var (Short "write")) (Var (Short " v2")))) (Lit 1))) (Lit 0))) (Con NONE nil))))))))) (Dletrec ((0 17) (7 4)) (("output" "fd" Fun "s" (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "s")))) (Lit ""))) (If (Var (Short " v0")) (Con NONE nil) (Let (SOME "z") (App Opapp ((Var (Long "String" (Short "size"))) (Var (Short "s")))) (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "<=")) (Var (Short "z")))) (Lit 2048))) (Let (SOME "n") (If (Var (Short " v1")) (Var (Short "z")) (Lit 2048)) (Let (SOME "fl") (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "copyVec"))) (Var (Short "s")))) (Lit 0))) (Var (Short "n")))) (Var (Short "iobuff")))) (Lit 4))) (Let (SOME " v2") (App Opapp ((Var (Short "get_out")) (Var (Short "fd")))) (Let (SOME "a") (App Opapp ((App Opapp ((App Opapp ((Var (Short "write")) (Var (Short " v2")))) (Var (Short "n")))) (Lit 0))) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Short "-")) (Var (Short "z")))) (Var (Short "n")))) (Let (SOME " v4") (App Opapp ((App Opapp ((App Opapp ((Var (Long "String" (Short "substring"))) (Var (Short "s")))) (Var (Short "n")))) (Var (Short " v3")))) (App Opapp ((App Opapp ((Var (Short "output")) (Var (Short "fd")))) (Var (Short " v4"))))))))))))))))) (Dletrec ((8 2) (8 30)) (("print" "s" App Opapp ((App Opapp ((Var (Short "output")) (Var (Short "stdOut")))) (Var (Short "s")))))) (Dletrec ((9 2) (9 34)) (("print_err" "s" App Opapp ((App Opapp ((Var (Short "output")) (Var (Short "stdErr")))) (Var (Short "s")))))) (Dletrec ((1 2) (2 60)) (("print_list" "ls" Mat (Var (Short "ls")) (((Pcon (SOME (Short "[]")) nil) Con NONE nil) ((Pcon (SOME (Short "::")) ("x" "xs")) Let NONE (App Opapp ((Var (Short "print")) (Var (Short "x")))) (App Opapp ((Var (Short "print_list")) (Var (Short "xs"))))))))) (Dletrec ((1 0) (7 4)) (("openIn" "fname" Let (SOME " v0") (App Opapp ((Var (Long "Word8" (Short "fromInt"))) (Lit 0))) (Let (SOME "b") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "array"))) (Lit 9))) (Var (Short " v0")))) (Let (SOME " v1") (App Opapp ((Var (Long "Char" (Short "chr"))) (Lit 0))) (Let (SOME " v2") (App Opapp ((Var (Long "String" (Short "str"))) (Var (Short " v1")))) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Short "^")) (Var (Short "fname")))) (Var (Short " v2")))) (Let (SOME "a") (App (FFI . "open_in") ((Var (Short " v3")) (Var (Short "b")))) (Let (SOME " v5") (App Opapp ((Var (Long "Word8" (Short "fromInt"))) (Lit 0))) (Let (SOME " v4") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "sub"))) (Var (Short "b")))) (Lit 0))) (Let (SOME " v6") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short " v4")))) (Var (Short " v5")))) (If (Var (Short " v6")) (Let (SOME " v7") (App Opapp ((App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "substring"))) (Var (Short "b")))) (Lit 1))) (Lit 8))) (Con (SOME (Short "Instream")) ((Var (Short " v7"))))) (Let (SOME " v8") (Con (SOME (Short "BadFileName")) nil) (Raise (Var (Short " v8")))))))))))))))) (Dletrec ((8 0) (14 4)) (("openOut" "fname" Let (SOME " v0") (App Opapp ((Var (Long "Word8" (Short "fromInt"))) (Lit 0))) (Let (SOME "b") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "array"))) (Lit 9))) (Var (Short " v0")))) (Let (SOME " v1") (App Opapp ((Var (Long "Char" (Short "chr"))) (Lit 0))) (Let (SOME " v2") (App Opapp ((Var (Long "String" (Short "str"))) (Var (Short " v1")))) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Short "^")) (Var (Short "fname")))) (Var (Short " v2")))) (Let (SOME "a") (App (FFI . "open_out") ((Var (Short " v3")) (Var (Short "b")))) (Let (SOME " v5") (App Opapp ((Var (Long "Word8" (Short "fromInt"))) (Lit 0))) (Let (SOME " v4") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "sub"))) (Var (Short "b")))) (Lit 0))) (Let (SOME " v6") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short " v4")))) (Var (Short " v5")))) (If (Var (Short " v6")) (Let (SOME " v7") (App Opapp ((App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "substring"))) (Var (Short "b")))) (Lit 1))) (Lit 8))) (Con (SOME (Short "Outstream")) ((Var (Short " v7"))))) (Let (SOME " v8") (Con (SOME (Short "BadFileName")) nil) (Raise (Var (Short " v8")))))))))))))))) (Dletrec ((2 0) (6 4)) (("closeOut" "fd" Let (SOME " v0") (App Opapp ((Var (Short "get_out")) (Var (Short "fd")))) (Let (SOME "a") (App (FFI . "close") ((Var (Short " v0")) (Var (Short "iobuff")))) (Let (SOME " v2") (App Opapp ((Var (Long "Word8" (Short "fromInt"))) (Lit 0))) (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "sub"))) (Var (Short "iobuff")))) (Lit 0))) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short " v1")))) (Var (Short " v2")))) (If (Var (Short " v3")) (Con NONE nil) (Let (SOME " v4") (Con (SOME (Short "InvalidFD")) nil) (Raise (Var (Short " v4")))))))))))) (Dletrec ((2 0) (6 4)) (("closeIn" "fd" Let (SOME " v0") (App Opapp ((Var (Short "get_in")) (Var (Short "fd")))) (Let (SOME "a") (App (FFI . "close") ((Var (Short " v0")) (Var (Short "iobuff")))) (Let (SOME " v2") (App Opapp ((Var (Long "Word8" (Short "fromInt"))) (Lit 0))) (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "sub"))) (Var (Short "iobuff")))) (Lit 0))) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short " v1")))) (Var (Short " v2")))) (If (Var (Short " v3")) (Con NONE nil) (Let (SOME " v4") (Con (SOME (Short "InvalidFD")) nil) (Raise (Var (Short " v4")))))))))))) (Dlocal ((Dletrec ((1 2) (7 6)) (("read" "fd" Fun "n" (Let (SOME "a") (App Opapp ((App Opapp ((App Opapp ((Var (Long "Marshalling" (Short "n2w2"))) (Var (Short "n")))) (Var (Short "iobuff")))) (Lit 0))) (Let NONE (App (FFI . "read") ((Var (Short "fd")) (Var (Short "iobuff")))) (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "sub"))) (Var (Short "iobuff")))) (Lit 0))) (Let (SOME " v1") (App Opapp ((Var (Long "Word8" (Short "toInt"))) (Var (Short " v0")))) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "<>")) (Var (Short " v1")))) (Lit 1))) (If (Var (Short " v2")) (App Opapp ((App Opapp ((Var (Long "Marshalling" (Short "w22n"))) (Var (Short "iobuff")))) (Lit 1))) (Let (SOME " v3") (Con (SOME (Short "InvalidFD")) nil) (Raise (Var (Short " v3"))))))))))))) (Dletrec ((1 0) (3 31)) (("read_byte" "fd" Let (SOME " v0") (App Opapp ((App Opapp ((Var (Short "read")) (Var (Short "fd")))) (Lit 1))) (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short " v0")))) (Lit 0))) (If (Var (Short " v1")) (Let (SOME " v2") (Con (SOME (Short "EndOfFile")) nil) (Raise (Var (Short " v2")))) (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "sub"))) (Var (Short "iobuff")))) (Lit 4)))))))) (Dletrec ((1 0) (8 22)) (("input" "fd" Fun "buff" (Fun "off" (Fun "len" (Letrec (("input0" "off" Fun "len" (Fun "count" (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "min")) (Var (Short "len")))) (Lit 2048))) (Let (SOME " v0") (App Opapp ((Var (Short "get_in")) (Var (Short "fd")))) (Let (SOME "nread") (App Opapp ((App Opapp ((Var (Short "read")) (Var (Short " v0")))) (Var (Short " v1")))) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "nread")))) (Lit 0))) (If (Var (Short " v2")) (Var (Short "count")) (Let NONE (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "copy"))) (Var (Short "iobuff")))) (Lit 4))) (Var (Short "nread")))) (Var (Short "buff")))) (Var (Short "off")))) (Let (SOME " v5") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "count")))) (Var (Short "nread")))) (Let (SOME " v4") (App Opapp ((App Opapp ((Var (Short "-")) (Var (Short "len")))) (Var (Short "nread")))) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "off")))) (Var (Short "nread")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "input0")) (Var (Short " v3")))) (Var (Short " v4")))) (Var (Short " v5")))))))))))))))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "input0")) (Var (Short "off")))) (Var (Short "len")))) (Lit 0)))))))))) ((Dletrec ((1 2) (1 89)) (("input1" "fd" Handle (Let (SOME " v0") (App Opapp ((Var (Short "get_in")) (Var (Short "fd")))) (Let (SOME " v1") (App Opapp ((Var (Short "read_byte")) (Var (Short " v0")))) (Let (SOME " v2") (App Opapp ((Var (Long "Char" (Short "fromByte"))) (Var (Short " v1")))) (App Opapp ((Var (Long "Char" (Short "some"))) (Var (Short " v2"))))))) (((Pcon (SOME (Short "EndOfFile")) nil) Con (SOME (Short "None")) nil))))) (Dlocal ((Dletrec ((1 2) (5 50)) (("extend_array" "arr" Let (SOME "len") (App Opapp ((Var (Long "Word8Array" (Short "length"))) (Var (Short "arr")))) (Let (SOME " v1") (App Opapp ((Var (Long "Word8" (Short "fromInt"))) (Lit 0))) (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Short "*")) (Lit 2))) (Var (Short "len")))) (Let (SOME "arr'") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "array"))) (Var (Short " v0")))) (Var (Short " v1")))) (Let NONE (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "copy"))) (Var (Short "arr")))) (Lit 0))) (Var (Short "len")))) (Var (Short "arr'")))) (Lit 0))) (Var (Short "arr'")))))))))) ((Dletrec ((1 2) (18 68)) (("inputLine" "fd" Let (SOME " v0") (App Opapp ((Var (Long "Char" (Short "ord"))) (Lit (char "\\0A")))) (Let (SOME "nl") (App Opapp ((Var (Long "Word8" (Short "fromInt"))) (Var (Short " v0")))) (Letrec (("inputLine_aux" "arr" Fun "i" (Let (SOME " v1") (App Opapp ((Var (Long "Word8Array" (Short "length"))) (Var (Short "arr")))) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "<")) (Var (Short "i")))) (Var (Short " v1")))) (If (Var (Short " v2")) (Handle (Let (SOME " v3") (App Opapp ((Var (Short "get_in")) (Var (Short "fd")))) (Let (SOME "c") (App Opapp ((Var (Short "read_byte")) (Var (Short " v3")))) (Let (SOME "u") (App Opapp ((App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "update"))) (Var (Short "arr")))) (Var (Short "i")))) (Var (Short "c")))) (Let (SOME " v4") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "c")))) (Var (Short "nl")))) (If (Var (Short " v4")) (Let (SOME " v5") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "i")))) (Lit 1))) (Let (SOME " v6") (App Opapp ((App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "substring"))) (Var (Short "arr")))) (Lit 0))) (Var (Short " v5")))) (Con (SOME (Short "Some")) ((Var (Short " v6")))))) (Let (SOME " v7") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "i")))) (Lit 1))) (App Opapp ((App Opapp ((Var (Short "inputLine_aux")) (Var (Short "arr")))) (Var (Short " v7")))))))))) (((Pcon (SOME (Short "EndOfFile")) nil) Let (SOME " v8") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "i")))) (Lit 0))) (If (Var (Short " v8")) (Con (SOME (Short "None")) nil) (Let NONE (App Opapp ((App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "update"))) (Var (Short "arr")))) (Var (Short "i")))) (Var (Short "nl")))) (Let (SOME " v9") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "i")))) (Lit 1))) (Let (SOME " v10") (App Opapp ((App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "substring"))) (Var (Short "arr")))) (Lit 0))) (Var (Short " v9")))) (Con (SOME (Short "Some")) ((Var (Short " v10"))))))))))) (Let (SOME " v11") (App Opapp ((Var (Short "extend_array")) (Var (Short "arr")))) (App Opapp ((App Opapp ((Var (Short "inputLine_aux")) (Var (Short " v11")))) (Var (Short "i")))))))))) (Let (SOME " v12") (App Opapp ((Var (Long "Word8" (Short "fromInt"))) (Lit 0))) (Let (SOME " v13") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "array"))) (Lit 127))) (Var (Short " v12")))) (App Opapp ((App Opapp ((Var (Short "inputLine_aux")) (Var (Short " v13")))) (Lit 0)))))))))) (Dletrec ((1 2) (4 33)) (("inputLines" "fd" Let (SOME " v0") (App Opapp ((Var (Short "inputLine")) (Var (Short "fd")))) (Mat (Var (Short " v0")) (((Pcon (SOME (Short "None")) nil) Con (SOME (Short "[]")) nil) ((Pcon (SOME (Short "Some")) ("l")) Let (SOME " v1") (App Opapp ((Var (Short "inputLines")) (Var (Short "fd")))) (Con (SOME (Short "::")) ((Var (Short "l")) (Var (Short " v1")))))))))) (Dletrec ((1 2) (7 33)) (("inputLinesFrom" "fname" Handle (Let (SOME "fd") (App Opapp ((Var (Short "openIn")) (Var (Short "fname")))) (Let (SOME "lines") (App Opapp ((Var (Short "inputLines")) (Var (Short "fd")))) (Let NONE (App Opapp ((Var (Short "closeIn")) (Var (Short "fd")))) (Con (SOME (Short "Some")) ((Var (Short "lines"))))))) (((Pcon (SOME (Short "BadFileName")) nil) Con (SOME (Short "None")) nil))))) (Dletrec ((1 2) (14 67)) (("inputAll" "fd" Letrec (("inputAll_aux" "arr" Fun "i" (Let (SOME "len") (App Opapp ((Var (Long "Word8Array" (Short "length"))) (Var (Short "arr")))) (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Short "<")) (Var (Short "i")))) (Var (Short "len")))) (If (Var (Short " v0")) (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "-")) (Var (Short "len")))) (Var (Short "i")))) (Let (SOME "n") (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "input")) (Var (Short "fd")))) (Var (Short "arr")))) (Var (Short "i")))) (Var (Short " v1")))) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "n")))) (Lit 0))) (If (Var (Short " v2")) (App Opapp ((App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "substring"))) (Var (Short "arr")))) (Lit 0))) (Var (Short "i")))) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "i")))) (Var (Short "n")))) (App Opapp ((App Opapp ((Var (Short "inputAll_aux")) (Var (Short "arr")))) (Var (Short " v3"))))))))) (Let (SOME " v4") (App Opapp ((Var (Short "extend_array")) (Var (Short "arr")))) (App Opapp ((App Opapp ((Var (Short "inputAll_aux")) (Var (Short " v4")))) (Var (Short "i")))))))))) (Let (SOME " v5") (App Opapp ((Var (Long "Word8" (Short "fromInt"))) (Lit 0))) (Let (SOME " v6") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "array"))) (Lit 127))) (Var (Short " v5")))) (App Opapp ((App Opapp ((Var (Short "inputAll_aux")) (Var (Short " v6")))) (Lit 0)))))))) (Dletrec ((1 4) (4 6)) (("copy" "inp" Fun "out" (Let (SOME " v0") (App Opapp ((Var (Short "get_in")) (Var (Short "inp")))) (Let (SOME "nr") (App Opapp ((App Opapp ((Var (Short "read")) (Var (Short " v0")))) (Lit 2048))) (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "nr")))) (Lit 0))) (If (Var (Short " v1")) (Con NONE nil) (Let (SOME " v2") (App Opapp ((Var (Short "get_out")) (Var (Short "out")))) (Let NONE (App Opapp ((App Opapp ((App Opapp ((Var (Short "write")) (Var (Short " v2")))) (Var (Short "nr")))) (Lit 0))) (App Opapp ((App Opapp ((Var (Short "copy")) (Var (Short "inp")))) (Var (Short "out"))))))))))))) (Dletrec ((1 0) (4 28)) (("b_openStdInSetBufferSize" "bsize" Let (SOME " v5") (App Opapp ((Var (Long "Word8" (Short "fromInt"))) (Lit 48))) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "bsize")))) (Lit 4))) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Short "max")) (Var (Short " v2")))) (Lit 1028))) (Let (SOME " v4") (App Opapp ((App Opapp ((Var (Short "min")) (Lit 65535))) (Var (Short " v3")))) (Let (SOME " v6") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "array"))) (Var (Short " v4")))) (Var (Short " v5")))) (Let (SOME " v1") (App Opref ((Lit 4))) (Let (SOME " v0") (App Opref ((Lit 4))) (Con (SOME (Short "InstreamBuffered")) ((Var (Short "stdIn")) (Var (Short " v0")) (Var (Short " v1")) (Var (Short " v6"))))))))))))) (Dletrec ((1 0) (1 49)) (("b_openStdIn" "" Mat (Var (Short "")) (((Pcon NONE nil) App Opapp ((Var (Short "b_openStdInSetBufferSize")) (Lit 4096))))))) (Dletrec ((1 0) (8 4)) (("b_openInSetBufferSize" "fname" Fun "bsize" (Let (SOME "is") (App Opapp ((Var (Short "openIn")) (Var (Short "fname")))) (Let (SOME " v5") (App Opapp ((Var (Long "Word8" (Short "fromInt"))) (Lit 48))) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "bsize")))) (Lit 4))) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Short "max")) (Var (Short " v2")))) (Lit 1028))) (Let (SOME " v4") (App Opapp ((App Opapp ((Var (Short "min")) (Lit 65535))) (Var (Short " v3")))) (Let (SOME " v6") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "array"))) (Var (Short " v4")))) (Var (Short " v5")))) (Let (SOME " v1") (App Opref ((Lit 4))) (Let (SOME " v0") (App Opref ((Lit 4))) (Con (SOME (Short "InstreamBuffered")) ((Var (Short "is")) (Var (Short " v0")) (Var (Short " v1")) (Var (Short " v6"))))))))))))))) (Dletrec ((1 0) (1 52)) (("b_openIn" "fname" App Opapp ((App Opapp ((Var (Short "b_openInSetBufferSize")) (Var (Short "fname")))) (Lit 4096))))) (Dletrec ((1 2) (3 15)) (("b_closeIn" "is" Mat (Var (Short "is")) (((Pcon (SOME (Short "InstreamBuffered")) ("fd" "rref" "wref" "surplus")) App Opapp ((Var (Short "closeIn")) (Var (Short "fd")))))))) (Dlocal ((Dletrec ((1 2) (9 8)) (("b_input_aux" "is" Fun "buff" (Fun "off" (Fun "len" (Mat (Var (Short "is")) (((Pcon (SOME (Short "InstreamBuffered")) ("fd" "rref" "wref" "surplus")) Let (SOME "readat") (App Opapp ((Var (Short "!")) (Var (Short "rref")))) (Let NONE (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "copy"))) (Var (Short "surplus")))) (Var (Short "readat")))) (Var (Short "len")))) (Var (Short "buff")))) (Var (Short "off")))) (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "readat")))) (Var (Short "len")))) (Let NONE (App Opapp ((App Opapp ((Var (Short ":=")) (Var (Short "rref")))) (Var (Short " v0")))) (Var (Short "len")))))))))))))) ((Dletrec ((1 1) (22 7)) (("b_input" "is" Fun "buff" (Fun "off" (Fun "len" (Mat (Var (Short "is")) (((Pcon (SOME (Short "InstreamBuffered")) ("fd" "rref" "wref" "surplus")) Let (SOME " v1") (App Opapp ((Var (Short "!")) (Var (Short "rref")))) (Let (SOME " v0") (App Opapp ((Var (Short "!")) (Var (Short "wref")))) (Let (SOME "nBuffered") (App Opapp ((App Opapp ((Var (Short "-")) (Var (Short " v0")))) (Var (Short " v1")))) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "len")))) (Var (Short "off")))) (Let (SOME " v2") (App Opapp ((Var (Long "Word8Array" (Short "length"))) (Var (Short "buff")))) (Let (SOME " v4") (App Opapp ((App Opapp ((Var (Short "<")) (Var (Short " v2")))) (Var (Short " v3")))) (If (Var (Short " v4")) (Let (SOME " v5") (Con (SOME (Short "IllegalArgument")) nil) (Raise (Var (Short " v5")))) (Let (SOME " v6") (App Opapp ((Var (Long "Word8Array" (Short "length"))) (Var (Short "surplus")))) (Let (SOME " v7") (App Opapp ((App Opapp ((Var (Short "-")) (Var (Short " v6")))) (Lit 4))) (Let (SOME " v8") (App Opapp ((App Opapp ((Var (Short "<")) (Var (Short " v7")))) (Var (Short "len")))) (If (Var (Short " v8")) (Let NONE (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "b_input_aux")) (Var (Short "is")))) (Var (Short "buff")))) (Var (Short "off")))) (Var (Short "nBuffered")))) (Let (SOME " v10") (App Opapp ((App Opapp ((Var (Short "-")) (Var (Short "len")))) (Var (Short "nBuffered")))) (Let (SOME " v9") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "off")))) (Var (Short "nBuffered")))) (Let (SOME " v11") (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "input")) (Var (Short "fd")))) (Var (Short "buff")))) (Var (Short " v9")))) (Var (Short " v10")))) (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short " v11")))) (Var (Short "nBuffered")))))))) (Let (SOME " v12") (App Opapp ((App Opapp ((Var (Short ">")) (Var (Short "len")))) (Var (Short "nBuffered")))) (If (Var (Short " v12")) (Let NONE (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "b_input_aux")) (Var (Short "is")))) (Var (Short "buff")))) (Var (Short "off")))) (Var (Short "nBuffered")))) (Let (SOME " v13") (App Opapp ((Var (Long "Word8Array" (Short "length"))) (Var (Short "surplus")))) (Let (SOME " v14") (App Opapp ((App Opapp ((Var (Short "-")) (Var (Short " v13")))) (Lit 4))) (Let (SOME " v15") (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "input")) (Var (Short "fd")))) (Var (Short "surplus")))) (Lit 4))) (Var (Short " v14")))) (Let (SOME " v16") (App Opapp ((App Opapp ((Var (Short "+")) (Lit 4))) (Var (Short " v15")))) (Let NONE (App Opapp ((App Opapp ((Var (Short ":=")) (Var (Short "wref")))) (Var (Short " v16")))) (Let NONE (App Opapp ((App Opapp ((Var (Short ":=")) (Var (Short "rref")))) (Lit 4))) (Let (SOME " v20") (App Opapp ((App Opapp ((Var (Short "-")) (Var (Short "len")))) (Var (Short "nBuffered")))) (Let (SOME " v18") (App Opapp ((Var (Short "!")) (Var (Short "wref")))) (Let (SOME " v19") (App Opapp ((App Opapp ((Var (Short "-")) (Var (Short " v18")))) (Lit 4))) (Let (SOME " v21") (App Opapp ((App Opapp ((Var (Short "min")) (Var (Short " v19")))) (Var (Short " v20")))) (Let (SOME " v17") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "off")))) (Var (Short "nBuffered")))) (Let (SOME " v22") (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "b_input_aux")) (Var (Short "is")))) (Var (Short "buff")))) (Var (Short " v17")))) (Var (Short " v21")))) (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short " v22")))) (Var (Short "nBuffered"))))))))))))))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "b_input_aux")) (Var (Short "is")))) (Var (Short "buff")))) (Var (Short "off")))) (Var (Short "len")))))))))))))))))))))))) (Dlocal ((Dletrec ((1 2) (7 6)) (("read_into" "fd" Fun "buff" (Fun "n" (Let (SOME "a") (App Opapp ((App Opapp ((App Opapp ((Var (Long "Marshalling" (Short "n2w2"))) (Var (Short "n")))) (Var (Short "buff")))) (Lit 0))) (Let NONE (App (FFI . "read") ((Var (Short "fd")) (Var (Short "buff")))) (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "sub"))) (Var (Short "buff")))) (Lit 0))) (Let (SOME " v1") (App Opapp ((Var (Long "Word8" (Short "toInt"))) (Var (Short " v0")))) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "<>")) (Var (Short " v1")))) (Lit 1))) (If (Var (Short " v2")) (App Opapp ((App Opapp ((Var (Long "Marshalling" (Short "w22n"))) (Var (Short "buff")))) (Lit 1))) (Let (SOME " v3") (Con (SOME (Short "InvalidFD")) nil) (Raise (Var (Short " v3"))))))))))))))) ((Dlocal ((Dletrec ((1 1) (5 18)) (("b_refillBuffer_with_read" "is" Mat (Var (Short "is")) (((Pcon (SOME (Short "InstreamBuffered")) ("fd" "rref" "wref" "surplus")) Let (SOME " v1") (App Opapp ((Var (Long "Word8Array" (Short "length"))) (Var (Short "surplus")))) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "-")) (Var (Short " v1")))) (Lit 4))) (Let (SOME " v0") (App Opapp ((Var (Short "get_in")) (Var (Short "fd")))) (Let (SOME " v3") (App Opapp ((App Opapp ((App Opapp ((Var (Short "read_into")) (Var (Short " v0")))) (Var (Short "surplus")))) (Var (Short " v2")))) (Let (SOME " v4") (App Opapp ((App Opapp ((Var (Short "+")) (Lit 4))) (Var (Short " v3")))) (Let NONE (App Opapp ((App Opapp ((Var (Short ":=")) (Var (Short "wref")))) (Var (Short " v4")))) (Let NONE (App Opapp ((App Opapp ((Var (Short ":=")) (Var (Short "rref")))) (Lit 4))) (Let (SOME " v5") (App Opapp ((Var (Short "!")) (Var (Short "wref")))) (App Opapp ((App Opapp ((Var (Short "-")) (Var (Short " v5")))) (Lit 4))))))))))))))) (Dletrec ((1 1) (7 14)) (("b_peekChar_aux" "is" Mat (Var (Short "is")) (((Pcon (SOME (Short "InstreamBuffered")) ("fd" "rref" "wref" "surplus")) Let (SOME " v1") (App Opapp ((Var (Short "!")) (Var (Short "rref")))) (Let (SOME " v0") (App Opapp ((Var (Short "!")) (Var (Short "wref")))) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short " v0")))) (Var (Short " v1")))) (If (Var (Short " v2")) (Con (SOME (Short "None")) nil) (Let (SOME "readat") (App Opapp ((Var (Short "!")) (Var (Short "rref")))) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "sub"))) (Var (Short "surplus")))) (Var (Short "readat")))) (Let (SOME " v4") (App Opapp ((Var (Long "Char" (Short "fromByte"))) (Var (Short " v3")))) (App Opapp ((Var (Long "Char" (Short "some"))) (Var (Short " v4"))))))))))))))) (Dletrec ((1 1) (8 12)) (("b_input1_aux" "is" Mat (Var (Short "is")) (((Pcon (SOME (Short "InstreamBuffered")) ("fd" "rref" "wref" "surplus")) Let (SOME "readat") (App Opapp ((Var (Short "!")) (Var (Short "rref")))) (Let (SOME " v0") (App Opapp ((Var (Short "!")) (Var (Short "wref")))) (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short " v0")))) (Var (Short "readat")))) (If (Var (Short " v1")) (Con (SOME (Short "None")) nil) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "readat")))) (Lit 1))) (Let NONE (App Opapp ((App Opapp ((Var (Short ":=")) (Var (Short "rref")))) (Var (Short " v2")))) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "sub"))) (Var (Short "surplus")))) (Var (Short "readat")))) (Let (SOME " v4") (App Opapp ((Var (Long "Char" (Short "fromByte"))) (Var (Short " v3")))) (App Opapp ((Var (Long "Char" (Short "some"))) (Var (Short " v4"))))))))))))))))) ((Dletrec ((1 2) (5 29)) (("b_peekChar" "is" Mat (Var (Short "is")) (((Pcon (SOME (Short "InstreamBuffered")) ("fd" "rref" "wref" "surplus")) Let (SOME " v1") (App Opapp ((Var (Short "!")) (Var (Short "rref")))) (Let (SOME " v0") (App Opapp ((Var (Short "!")) (Var (Short "wref")))) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short " v0")))) (Var (Short " v1")))) (If (Var (Short " v2")) (Let NONE (App Opapp ((Var (Short "b_refillBuffer_with_read")) (Var (Short "is")))) (App Opapp ((Var (Short "b_peekChar_aux")) (Var (Short "is"))))) (App Opapp ((Var (Short "b_peekChar_aux")) (Var (Short "is")))))))))))) (Dletrec ((1 2) (5 27)) (("b_input1" "is" Mat (Var (Short "is")) (((Pcon (SOME (Short "InstreamBuffered")) ("fd" "rref" "wref" "surplus")) Let (SOME " v1") (App Opapp ((Var (Short "!")) (Var (Short "rref")))) (Let (SOME " v0") (App Opapp ((Var (Short "!")) (Var (Short "wref")))) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short " v0")))) (Var (Short " v1")))) (If (Var (Short " v2")) (Let NONE (App Opapp ((Var (Short "b_refillBuffer_with_read")) (Var (Short "is")))) (App Opapp ((Var (Short "b_input1_aux")) (Var (Short "is"))))) (App Opapp ((Var (Short "b_input1_aux")) (Var (Short "is")))))))))))) (Dlocal ((Dletrec ((1 2) (4 15)) (("b_inputUntil_aux" "is" Fun "" (Mat (Var (Short "")) (("chr" Let (SOME " v0") (App Opapp ((Var (Short "b_input1")) (Var (Short "is")))) (Mat (Var (Short " v0")) (((Pcon (SOME (Short "Some")) ("c")) Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "<>")) (Var (Short "c")))) (Var (Short "chr")))) (If (Var (Short " v1")) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "b_inputUntil_aux")) (Var (Short "is")))) (Var (Short "chr")))) (Con (SOME (Short "::")) ((Var (Short "c")) (Var (Short " v2"))))) (Let (SOME " v3") (Con (SOME (Short "[]")) nil) (Con (SOME (Short "::")) ((Var (Short "c")) (Var (Short " v3"))))))) ((Pcon (SOME (Short "None")) nil) Con (SOME (Short "[]")) nil))))))))) (Dlet (unk unk) "compress" (Fun "v1" (App Implode ((App Opapp ((Var (Long "List" (Short "rev"))) (Var (Short "v1")))))))) (Dletrec ((1 2) (12 56)) (("b_inputLine_aux" "is" Fun "k" (Fun "chrs" (Fun "strs" (Let (SOME " v0") (App Opapp ((Var (Short "b_input1")) (Var (Short "is")))) (Mat (Var (Short " v0")) (((Pcon (SOME (Short "None")) nil) Let (SOME " v1") (App Opapp ((Var (Long "List" (Short "null"))) (Var (Short "chrs")))) (Let (SOME " v3") (Log And (Var (Short " v1")) (App Opapp ((Var (Long "List" (Short "null"))) (Var (Short "strs"))))) (If (Var (Short " v3")) (Con (SOME (Short "None")) nil) (Let (SOME " v4") (Con (SOME (Short "::")) ((Lit (char "\\0A")) (Var (Short "chrs")))) (Let (SOME " v5") (App Opapp ((Var (Short "compress")) (Var (Short " v4")))) (Let (SOME " v6") (Con (SOME (Short "::")) ((Var (Short " v5")) (Var (Short "strs")))) (Let (SOME " v7") (App Opapp ((Var (Long "List" (Short "rev"))) (Var (Short " v6")))) (Let (SOME " v8") (App Opapp ((Var (Long "String" (Short "concat"))) (Var (Short " v7")))) (Con (SOME (Short "Some")) ((Var (Short " v8")))))))))))) ((Pcon (SOME (Short "Some")) ("c")) Let (SOME " v9") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "c")))) (Lit (char "\\0A")))) (If (Var (Short " v9")) (Let (SOME " v10") (Con (SOME (Short "::")) ((Var (Short "c")) (Var (Short "chrs")))) (Let (SOME " v11") (App Opapp ((Var (Short "compress")) (Var (Short " v10")))) (Let (SOME " v12") (Con (SOME (Short "::")) ((Var (Short " v11")) (Var (Short "strs")))) (Let (SOME " v13") (App Opapp ((Var (Long "List" (Short "rev"))) (Var (Short " v12")))) (Let (SOME " v14") (App Opapp ((Var (Long "String" (Short "concat"))) (Var (Short " v13")))) (Con (SOME (Short "Some")) ((Var (Short " v14"))))))))) (Let (SOME " v15") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "k")))) (Lit 0))) (If (Var (Short " v15")) (Let (SOME " v17") (Con (SOME (Short "::")) ((Var (Short "c")) (Var (Short "chrs")))) (Let (SOME " v18") (App Opapp ((Var (Short "compress")) (Var (Short " v17")))) (Let (SOME " v19") (Con (SOME (Short "::")) ((Var (Short " v18")) (Var (Short "strs")))) (Let (SOME " v16") (Con (SOME (Short "[]")) nil) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "b_inputLine_aux")) (Var (Short "is")))) (Lit 500))) (Var (Short " v16")))) (Var (Short " v19")))))))) (Let (SOME " v21") (Con (SOME (Short "::")) ((Var (Short "c")) (Var (Short "chrs")))) (Let (SOME " v20") (App Opapp ((App Opapp ((Var (Short "-")) (Var (Short "k")))) (Lit 1))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "b_inputLine_aux")) (Var (Short "is")))) (Var (Short " v20")))) (Var (Short " v21")))) (Var (Short "strs")))))))))))))))))) (Dlet (unk unk) "some_compress" (Fun "v3" (Fun "v4" (Fun "v2" (Fun "v1" (If (Var (Short "v4")) (Con (SOME (Short "None")) nil) (Con (SOME (Short "Some")) ((App Opapp ((Var (Long "List" (Short "rev"))) (If (App Opapp ((Var (Long "List" (Short "null"))) (Var (Short "v2")))) (Var (Short "v1")) (Con (SOME (Short "::")) ((App Opapp ((Var (Short "v3")) (App Opapp ((Var (Short "compress")) (Var (Short "v2")))))) (Var (Short "v1"))))))))))))))) (Dletrec ((1 2) (11 65)) (("b_inputLineTokens_aux" "is" Fun "f" (Fun "g" (Fun "is_emp" (Fun "chrs" (Fun "acc" (Let (SOME " v0") (App Opapp ((Var (Short "b_input1")) (Var (Short "is")))) (Mat (Var (Short " v0")) (((Pcon (SOME (Short "None")) nil) App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "some_compress")) (Var (Short "g")))) (Var (Short "is_emp")))) (Var (Short "chrs")))) (Var (Short "acc")))) ((Pcon (SOME (Short "Some")) ("c")) Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "c")))) (Lit (char "\\0A")))) (If (Var (Short " v1")) (Let (SOME " v2") (Con (SOME (Short "False")) nil) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "some_compress")) (Var (Short "g")))) (Var (Short " v2")))) (Var (Short "chrs")))) (Var (Short "acc"))))) (Let (SOME " v3") (App Opapp ((Var (Short "f")) (Var (Short "c")))) (If (Var (Short " v3")) (Let (SOME " v4") (App Opapp ((Var (Long "List" (Short "null"))) (Var (Short "chrs")))) (If (Var (Short " v4")) (Let (SOME " v6") (Con (SOME (Short "[]")) nil) (Let (SOME " v5") (Con (SOME (Short "False")) nil) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "b_inputLineTokens_aux")) (Var (Short "is")))) (Var (Short "f")))) (Var (Short "g")))) (Var (Short " v5")))) (Var (Short " v6")))) (Var (Short "acc")))))) (Let (SOME " v9") (App Opapp ((Var (Short "compress")) (Var (Short "chrs")))) (Let (SOME " v10") (App Opapp ((Var (Short "g")) (Var (Short " v9")))) (Let (SOME " v11") (Con (SOME (Short "::")) ((Var (Short " v10")) (Var (Short "acc")))) (Let (SOME " v8") (Con (SOME (Short "[]")) nil) (Let (SOME " v7") (Con (SOME (Short "False")) nil) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "b_inputLineTokens_aux")) (Var (Short "is")))) (Var (Short "f")))) (Var (Short "g")))) (Var (Short " v7")))) (Var (Short " v8")))) (Var (Short " v11"))))))))))) (Let (SOME " v13") (Con (SOME (Short "::")) ((Var (Short "c")) (Var (Short "chrs")))) (Let (SOME " v12") (Con (SOME (Short "False")) nil) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "b_inputLineTokens_aux")) (Var (Short "is")))) (Var (Short "f")))) (Var (Short "g")))) (Var (Short " v12")))) (Var (Short " v13")))) (Var (Short "acc"))))))))))))))))))))) ((Dletrec ((1 2) (1 67)) (("b_inputUntil" "is" Fun "chr" (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Short "b_inputUntil_aux")) (Var (Short "is")))) (Var (Short "chr")))) (App Opapp ((Var (Long "String" (Short "implode"))) (Var (Short " v0")))))))) (Dletrec ((1 2) (1 50)) (("b_inputLine" "is" Let (SOME " v1") (Con (SOME (Short "[]")) nil) (Let (SOME " v0") (Con (SOME (Short "[]")) nil) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "b_inputLine_aux")) (Var (Short "is")))) (Lit 500))) (Var (Short " v0")))) (Var (Short " v1")))))))) (Dletrec ((1 2) (1 71)) (("b_inputLineTokens" "is" Fun "f" (Fun "g" (Let (SOME " v2") (Con (SOME (Short "[]")) nil) (Let (SOME " v1") (Con (SOME (Short "[]")) nil) (Let (SOME " v0") (Con (SOME (Short "True")) nil) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "b_inputLineTokens_aux")) (Var (Short "is")))) (Var (Short "f")))) (Var (Short "g")))) (Var (Short " v0")))) (Var (Short " v1")))) (Var (Short " v2"))))))))))) (Dlocal ((Dletrec ((1 2) (4 44)) (("b_inputLines_aux" "is" Fun "acc" (Let (SOME " v0") (App Opapp ((Var (Short "b_inputLine")) (Var (Short "is")))) (Mat (Var (Short " v0")) (((Pcon (SOME (Short "None")) nil) App Opapp ((Var (Long "List" (Short "rev"))) (Var (Short "acc")))) ((Pcon (SOME (Short "Some")) ("l")) Let (SOME " v1") (Con (SOME (Short "::")) ((Var (Short "l")) (Var (Short "acc")))) (App Opapp ((App Opapp ((Var (Short "b_inputLines_aux")) (Var (Short "is")))) (Var (Short " v1"))))))))))) (Dletrec ((1 2) (4 52)) (("b_inputAllTokens_aux" "is" Fun "f" (Fun "g" (Fun "acc" (Let (SOME " v0") (App Opapp ((App Opapp ((App Opapp ((Var (Short "b_inputLineTokens")) (Var (Short "is")))) (Var (Short "f")))) (Var (Short "g")))) (Mat (Var (Short " v0")) (((Pcon (SOME (Short "None")) nil) App Opapp ((Var (Long "List" (Short "rev"))) (Var (Short "acc")))) ((Pcon (SOME (Short "Some")) ("l")) Let (SOME " v1") (Con (SOME (Short "::")) ((Var (Short "l")) (Var (Short "acc")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "b_inputAllTokens_aux")) (Var (Short "is")))) (Var (Short "f")))) (Var (Short "g")))) (Var (Short " v1"))))))))))))) (Dletrec ((1 2) (4 32)) (("b_consume_rest" "is" Let (SOME " v0") (App Opapp ((Var (Short "b_input1")) (Var (Short "is")))) (Mat (Var (Short " v0")) (((Pcon (SOME (Short "None")) nil) Con NONE nil) ((Pcon (SOME (Short "Some")) ("c")) App Opapp ((Var (Short "b_consume_rest")) (Var (Short "is"))))))))) (Dletrec ((1 2) (10 47)) (("b_open_option" "stdin_or_fname" Mat (Var (Short "stdin_or_fname")) (((Pcon (SOME (Short "None")) nil) Let (SOME " v0") (Con NONE nil) (Let (SOME "is") (App Opapp ((Var (Short "b_openStdIn")) (Var (Short " v0")))) (Let (SOME " v1") (Fun "" (Mat (Var (Short "")) (((Pcon NONE nil) App Opapp ((Var (Short "b_consume_rest")) (Var (Short "is"))))))) (Let (SOME " v2") (Con NONE ((Var (Short "is")) (Var (Short " v1")))) (Con (SOME (Short "Some")) ((Var (Short " v2")))))))) ((Pcon (SOME (Short "Some")) ("fname")) Handle (Let (SOME "is") (App Opapp ((Var (Short "b_openIn")) (Var (Short "fname")))) (Let (SOME " v3") (Fun "" (Mat (Var (Short "")) (((Pcon NONE nil) App Opapp ((Var (Short "b_closeIn")) (Var (Short "is"))))))) (Let (SOME " v4") (Con NONE ((Var (Short "is")) (Var (Short " v3")))) (Con (SOME (Short "Some")) ((Var (Short " v4"))))))) (((Pcon (SOME (Short "BadFileName")) nil) Con (SOME (Short "None")) nil))))))) (Dletrec ((1 2) (4 43)) (("fold_chars_loop" "f" Fun "is" (Fun "y" (Let (SOME " v0") (App Opapp ((Var (Short "b_input1")) (Var (Short "is")))) (Mat (Var (Short " v0")) (((Pcon (SOME (Short "None")) nil) Var (Short "y")) ((Pcon (SOME (Short "Some")) ("c")) Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "f")) (Var (Short "c")))) (Var (Short "y")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "fold_chars_loop")) (Var (Short "f")))) (Var (Short "is")))) (Var (Short " v1")))))))))))) (Dletrec ((5 2) (8 43)) (("fold_lines_loop" "f" Fun "is" (Fun "y" (Let (SOME " v0") (App Opapp ((Var (Short "b_inputLine")) (Var (Short "is")))) (Mat (Var (Short " v0")) (((Pcon (SOME (Short "None")) nil) Var (Short "y")) ((Pcon (SOME (Short "Some")) ("c")) Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "f")) (Var (Short "c")))) (Var (Short "y")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "fold_lines_loop")) (Var (Short "f")))) (Var (Short "is")))) (Var (Short " v1")))))))))))) (Dletrec ((9 2) (12 48)) (("fold_tokens_loop" "g" Fun "h" (Fun "f" (Fun "is" (Fun "y" (Let (SOME " v0") (App Opapp ((App Opapp ((App Opapp ((Var (Short "b_inputLineTokens")) (Var (Short "is")))) (Var (Short "g")))) (Var (Short "h")))) (Mat (Var (Short " v0")) (((Pcon (SOME (Short "None")) nil) Var (Short "y")) ((Pcon (SOME (Short "Some")) ("c")) Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "f")) (Var (Short "c")))) (Var (Short "y")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "fold_tokens_loop")) (Var (Short "g")))) (Var (Short "h")))) (Var (Short "f")))) (Var (Short "is")))) (Var (Short " v1"))))))))))))))) ((Dletrec ((1 2) (2 25)) (("b_inputLines" "is" Let (SOME " v0") (Con (SOME (Short "[]")) nil) (App Opapp ((App Opapp ((Var (Short "b_inputLines_aux")) (Var (Short "is")))) (Var (Short " v0"))))))) (Dletrec ((1 2) (7 33)) (("b_inputLinesFrom" "fname" Handle (Let (SOME "is") (App Opapp ((Var (Short "b_openIn")) (Var (Short "fname")))) (Let (SOME "lines") (App Opapp ((Var (Short "b_inputLines")) (Var (Short "is")))) (Let NONE (App Opapp ((Var (Short "b_closeIn")) (Var (Short "is")))) (Con (SOME (Short "Some")) ((Var (Short "lines"))))))) (((Pcon (SOME (Short "BadFileName")) nil) Con (SOME (Short "None")) nil))))) (Dletrec ((1 2) (6 6)) (("b_inputLinesStdIn" "" Mat (Var (Short "")) (((Pcon NONE nil) Let (SOME " v0") (Con NONE nil) (Let (SOME "is") (App Opapp ((Var (Short "b_openStdIn")) (Var (Short " v0")))) (App Opapp ((Var (Short "b_inputLines")) (Var (Short "is")))))))))) (Dletrec ((1 2) (2 33)) (("b_inputAllTokens" "is" Fun "f" (Fun "g" (Let (SOME " v0") (Con (SOME (Short "[]")) nil) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "b_inputAllTokens_aux")) (Var (Short "is")))) (Var (Short "f")))) (Var (Short "g")))) (Var (Short " v0"))))))))) (Dletrec ((1 2) (7 33)) (("b_inputAllTokensFrom" "fname" Fun "f" (Fun "g" (Handle (Let (SOME "is") (App Opapp ((Var (Short "b_openIn")) (Var (Short "fname")))) (Let (SOME "lines") (App Opapp ((App Opapp ((App Opapp ((Var (Short "b_inputAllTokens")) (Var (Short "is")))) (Var (Short "f")))) (Var (Short "g")))) (Let NONE (App Opapp ((Var (Short "b_closeIn")) (Var (Short "is")))) (Con (SOME (Short "Some")) ((Var (Short "lines"))))))) (((Pcon (SOME (Short "BadFileName")) nil) Con (SOME (Short "None")) nil))))))) (Dletrec ((1 2) (7 6)) (("b_inputAllTokensStdIn" "f" Fun "g" (Let (SOME " v0") (Con NONE nil) (Let (SOME "is") (App Opapp ((Var (Short "b_openStdIn")) (Var (Short " v0")))) (Let (SOME "lines") (App Opapp ((App Opapp ((App Opapp ((Var (Short "b_inputAllTokens")) (Var (Short "is")))) (Var (Short "f")))) (Var (Short "g")))) (Con (SOME (Short "Some")) ((Var (Short "lines")))))))))) (Dletrec ((1 2) (9 38)) (("foldChars" "f" Fun "x" (Fun "stdin_or_fname" (Let (SOME " v0") (App Opapp ((Var (Short "b_open_option")) (Var (Short "stdin_or_fname")))) (Mat (Var (Short " v0")) (((Pcon (SOME (Short "None")) nil) Con (SOME (Short "None")) nil) ((Pcon (SOME (Short "Some")) ((Pcon NONE ("is" "close")))) Handle (Let (SOME "res") (App Opapp ((App Opapp ((App Opapp ((Var (Short "fold_chars_loop")) (Var (Short "f")))) (Var (Short "is")))) (Var (Short "x")))) (Let (SOME " v1") (Con NONE nil) (Let NONE (App Opapp ((Var (Short "close")) (Var (Short " v1")))) (Con (SOME (Short "Some")) ((Var (Short "res"))))))) (("e" Let (SOME " v2") (Con NONE nil) (Let NONE (App Opapp ((Var (Short "close")) (Var (Short " v2")))) (Raise (Var (Short "e")))))))))))))) (Dletrec ((1 2) (9 38)) (("foldLines" "f" Fun "x" (Fun "stdin_or_fname" (Let (SOME " v0") (App Opapp ((Var (Short "b_open_option")) (Var (Short "stdin_or_fname")))) (Mat (Var (Short " v0")) (((Pcon (SOME (Short "None")) nil) Con (SOME (Short "None")) nil) ((Pcon (SOME (Short "Some")) ((Pcon NONE ("is" "close")))) Handle (Let (SOME "res") (App Opapp ((App Opapp ((App Opapp ((Var (Short "fold_lines_loop")) (Var (Short "f")))) (Var (Short "is")))) (Var (Short "x")))) (Let (SOME " v1") (Con NONE nil) (Let NONE (App Opapp ((Var (Short "close")) (Var (Short " v1")))) (Con (SOME (Short "Some")) ((Var (Short "res"))))))) (("e" Let (SOME " v2") (Con NONE nil) (Let NONE (App Opapp ((Var (Short "close")) (Var (Short " v2")))) (Raise (Var (Short "e")))))))))))))) (Dletrec ((1 2) (9 38)) (("foldTokens" "g" Fun "h" (Fun "f" (Fun "x" (Fun "stdin_or_fname" (Let (SOME " v0") (App Opapp ((Var (Short "b_open_option")) (Var (Short "stdin_or_fname")))) (Mat (Var (Short " v0")) (((Pcon (SOME (Short "None")) nil) Con (SOME (Short "None")) nil) ((Pcon (SOME (Short "Some")) ((Pcon NONE ("is" "close")))) Handle (Let (SOME "res") (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "fold_tokens_loop")) (Var (Short "g")))) (Var (Short "h")))) (Var (Short "f")))) (Var (Short "is")))) (Var (Short "x")))) (Let (SOME " v1") (Con NONE nil) (Let NONE (App Opapp ((Var (Short "close")) (Var (Short " v1")))) (Con (SOME (Short "Some")) ((Var (Short "res"))))))) (("e" Let (SOME " v2") (Con NONE nil) (Let NONE (App Opapp ((Var (Short "close")) (Var (Short " v2")))) (Raise (Var (Short "e")))))))))))))))))))))))))))))))))))))) (Dlet (unk unk) "print" (Var (Long "TextIO" (Short "print")))) (Dlocal ((Dletrec (unk unk) (("sum_sizes" "v4" Fun "v3" (Mat (Var (Short "v4")) (((Pcon (SOME (Short "[]")) nil) Var (Short "v3")) ((Pcon (SOME (Short "::")) ("v2" "v1")) App Opapp ((App Opapp ((Var (Short "sum_sizes")) (Var (Short "v1")))) (App OpnPlus ((App Strlen ((Var (Short "v2")))) (Var (Short "v3"))))))))))) (Dtype (unk unk) ((("'a") "app_list_ann" ("Small" (Atapp ((Atvar "'a")) (Short "app_list"))) ("Bigappend" (Atapp ((Atvar "'a")) (Short "app_list_ann")) (Atapp ((Atvar "'a")) (Short "app_list_ann"))) ("Biglist" (Atapp ((Atvar "'a")) (Short "list")))))) (Dletrec (unk unk) (("make_app_list_ann" "v12" Mat (Var (Short "v12")) (((Pcon (SOME (Short "List")) ("v2")) Let (SOME "v1") (App Opapp ((App Opapp ((Var (Short "sum_sizes")) (Var (Short "v2")))) (Lit 0))) (If (App OpbLt ((Var (Short "v1")) (Lit 2048))) (Con NONE ((Con (SOME (Short "Small")) ((Var (Short "v12")))) (Var (Short "v1")))) (Con NONE ((Con (SOME (Short "Biglist")) ((Var (Short "v2")))) (Var (Short "v1")))))) ((Pcon (SOME (Short "Append")) ("v11" "v10")) Let (SOME "v9") (App Opapp ((Var (Short "make_app_list_ann")) (Var (Short "v11")))) (Mat (Var (Short "v9")) (((Pcon NONE ("v8" "v7")) Let (SOME "v6") (App Opapp ((Var (Short "make_app_list_ann")) (Var (Short "v10")))) (Mat (Var (Short "v6")) (((Pcon NONE ("v5" "v4")) Let (SOME "v3") (App OpnPlus ((Var (Short "v7")) (Var (Short "v4")))) (If (App OpbLt ((Var (Short "v3")) (Lit 2048))) (Con NONE ((Con (SOME (Short "Small")) ((Var (Short "v12")))) (Var (Short "v3")))) (Con NONE ((Con (SOME (Short "Bigappend")) ((Var (Short "v8")) (Var (Short "v5")))) (Var (Short "v3")))))))))))) ((Pcon (SOME (Short "Nil")) nil) Con NONE ((Con (SOME (Short "Small")) ((Var (Short "v12")))) (Lit 0))))))) (Dletrec (unk unk) (("shrink" "v5" Mat (Var (Short "v5")) (((Pcon (SOME (Short "Biglist")) ("v1")) Con (SOME (Short "List")) ((Var (Short "v1")))) ((Pcon (SOME (Short "Bigappend")) ("v3" "v2")) Con (SOME (Short "Append")) ((App Opapp ((Var (Short "shrink")) (Var (Short "v3")))) (App Opapp ((Var (Short "shrink")) (Var (Short "v2")))))) ((Pcon (SOME (Short "Small")) ("v4")) Con (SOME (Short "List")) ((Con (SOME (Short "::")) ((App Strcat ((App Opapp ((Var (Short "append")) (Var (Short "v4")))))) (Con (SOME (Short "[]")) nil))))))))) (Dlet (unk unk) "str_app_list_opt" (Fun "v4" (Let (SOME "v3") (App Opapp ((Var (Short "make_app_list_ann")) (Var (Short "v4")))) (Mat (Var (Short "v3")) (((Pcon NONE ("v2" "v1")) App Opapp ((Var (Short "shrink")) (Var (Short "v2"))))))))) (Dletrec ((1 2) (5 69)) (("print_app_list_aux" "ls" Mat (Var (Short "ls")) (((Pcon (SOME (Short "Nil")) nil) Con NONE nil) ((Pcon (SOME (Short "List")) ("ls")) App Opapp ((Var (Long "TextIO" (Short "print_list"))) (Var (Short "ls")))) ((Pcon (SOME (Short "Append")) ("l1" "l2")) Let NONE (App Opapp ((Var (Short "print_app_list_aux")) (Var (Short "l1")))) (App Opapp ((Var (Short "print_app_list_aux")) (Var (Short "l2")))))))))) ((Dletrec ((1 2) (1 65)) (("print_app_list" "ls" Let (SOME " v0") (App Opapp ((Var (Short "str_app_list_opt")) (Var (Short "ls")))) (App Opapp ((Var (Short "print_app_list_aux")) (Var (Short " v0"))))))))) (Dletrec ((0 14) (0 60)) (("print_int" "i" Let (SOME " v0") (App Opapp ((Var (Long "Int" (Short "toString"))) (Var (Short "i")))) (App Opapp ((Var (Long "TextIO" (Short "print"))) (Var (Short " v0"))))))) (Dletrec ((0 15) (0 75)) (("print_pp" "pp" Let (SOME " v0") (App Opapp ((Var (Long "PrettyPrinter" (Short "toAppList"))) (Var (Short "pp")))) (App Opapp ((Var (Short "print_app_list")) (Var (Short " v0"))))))) (Dmod "Set" ((Dtype ((2 4) unk) ((("'a") "set" ("Set" (Atapp ((Atvar "'a") (Atapp nil (Short "unit"))) (Short "map")))))) (Dletrec ((4 4) (4 46)) (("empty" "compare" Lannot (Con (SOME (Short "Set")) ((App Opapp ((Lannot (Var (Long "Map" (Short "empty"))) ((4 29) (4 37))) (Lannot (Var (Short "compare")) ((4 39) (4 45))))))) ((4 24) (4 45))))) (Dletrec ((6 4) (6 55)) (("insert" "" Mat (Var (Short "")) (((Pcon (SOME (Short "Set")) ("map")) Fun "el" (Lannot (Con (SOME (Short "Set")) ((App Opapp ((Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Map" (Short "insert"))) ((6 35) (6 44))) (Lannot (Var (Short "map")) ((6 46) (6 48))))) ((6 35) (6 48))) (Lannot (Var (Short "el")) ((6 50) (6 51))))) ((6 35) (6 51))) (Lannot (Con NONE nil) ((6 53) (6 54))))))) ((6 30) (6 54)))))))) (Dletrec ((8 4) (8 52)) (("delete" "" Mat (Var (Short "")) (((Pcon (SOME (Short "Set")) ("map")) Fun "el" (Lannot (Con (SOME (Short "Set")) ((App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Map" (Short "delete"))) ((8 35) (8 44))) (Lannot (Var (Short "map")) ((8 46) (8 48))))) ((8 35) (8 48))) (Lannot (Var (Short "el")) ((8 50) (8 51))))))) ((8 30) (8 51)))))))) (Dletrec ((10 4) (12 19)) (("mem" "" Mat (Var (Short "")) (((Pcon (SOME (Short "Set")) ("map")) Fun "el" (Lannot (Mat (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Map" (Short "lookup"))) ((10 33) (10 42))) (Lannot (Var (Short "map")) ((10 44) (10 46))))) ((10 33) (10 46))) (Lannot (Var (Short "el")) ((10 48) (10 49))))) ((10 33) (10 49))) (((Pcon (SOME (Short "None")) nil) Lannot (Con (SOME (Short "False")) nil) ((11 14) (11 18))) ((Pcon (SOME (Short "Some")) ((Pany))) Lannot (Con (SOME (Short "True")) nil) ((12 16) (12 19))))) ((10 27) (12 19)))))))) (Dletrec ((14 4) (14 71)) (("toList" "" Mat (Var (Short "")) (((Pcon (SOME (Short "Set")) ("map")) Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "List" (Short "map"))) ((14 27) (14 34))) (Lannot (Fun "" (Mat (Var (Short "")) (((Pcon NONE ("k" (Pany))) Lannot (Var (Short "k")) ((14 50) (14 50)))))) ((14 37) (14 50))))) ((14 27) (14 51))) (Lannot (App Opapp ((Lannot (Var (Long "Map" (Short "toAscList"))) ((14 54) (14 66))) (Lannot (Var (Short "map")) ((14 68) (14 70))))) ((14 54) (14 70))))) ((14 27) (14 71))))))) (Dletrec ((16 4) (16 91)) (("fromList" "compare" Fun "list" (Lannot (Con (SOME (Short "Set")) ((App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Map" (Short "fromList"))) ((16 37) (16 48))) (Lannot (Var (Short "compare")) ((16 50) (16 56))))) ((16 37) (16 56))) (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "List" (Short "map"))) ((16 59) (16 66))) (Lannot (Fun "k" (Lannot (Con NONE ((Lannot (Var (Short "k")) ((16 78) (16 78))) (Lannot (Con NONE nil) ((16 81) (16 82))))) ((16 77) (16 83)))) ((16 69) (16 83))))) ((16 59) (16 84))) (Lannot (Var (Short "list")) ((16 86) (16 89))))) ((16 59) (16 89))))))) ((16 32) (16 90)))))))))
