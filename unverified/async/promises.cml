
fun print_ln s = TextIO.print (s ^ "\n");

structure Set =
  struct
    datatype 'a set = Set (('a, unit) map);

    fun empty compare = Set (Map.empty compare);

    fun insert (Set map) el = Set (Map.insert map el ());

    fun delete (Set map) el = Set (Map.delete map el);

    fun mem (Set map) el = case (Map.lookup map el) of
      None => False
    | Some _ => True;

    fun toList (Set map) = List.map (fn (k, _) => k) (Map.toAscList map);

    fun fromList compare list = Set (Map.fromList compare (List.map (fn k => (k, ())) list));
  end;

structure Promise =
  struct
    datatype 'a state = Pending (('a -> unit) list) | Resolved ('a);
    type 'a t = 'a state ref;
    type 'a u = 'a -> unit;

    fun return value = Ref (Resolved value);

    fun upon t f = case !t of
      Resolved value => f value
    | Pending callbacks => t := Pending (f :: callbacks);

    fun poll t = case !t of
      Resolved v => Some v
    | Pending _ => None;

    local
      exception Resolve string

      fun resolve t value = case !t of
        Resolved _ => raise Resolve "Promise.resolve: already resolved"
      | Pending callbacks => (
          t := Resolved value;
          List.app (fn f => f value) callbacks
        );

      fun chain t t' = upon t (resolve t');
    in
      fun wait () =
        let
          val t = Ref (Pending [])
          val u = resolve t
        in
          (t, u)
        end;

      fun bind t f = case !t of
        Resolved v => f v
      | Pending callbacks => (
          let
            val t' = Ref (Pending [])
            fun callback v = chain (f v) t'
          in
            t := Pending (callback :: callbacks);
            t'
          end
        );

      fun map t f = bind t (fn v => return (f v));

      fun both t1 t2 =
        let
          val (t, u) = wait ()
          val _ = upon t1 (fn v1 => upon t2 (fn v2 => u (v1, v2)))
        in
          t
        end;
    end;
  end;

structure ByteHelper =
  struct
    fun w82n w8Array offset =
      let
        val w64 = Word64.concatAll
          (Word8Array.sub w8Array (offset + 7))
          (Word8Array.sub w8Array (offset + 6))
          (Word8Array.sub w8Array (offset + 5))
          (Word8Array.sub w8Array (offset + 4))
          (Word8Array.sub w8Array (offset + 3))
          (Word8Array.sub w8Array (offset + 2))
          (Word8Array.sub w8Array (offset + 1))
          (Word8Array.sub w8Array offset)
      in
        Word64.toInt w64
      end;

    fun n2w8 n word8Array offset =
      let
        fun getByte w64 i = Word8.fromInt (Word64.toInt (Word64.>> w64 (i * 8)))
        val w64 = Word64.fromInt n
        val _ = Word8Array.update word8Array offset (getByte w64 7)
        val _ = Word8Array.update word8Array (offset + 1) (getByte w64 6)
        val _ = Word8Array.update word8Array (offset + 2) (getByte w64 5)
        val _ = Word8Array.update word8Array (offset + 3) (getByte w64 4)
        val _ = Word8Array.update word8Array (offset + 4) (getByte w64 3)
        val _ = Word8Array.update word8Array (offset + 5) (getByte w64 2)
        val _ = Word8Array.update word8Array (offset + 6) (getByte w64 1)
        val _ = Word8Array.update word8Array (offset + 7) (getByte w64 0)
      in
        ()
      end;

    fun toString bytes = Word8Array.substring bytes 0 (Word8Array.length bytes);

    fun editBit bytes i value =
      let
        val byteIndex = i div 8
        val bitIndex = i mod 8
        val byte = Word8Array.sub bytes byteIndex
        val newByte = if value then
          Word8.orb byte (Word8.<< (Word8.fromInt 1) bitIndex)
        else
          Word8.andb byte (Word8.notb (Word8.<< (Word8.fromInt 1) bitIndex))
      in
        Word8Array.update bytes byteIndex newByte
      end;

    fun readBit bytes i =
      let
        val byteIndex = i div 8
        val bitIndex = i mod 8
        val byte = Word8Array.sub bytes byteIndex
      in
        (Word8.andb byte (Word8.<< (Word8.fromInt 1) bitIndex)) <> (Word8.fromInt 0)
      end;
  end;

structure FdSet =
  struct
    datatype t = FdSet (int Set.set);

    val maxSize =
      let
        val iobuff = Word8Array.array 8 (Word8.fromInt 0)
        val _ = #(get_fd_set_size) "" iobuff
      in
        ByteHelper.w82n iobuff 0
      end;

    val byteSize = maxSize div 8;

    val empty = FdSet (Set.empty Int.compare);

    fun insert (FdSet set) fd = FdSet (Set.insert set fd);

    fun mem (FdSet set) fd = Set.mem set fd;

    fun delete (FdSet set) fd = FdSet (Set.delete set fd);

    fun fromList list = FdSet (Set.fromList Int.compare list);

    fun toList (FdSet set) = Set.toList set;

    fun toBytes (FdSet set) =
      let
        val bytes = Word8Array.array byteSize (Word8.fromInt 0)
        val _ = List.app (fn fd => ByteHelper.editBit bytes fd True) (Set.toList set)
      in
        bytes
      end;

    fun fromBytes bytes =
      let
        val allFds = List.genlist (fn i => i) maxSize
        fun isSet fd = ByteHelper.readBit bytes fd
      in
        List.foldl (fn fd => fn set => if isSet fd then insert set fd else set) empty allFds
      end;
  end;

structure Time =
  struct
    type milliseconds = int;

    exception GetTimeFailed;

    fun nowMilliseconds () =
      let val outputBuff = Word8Array.array 9 (Word8.fromInt 0)
          val _ = #(now) "" outputBuff
      in
        if Word8Array.sub outputBuff 0 = Word8.fromInt 1
        then raise GetTimeFailed
        else ByteHelper.w82n outputBuff 1
      end;
  end;

structure Unix =
  struct
    exception FFIError string;

    fun select readFds writeFds exceptFds timeout =
      let
        val readBytes = FdSet.toBytes readFds
        val writeBytes = FdSet.toBytes writeFds
        val exceptBytes = FdSet.toBytes exceptFds
        val inputBuff = Word8Array.array (3 * FdSet.byteSize + 8) (Word8.fromInt 0)
        val _ = ByteHelper.n2w8 timeout inputBuff 0;
        val _ = Word8Array.copy readBytes 0 FdSet.byteSize inputBuff (8 + 0 * FdSet.byteSize);
        val _ = Word8Array.copy writeBytes 0 FdSet.byteSize inputBuff (8 + 1 * FdSet.byteSize);
        val _ = Word8Array.copy exceptBytes 0 FdSet.byteSize inputBuff (8 + 2 * FdSet.byteSize);
        val outputBuff = Word8Array.array (FdSet.byteSize * 3 + 1) (Word8.fromInt 0)
        val _ = #(select) (ByteHelper.toString inputBuff) outputBuff
      in
        if Word8Array.sub outputBuff 0 = Word8.fromInt 1
        then raise FFIError "select failed"
        else
          let
            val _ = Word8Array.copy outputBuff (1 + 0 * FdSet.byteSize) FdSet.byteSize readBytes 0
            val _ = Word8Array.copy outputBuff (1 + 1 * FdSet.byteSize) FdSet.byteSize writeBytes 0
            val _ = Word8Array.copy outputBuff (1 + 2 * FdSet.byteSize) FdSet.byteSize exceptBytes 0
          in
            (FdSet.fromBytes readBytes, FdSet.fromBytes writeBytes, FdSet.fromBytes exceptBytes)
          end
      end;

    fun openListenFd port =
      let val outputBuff = Word8Array.array 9 (Word8.fromInt 0)
          val _ = #(open_listenfd) (Int.toString port) outputBuff
      in
        if Word8Array.sub outputBuff 0 = Word8.fromInt 1
        then raise (FFIError "open_listenfd failed")
        else ByteHelper.w82n outputBuff 1
      end;

    fun accept listenFd =
      let val inputBuff = Word8Array.array 8 (Word8.fromInt 0)
          val _ = ByteHelper.n2w8 listenFd inputBuff 0
          val outputBuff = Word8Array.array 9 (Word8.fromInt 0)
          val _ = #(accept) (ByteHelper.toString inputBuff) outputBuff
      in
        if Word8Array.sub outputBuff 0 = Word8.fromInt 1
        then raise (FFIError "accept failed")
        else ByteHelper.w82n outputBuff 1
      end;

    fun close fd =
      let val inputBuff = Word8Array.array 8 (Word8.fromInt 0)
          val _ = ByteHelper.n2w8 fd inputBuff 0
          val outputBuff = Word8Array.array 1 (Word8.fromInt 0)
          val _ = #(close) (ByteHelper.toString inputBuff) outputBuff
      in
        if Word8Array.sub outputBuff 0 = Word8.fromInt 1
        then raise (FFIError "close failed")
        else ()
      end;

    exception EndOfFile
    exception InvalidFD

    val iobuff = Word8Array.array 2052 (Word8.fromInt 0)

    fun read fd n =
      let val a = Marshalling.n2w2 n iobuff 0
          val inputBuff = Word8Array.array 8 (Word8.fromInt 0)
          val _ = ByteHelper.n2w8 fd inputBuff 0
      in
        #(read) (ByteHelper.toString inputBuff) iobuff;
        if Word8.toInt (Word8Array.sub iobuff 0) <> 1
        then Marshalling.w22n iobuff 1
        else raise InvalidFD
      end

    fun read_byte fd =
      if read fd 1 = 0 then raise EndOfFile
      else Word8Array.sub iobuff 4

    local
      fun extend_array arr =
        let
          val len = Word8Array.length arr
          val arr' = Word8Array.array (2*len) (Word8.fromInt 0)
        in
          Word8Array.copy arr 0 len arr' 0; arr'
        end;
    in
      fun inputLine fd =
        let
          val nl = Word8.fromInt (Char.ord #"\n")
          fun inputLine_aux arr i =
            if i < Word8Array.length arr then
              let
                val c = read_byte (fd)
                val u = Word8Array.update arr i c
              in
                if c = nl then Some (Word8Array.substring arr 0 (i+1))
                else inputLine_aux arr (i+1)
              end
              handle EndOfFile =>
                if i = 0 then None
                else (Word8Array.update arr i nl;
                      Some (Word8Array.substring arr 0 (i+1)))
            else inputLine_aux (extend_array arr) i
        in
          inputLine_aux (Word8Array.array 127 (Word8.fromInt 0)) 0
        end;
      end;
  end;

structure Scheduler =
  struct
    local
      val readables = Ref (Map.empty Int.compare : (int, (unit -> unit) list) map);
      val writeables = Ref (Map.empty Int.compare : (int, (unit -> unit) list) map);
      (* Optimise timer list to use Priority Queue *)
      val timers = Ref ([] : (Time.milliseconds * (unit -> unit)) list);

      fun length () = (Map.size (!readables)) + (Map.size (!writeables)) + (List.length (!timers));

      exception FdAlreadyRemoved;

      fun loop () =
        let
          fun toFdSet fd_map = FdSet.fromList (List.map fst (Map.toAscList fd_map))
          val readFdSet = toFdSet (!readables)
          val writeFdSet = toFdSet (!writeables)
          val exceptFdSet = FdSet.empty
          val (readyRead, readyWrite, _) = Unix.select readFdSet writeFdSet exceptFdSet 0
          val (timersReady, remainingTimers) = List.partition (fn (time, _) => time <= Time.nowMilliseconds ()) (!timers)
          val _ = timers := remainingTimers
          fun invokeActions fd_map fd = case (Map.lookup (!fd_map) fd) of
            None => raise FdAlreadyRemoved
          | Some actions => (
              fd_map := Map.delete (!fd_map) fd;
              List.app (fn f => f ()) actions
            )
        in
          List.app (invokeActions readables) (FdSet.toList readyRead);
          List.app (invokeActions writeables) (FdSet.toList readyWrite);
          List.app (fn (_, f) => f ()) timersReady
        end;
    in
      fun on_readable fd f =
        let
          val actions = case (Map.lookup (!readables) fd) of
            None => []
          | Some actions => actions
        in
          readables := Map.insert (!readables) fd (f :: actions)
        end;

      fun on_timer milliseconds repeat f =
        let val now = Time.nowMilliseconds ()
            fun g () = (
              f ();
              if repeat then on_timer milliseconds repeat f
              else ()
            )
        in
          timers := (now + milliseconds, g) :: (!timers)
        end;

      fun run p =
        let
          fun run_loop () = case Promise.poll p of
            Some value => value
          | None => (
              loop ();
              run_loop ()
            )
        in
          run_loop ()
        end;

      fun run_main main =
        let
          fun run_loop () =
            if length () <> 0
            then (
              loop ();
              run_loop ()
            )
            else (print_ln "ending loop")
        in
          main ();
          run_loop ()
        end;
    end;
  end;

structure AsyncIO =
  struct
    fun readStdinLine () =
      let
        val (t, u) = Promise.wait ()
        val _ = Scheduler.on_readable 0 (fn () => u (TextIO.inputLine TextIO.stdIn))
      in
        t
      end;

    fun accept listenFd =
      let
        val (t, u) = Promise.wait ()
        val _ = Scheduler.on_readable listenFd (fn () => (
          u (Unix.accept listenFd)
        ))
      in
        t
      end

    fun inputLine fd =
      let
        val (t, u) = Promise.wait ()
        val _ = Scheduler.on_readable fd (fn () => u (Unix.inputLine fd))
      in
        t
      end;
  end;

structure AsyncServer =
  struct
    fun serve port withClient =
      let val listenFd = Unix.openListenFd port
          fun handleClient () = Promise.bind (AsyncIO.accept listenFd) (fn clientFd => (
            withClient clientFd;
            handleClient ()
          ))
      in
        handleClient ()
      end;

    fun echo clientFd =
      let val line = AsyncIO.inputLine clientFd
          val _ = Promise.map line (fn s => (
            print_ln (Option.getOpt s "EOF");
            echo clientFd
          ))
      in
        ()
      end;
  end;

fun echo () =
  let val line = AsyncIO.readStdinLine ()
      val _ = Promise.map line (fn s => (
        print_ln (Option.getOpt s "EOF");
        echo ()
      ))
  in
    ()
  end;

(* Scheduler.run_main FakeFileSystem.main_test; *)
Scheduler.run_main (fn () => (
  AsyncServer.serve 8080 AsyncServer.echo
));