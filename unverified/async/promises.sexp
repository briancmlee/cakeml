((Dtype (unk unk) ((("'a") "option" ("Some" (Atvar "'a")) ("None")))) (Dtype (unk unk) ((nil "ordering" ("Greater") ("Equal") ("Less")))) (Dtype (unk unk) ((("'a" "'b") "sum" ("Inr" (Atvar "'b")) ("Inl" (Atvar "'a"))))) (Dtype (unk unk) ((("'a") "app_list" ("Nil") ("Append" (Atapp ((Atvar "'a")) (Short "app_list")) (Atapp ((Atvar "'a")) (Short "app_list"))) ("List" (Atapp ((Atvar "'a")) (Short "list")))))) (Dlet (unk unk) "fst" (Fun "v3" (Mat (Var (Short "v3")) (((Pcon NONE ("v2" "v1")) Var (Short "v2")))))) (Dlet (unk unk) "snd" (Fun "v3" (Mat (Var (Short "v3")) (((Pcon NONE ("v2" "v1")) Var (Short "v1")))))) (Dlet (unk unk) "curry" (Fun "v1" (Fun "v2" (Fun "v3" (App Opapp ((Var (Short "v1")) (Con NONE ((Var (Short "v2")) (Var (Short "v3")))))))))) (Dlet (unk unk) "uncurry" (Fun "v1" (Fun "v2" (App Opapp ((App Opapp ((Var (Short "v1")) (App Opapp ((Var (Short "fst")) (Var (Short "v2")))))) (App Opapp ((Var (Short "snd")) (Var (Short "v2"))))))))) (Dlet (unk unk) "o" (Fun "v2" (Fun "v3" (Fun "v1" (App Opapp ((Var (Short "v2")) (App Opapp ((Var (Short "v3")) (Var (Short "v1")))))))))) (Dlet (unk unk) "id" (Fun "v1" (Var (Short "v1")))) (Dlet (unk unk) "flip" (Fun "v3" (Fun "v2" (Fun "v1" (App Opapp ((App Opapp ((Var (Short "v3")) (Var (Short "v1")))) (Var (Short "v2")))))))) (Dlet (unk unk) "const" (Fun "v2" (Fun "v1" (Var (Short "v2"))))) (Dlet (unk unk) "update" (Fun "v3" (Fun "v4" (Fun "v2" (Fun "v1" (If (App Equality ((Var (Short "v3")) (Var (Short "v1")))) (Var (Short "v4")) (App Opapp ((Var (Short "v2")) (Var (Short "v1")))))))))) (Dletrec (unk unk) (("exp" "v2" Fun "v3" (Fun "v1" (If (App Equality ((Var (Short "v3")) (Lit 0))) (Var (Short "v1")) (App Opapp ((App Opapp ((App Opapp ((Var (Short "exp")) (Var (Short "v2")))) (Let (SOME "k") (App OpnMinus ((Var (Short "v3")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))) (App OpnTimes ((Var (Short "v2")) (Var (Short "v1"))))))))))) (Dlet (unk unk) "exp" (Fun "v1" (Fun "v2" (App Opapp ((App Opapp ((App Opapp ((Var (Short "exp")) (Var (Short "v1")))) (Var (Short "v2")))) (Lit 1)))))) (Dlet (unk unk) "min" (Fun "v1" (Fun "v2" (If (App OpbLt ((Var (Short "v1")) (Var (Short "v2")))) (Var (Short "v1")) (Var (Short "v2")))))) (Dlet (unk unk) "max" (Fun "v1" (Fun "v2" (If (App OpbLt ((Var (Short "v1")) (Var (Short "v2")))) (Var (Short "v2")) (Var (Short "v1")))))) (Dlet (unk unk) "even" (Fun "v1" (App Equality ((App OpnModulo ((Var (Short "v1")) (Lit 2))) (Lit 0))))) (Dlet (unk unk) "odd" (Fun "v1" (App OpbLt ((Lit 0) (App OpnModulo ((Var (Short "v1")) (Lit 2))))))) (Dletrec (unk unk) (("funpow" "v1" Fun "v2" (Fun "v3" (If (App Equality ((Var (Short "v2")) (Lit 0))) (Var (Short "v3")) (App Opapp ((App Opapp ((App Opapp ((Var (Short "funpow")) (Var (Short "v1")))) (Let (SOME "k") (App OpnMinus ((Var (Short "v2")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))) (App Opapp ((Var (Short "v1")) (Var (Short "v3"))))))))))) (Dlet (unk unk) "abs_diff" (Fun "v2" (Fun "v1" (If (App OpbLt ((Var (Short "v2")) (Var (Short "v1")))) (Let (SOME "k") (App OpnMinus ((Var (Short "v1")) (Var (Short "v2")))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))) (Let (SOME "k") (App OpnMinus ((Var (Short "v2")) (Var (Short "v1")))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))))) (Dlet (unk unk) "pre" (Fun "v1" (Let (SOME "k") (App OpnMinus ((Var (Short "v1")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))) (Dletrec (unk unk) (("while" "v1" Fun "v2" (Fun "v3" (If (App Opapp ((Var (Short "v1")) (Var (Short "v3")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "while")) (Var (Short "v1")))) (Var (Short "v2")))) (App Opapp ((Var (Short "v2")) (Var (Short "v3")))))) (Var (Short "v3"))))))) (Dletrec (unk unk) (("owhile" "v1" Fun "v2" (Fun "v3" (If (App Opapp ((Var (Short "v1")) (Var (Short "v3")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "owhile")) (Var (Short "v1")))) (Var (Short "v2")))) (App Opapp ((Var (Short "v2")) (Var (Short "v3")))))) (Con (SOME (Short "Some")) ((Var (Short "v3"))))))))) (Dlet (unk unk) "least" (Fun "v3" (App Opapp ((App Opapp ((App Opapp ((Var (Short "while")) (Fun "v1" (App Equality ((App Opapp ((Var (Short "v3")) (Var (Short "v1")))) (App OpbLt ((Lit 0) (Lit 0)))))))) (Fun "v2" (App OpnPlus ((Var (Short "v2")) (Lit 1)))))) (Lit 0))))) (Dlocal ((Dletrec (unk unk) (("append_aux" "v4" Fun "v5" (Mat (Var (Short "v4")) (((Pcon (SOME (Short "List")) ("v1")) App ListAppend ((Var (Short "v1")) (Var (Short "v5")))) ((Pcon (SOME (Short "Append")) ("v3" "v2")) App Opapp ((App Opapp ((Var (Short "append_aux")) (Var (Short "v3")))) (App Opapp ((App Opapp ((Var (Short "append_aux")) (Var (Short "v2")))) (Var (Short "v5")))))) ((Pcon (SOME (Short "Nil")) nil) Var (Short "v5")))))))) ((Dlet (unk unk) "append" (Fun "v1" (App Opapp ((App Opapp ((Var (Short "append_aux")) (Var (Short "v1")))) (Con (SOME (Short "[]")) nil))))))) (Dletrec ((0 16) (0 46)) (("repeat" "f" Fun "x" (Let (SOME " v0") (App Opapp ((Var (Short "f")) (Var (Short "x")))) (App Opapp ((App Opapp ((Var (Short "repeat")) (Var (Short "f")))) (Var (Short " v0")))))))) (Dmod "Runtime" ((Dtabbrev (unk unk) nil "unit" (Attup nil)) (Dlet (unk unk) "fullGC" (Fun "v1" (Mat (Var (Short "v1")) (((Pcon NONE nil) App ConfigGC ((Lit 0) (Lit 0))))))) (Dlet (unk unk) "fail" (Fun "v1" (Mat (Var (Short "v1")) (((Pcon NONE nil) Let (SOME "a") (Var (Short "v1")) (Let (SOME "n") (Lit 18446744073709551616) (Let NONE (App Aalloc ((Var (Short "n")) (Var (Short "n")))) (Var (Short "a"))))))))) (Dlet (unk unk) "debugMsg" (Fun "v1" (App (FFI . "") ((Var (Short "v1")) (App Aw8alloc ((Lit 0) (Lit (word8 0)))))))) (Dletrec (unk unk) (("exit" "i" Let (SOME "y") (App W8fromInt ((Var (Short "i")))) (Let (SOME "x") (App Aw8alloc ((Lit 1) (Var (Short "y")))) (App (FFI . "exit") ((Lit "") (Var (Short "x")))))))) (Dletrec ((0 15) (0 50)) (("abort" "u" Mat (Var (Short "u")) (((Pcon NONE nil) App Opapp ((Var (Short "exit")) (Lit 1))))))) (Dletrec ((1 2) (5 15)) (("assert" "cond" Fun "msg" (If (Var (Short "cond")) (Con NONE nil) (Let NONE (App Opapp ((Var (Short "debugMsg")) (Var (Short "msg")))) (Let (SOME " v0") (Con NONE nil) (App Opapp ((Var (Short "abort")) (Var (Short " v0")))))))))))) (Dmod "Option" ((Dtabbrev (unk unk) ("'a") "option" (Atapp ((Atvar "'a")) (Short "option"))) (Dlet (unk unk) "getOpt" (Fun "v3" (Fun "v2" (Mat (Var (Short "v3")) (((Pcon (SOME (Short "None")) nil) Var (Short "v2")) ((Pcon (SOME (Short "Some")) ("v1")) Var (Short "v1"))))))) (Dlet (unk unk) "isSome" (Fun "v2" (Mat (Var (Short "v2")) (((Pcon (SOME (Short "None")) nil) App OpbLt ((Lit 0) (Lit 0))) ((Pcon (SOME (Short "Some")) ("v1")) App OpbLeq ((Lit 0) (Lit 0))))))) (Dlet (unk unk) "valOf" (Fun "v" (Mat (Var (Short "v")) (((Pcon (SOME (Short "None")) nil) Raise (Con (SOME (Short "Bind")) nil)) ((Pcon (SOME (Short "Some")) ("v1")) Var (Short "v1")))))) (Dlet (unk unk) "join" (Fun "v2" (Mat (Var (Short "v2")) (((Pcon (SOME (Short "None")) nil) Con (SOME (Short "None")) nil) ((Pcon (SOME (Short "Some")) ("v1")) Var (Short "v1")))))) (Dlet (unk unk) "map" (Fun "v2" (Fun "v3" (Mat (Var (Short "v3")) (((Pcon (SOME (Short "None")) nil) Con (SOME (Short "None")) nil) ((Pcon (SOME (Short "Some")) ("v1")) Con (SOME (Short "Some")) ((App Opapp ((Var (Short "v2")) (Var (Short "v1"))))))))))) (Dlet (unk unk) "mapPartial" (Fun "v2" (Fun "v3" (Mat (Var (Short "v3")) (((Pcon (SOME (Short "None")) nil) Con (SOME (Short "None")) nil) ((Pcon (SOME (Short "Some")) ("v1")) App Opapp ((Var (Short "v2")) (Var (Short "v1"))))))))) (Dlet (unk unk) "compose" (Fun "v3" (Fun "v4" (Fun "v2" (Mat (App Opapp ((Var (Short "v4")) (Var (Short "v2")))) (((Pcon (SOME (Short "None")) nil) Con (SOME (Short "None")) nil) ((Pcon (SOME (Short "Some")) ("v1")) Con (SOME (Short "Some")) ((App Opapp ((Var (Short "v3")) (Var (Short "v1")))))))))))) (Dlet (unk unk) "composePartial" (Fun "v3" (Fun "v4" (Fun "v2" (Mat (App Opapp ((Var (Short "v4")) (Var (Short "v2")))) (((Pcon (SOME (Short "None")) nil) Con (SOME (Short "None")) nil) ((Pcon (SOME (Short "Some")) ("v1")) App Opapp ((Var (Short "v3")) (Var (Short "v1")))))))))) (Dlet (unk unk) "isNone" (Fun "v2" (Mat (Var (Short "v2")) (((Pcon (SOME (Short "None")) nil) App OpbLeq ((Lit 0) (Lit 0))) ((Pcon (SOME (Short "Some")) ("v1")) App OpbLt ((Lit 0) (Lit 0))))))) (Dlet (unk unk) "map2" (Fun "v1" (Fun "v2" (Fun "v3" (If (Log And (App Opapp ((Var (Short "isSome")) (Var (Short "v2")))) (App Opapp ((Var (Short "isSome")) (Var (Short "v3"))))) (Con (SOME (Short "Some")) ((App Opapp ((App Opapp ((Var (Short "v1")) (App Opapp ((Var (Short "valOf")) (Var (Short "v2")))))) (App Opapp ((Var (Short "valOf")) (Var (Short "v3")))))))) (Con (SOME (Short "None")) nil)))))) (Dlet (unk unk) "compare" (Fun "v4" (Fun "v5" (Fun "v6" (Mat (Var (Short "v5")) (((Pcon (SOME (Short "None")) nil) Mat (Var (Short "v6")) (((Pcon (SOME (Short "None")) nil) Con (SOME (Short "Equal")) nil) ((Pcon (SOME (Short "Some")) ("v1")) Con (SOME (Short "Less")) nil))) ((Pcon (SOME (Short "Some")) ("v3")) Mat (Var (Short "v6")) (((Pcon (SOME (Short "None")) nil) Con (SOME (Short "Greater")) nil) ((Pcon (SOME (Short "Some")) ("v2")) App Opapp ((App Opapp ((Var (Short "v4")) (Var (Short "v3")))) (Var (Short "v2")))))))))))))) (Dmod "List" ((Dtabbrev (unk unk) ("'a") "list" (Atapp ((Atvar "'a")) (Short "list"))) (Dlet (unk unk) "null" (Fun "v3" (Mat (Var (Short "v3")) (((Pcon (SOME (Short "[]")) nil) App OpbLeq ((Lit 0) (Lit 0))) ((Pcon (SOME (Short "::")) ("v2" "v1")) App OpbLt ((Lit 0) (Lit 0))))))) (Dlocal ((Dletrec (unk unk) (("length_aux" "v3" Fun "v4" (Mat (Var (Short "v3")) (((Pcon (SOME (Short "[]")) nil) Var (Short "v4")) ((Pcon (SOME (Short "::")) ("v2" "v1")) App Opapp ((App Opapp ((Var (Short "length_aux")) (Var (Short "v1")))) (App OpnPlus ((Var (Short "v4")) (Lit 1))))))))))) ((Dlet (unk unk) "length" (Fun "v1" (App Opapp ((App Opapp ((Var (Short "length_aux")) (Var (Short "v1")))) (Lit 0))))) (Dlocal ((Dletrec (unk unk) (("rev" "v4" Fun "v3" (Mat (Var (Short "v4")) (((Pcon (SOME (Short "[]")) nil) Var (Short "v3")) ((Pcon (SOME (Short "::")) ("v2" "v1")) App Opapp ((App Opapp ((Var (Short "rev")) (Var (Short "v1")))) (Con (SOME (Short "::")) ((Var (Short "v2")) (Var (Short "v3"))))))))))) (Dletrec (unk unk) (("map_rev'" "v4" Fun "v5" (Fun "v3" (Mat (Var (Short "v5")) (((Pcon (SOME (Short "[]")) nil) Var (Short "v3")) ((Pcon (SOME (Short "::")) ("v2" "v1")) App Opapp ((App Opapp ((App Opapp ((Var (Short "map_rev'")) (Var (Short "v4")))) (Var (Short "v1")))) (Con (SOME (Short "::")) ((App Opapp ((Var (Short "v4")) (Var (Short "v2")))) (Var (Short "v3")))))))))))) (Dletrec (unk unk) (("filter_rev'" "v3" Fun "v5" (Fun "v4" (Mat (Var (Short "v5")) (((Pcon (SOME (Short "[]")) nil) Var (Short "v4")) ((Pcon (SOME (Short "::")) ("v2" "v1")) If (App Opapp ((Var (Short "v3")) (Var (Short "v2")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "filter_rev'")) (Var (Short "v3")))) (Var (Short "v1")))) (Con (SOME (Short "::")) ((Var (Short "v2")) (Var (Short "v4")))))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "filter_rev'")) (Var (Short "v3")))) (Var (Short "v1")))) (Var (Short "v4"))))))))))) (Dletrec (unk unk) (("flat_rev'" "v4" Fun "v3" (Mat (Var (Short "v4")) (((Pcon (SOME (Short "[]")) nil) Var (Short "v3")) ((Pcon (SOME (Short "::")) ("v2" "v1")) App Opapp ((App Opapp ((Var (Short "flat_rev'")) (Var (Short "v1")))) (App Opapp ((App Opapp ((Var (Short "rev")) (Var (Short "v2")))) (Var (Short "v3")))))))))))) ((Dlet (unk unk) "rev" (Fun "v1" (App Opapp ((App Opapp ((Var (Short "rev")) (Var (Short "v1")))) (Con (SOME (Short "[]")) nil))))) (Dlet (unk unk) "mapRev" (Fun "v1" (Fun "v2" (App Opapp ((App Opapp ((App Opapp ((Var (Short "map_rev'")) (Var (Short "v1")))) (Var (Short "v2")))) (Con (SOME (Short "[]")) nil)))))) (Dlet (unk unk) "filterRev" (Fun "v1" (Fun "v2" (App Opapp ((App Opapp ((App Opapp ((Var (Short "filter_rev'")) (Var (Short "v1")))) (Var (Short "v2")))) (Con (SOME (Short "[]")) nil)))))) (Dlet (unk unk) "flatRev" (Fun "v1" (App Opapp ((App Opapp ((Var (Short "flat_rev'")) (Var (Short "v1")))) (Con (SOME (Short "[]")) nil))))) (Dlet (unk unk) "@" (Fun "v1" (Fun "v2" (App ListAppend ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "hd" (Fun "v" (Mat (Var (Short "v")) (((Pcon (SOME (Short "[]")) nil) Raise (Con (SOME (Short "Bind")) nil)) ((Pcon (SOME (Short "::")) ("v2" "v1")) Var (Short "v2")))))) (Dlet (unk unk) "tl" (Fun "v3" (Mat (Var (Short "v3")) (((Pcon (SOME (Short "[]")) nil) Con (SOME (Short "[]")) nil) ((Pcon (SOME (Short "::")) ("v2" "v1")) Var (Short "v1")))))) (Dletrec (unk unk) (("last" "v" Mat (Var (Short "v")) (((Pcon (SOME (Short "[]")) nil) Raise (Con (SOME (Short "Bind")) nil)) ((Pcon (SOME (Short "::")) ("v2" "v1")) If (App Equality ((Var (Short "v1")) (Con (SOME (Short "[]")) nil))) (Var (Short "v2")) (App Opapp ((Var (Short "last")) (Var (Short "v1"))))))))) (Dlet (unk unk) "getItem" (Fun "v3" (Mat (Var (Short "v3")) (((Pcon (SOME (Short "[]")) nil) Con (SOME (Short "None")) nil) ((Pcon (SOME (Short "::")) ("v2" "v1")) Con (SOME (Short "Some")) ((Con NONE ((Var (Short "v2")) (Var (Short "v1")))))))))) (Dletrec (unk unk) (("nth" "v1" Fun "v2" (If (App Equality ((Var (Short "v2")) (Lit 0))) (App Opapp ((Var (Short "hd")) (Var (Short "v1")))) (App Opapp ((App Opapp ((Var (Short "nth")) (App Opapp ((Var (Short "tl")) (Var (Short "v1")))))) (Let (SOME "k") (App OpnMinus ((Var (Short "v2")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))))))) (Dletrec (unk unk) (("take" "v3" Fun "v4" (Mat (Var (Short "v3")) (((Pcon (SOME (Short "[]")) nil) Con (SOME (Short "[]")) nil) ((Pcon (SOME (Short "::")) ("v2" "v1")) If (App Equality ((Var (Short "v4")) (Lit 0))) (Con (SOME (Short "[]")) nil) (Con (SOME (Short "::")) ((Var (Short "v2")) (App Opapp ((App Opapp ((Var (Short "take")) (Var (Short "v1")))) (Let (SOME "k") (App OpnMinus ((Var (Short "v4")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))))))))))) (Dletrec (unk unk) (("drop" "v3" Fun "v4" (Mat (Var (Short "v3")) (((Pcon (SOME (Short "[]")) nil) Con (SOME (Short "[]")) nil) ((Pcon (SOME (Short "::")) ("v2" "v1")) If (App Equality ((Var (Short "v4")) (Lit 0))) (Con (SOME (Short "::")) ((Var (Short "v2")) (Var (Short "v1")))) (App Opapp ((App Opapp ((Var (Short "drop")) (Var (Short "v1")))) (Let (SOME "k") (App OpnMinus ((Var (Short "v4")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))))))))) (Dletrec (unk unk) (("takeUntil" "v3" Fun "v4" (Mat (Var (Short "v4")) (((Pcon (SOME (Short "[]")) nil) Con (SOME (Short "[]")) nil) ((Pcon (SOME (Short "::")) ("v2" "v1")) If (App Opapp ((Var (Short "v3")) (Var (Short "v2")))) (Con (SOME (Short "[]")) nil) (Con (SOME (Short "::")) ((Var (Short "v2")) (App Opapp ((App Opapp ((Var (Short "takeUntil")) (Var (Short "v3")))) (Var (Short "v1")))))))))))) (Dletrec (unk unk) (("dropUntil" "v3" Fun "v4" (Mat (Var (Short "v4")) (((Pcon (SOME (Short "[]")) nil) Con (SOME (Short "[]")) nil) ((Pcon (SOME (Short "::")) ("v2" "v1")) If (App Opapp ((Var (Short "v3")) (Var (Short "v2")))) (Con (SOME (Short "::")) ((Var (Short "v2")) (Var (Short "v1")))) (App Opapp ((App Opapp ((Var (Short "dropUntil")) (Var (Short "v3")))) (Var (Short "v1")))))))))) (Dletrec (unk unk) (("cmp" "v7" Fun "v8" (Fun "v9" (Mat (Var (Short "v8")) (((Pcon (SOME (Short "[]")) nil) Mat (Var (Short "v9")) (((Pcon (SOME (Short "[]")) nil) Con (SOME (Short "Equal")) nil) ((Pcon (SOME (Short "::")) ("v2" "v1")) Con (SOME (Short "Less")) nil))) ((Pcon (SOME (Short "::")) ("v6" "v5")) Mat (Var (Short "v9")) (((Pcon (SOME (Short "[]")) nil) Con (SOME (Short "Greater")) nil) ((Pcon (SOME (Short "::")) ("v4" "v3")) Mat (App Opapp ((App Opapp ((Var (Short "v7")) (Var (Short "v6")))) (Var (Short "v4")))) (((Pcon (SOME (Short "Less")) nil) Con (SOME (Short "Less")) nil) ((Pcon (SOME (Short "Equal")) nil) App Opapp ((App Opapp ((App Opapp ((Var (Short "cmp")) (Var (Short "v7")))) (Var (Short "v5")))) (Var (Short "v3")))) ((Pcon (SOME (Short "Greater")) nil) Con (SOME (Short "Greater")) nil))))))))))) (Dletrec (unk unk) (("concat" "v3" Mat (Var (Short "v3")) (((Pcon (SOME (Short "[]")) nil) Con (SOME (Short "[]")) nil) ((Pcon (SOME (Short "::")) ("v2" "v1")) App ListAppend ((Var (Short "v2")) (App Opapp ((Var (Short "concat")) (Var (Short "v1")))))))))) (Dletrec (unk unk) (("map" "v4" Fun "v5" (Mat (Var (Short "v5")) (((Pcon (SOME (Short "[]")) nil) Con (SOME (Short "[]")) nil) ((Pcon (SOME (Short "::")) ("v3" "v2")) Let (SOME "v1") (App Opapp ((Var (Short "v4")) (Var (Short "v3")))) (Con (SOME (Short "::")) ((Var (Short "v1")) (App Opapp ((App Opapp ((Var (Short "map")) (Var (Short "v4")))) (Var (Short "v2")))))))))))) (Dlocal ((Dletrec (unk unk) (("mapi" "v4" Fun "v5" (Fun "v6" (Mat (Var (Short "v6")) (((Pcon (SOME (Short "[]")) nil) Con (SOME (Short "[]")) nil) ((Pcon (SOME (Short "::")) ("v3" "v2")) Let (SOME "v1") (App Opapp ((App Opapp ((Var (Short "v4")) (Var (Short "v5")))) (Var (Short "v3")))) (Con (SOME (Short "::")) ((Var (Short "v1")) (App Opapp ((App Opapp ((App Opapp ((Var (Short "mapi")) (Var (Short "v4")))) (App OpnPlus ((Var (Short "v5")) (Lit 1))))) (Var (Short "v2")))))))))))))) ((Dlet (unk unk) "mapi" (Fun "v1" (Fun "v2" (App Opapp ((App Opapp ((App Opapp ((Var (Short "mapi")) (Var (Short "v1")))) (Lit 0))) (Var (Short "v2"))))))) (Dletrec (unk unk) (("mapPartial" "v4" Fun "v5" (Mat (Var (Short "v5")) (((Pcon (SOME (Short "[]")) nil) Con (SOME (Short "[]")) nil) ((Pcon (SOME (Short "::")) ("v3" "v2")) Mat (App Opapp ((Var (Short "v4")) (Var (Short "v3")))) (((Pcon (SOME (Short "None")) nil) App Opapp ((App Opapp ((Var (Short "mapPartial")) (Var (Short "v4")))) (Var (Short "v2")))) ((Pcon (SOME (Short "Some")) ("v1")) Con (SOME (Short "::")) ((Var (Short "v1")) (App Opapp ((App Opapp ((Var (Short "mapPartial")) (Var (Short "v4")))) (Var (Short "v2"))))))))))))) (Dletrec ((1 2) (2 31)) (("app" "f" Fun "ls" (Mat (Var (Short "ls")) (((Pcon (SOME (Short "[]")) nil) Con NONE nil) ((Pcon (SOME (Short "::")) ("x" "xs")) Let NONE (App Opapp ((Var (Short "f")) (Var (Short "x")))) (App Opapp ((App Opapp ((Var (Short "app")) (Var (Short "f")))) (Var (Short "xs")))))))))) (Dletrec (unk unk) (("find" "v3" Fun "v4" (Mat (Var (Short "v4")) (((Pcon (SOME (Short "[]")) nil) Con (SOME (Short "None")) nil) ((Pcon (SOME (Short "::")) ("v2" "v1")) If (App Opapp ((Var (Short "v3")) (Var (Short "v2")))) (Con (SOME (Short "Some")) ((Var (Short "v2")))) (App Opapp ((App Opapp ((Var (Short "find")) (Var (Short "v3")))) (Var (Short "v1")))))))))) (Dletrec (unk unk) (("filter" "v3" Fun "v4" (Mat (Var (Short "v4")) (((Pcon (SOME (Short "[]")) nil) Con (SOME (Short "[]")) nil) ((Pcon (SOME (Short "::")) ("v2" "v1")) If (App Opapp ((Var (Short "v3")) (Var (Short "v2")))) (Con (SOME (Short "::")) ((Var (Short "v2")) (App Opapp ((App Opapp ((Var (Short "filter")) (Var (Short "v3")))) (Var (Short "v1")))))) (App Opapp ((App Opapp ((Var (Short "filter")) (Var (Short "v3")))) (Var (Short "v1")))))))))) (Dlocal ((Dletrec (unk unk) (("partition_aux" "v3" Fun "v5" (Fun "v6" (Fun "v4" (Mat (Var (Short "v5")) (((Pcon (SOME (Short "[]")) nil) Con NONE ((App Opapp ((Var (Short "rev")) (Var (Short "v6")))) (App Opapp ((Var (Short "rev")) (Var (Short "v4")))))) ((Pcon (SOME (Short "::")) ("v2" "v1")) If (App Opapp ((Var (Short "v3")) (Var (Short "v2")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "partition_aux")) (Var (Short "v3")))) (Var (Short "v1")))) (Con (SOME (Short "::")) ((Var (Short "v2")) (Var (Short "v6")))))) (Var (Short "v4")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "partition_aux")) (Var (Short "v3")))) (Var (Short "v1")))) (Var (Short "v6")))) (Con (SOME (Short "::")) ((Var (Short "v2")) (Var (Short "v4"))))))))))))))) ((Dlet (unk unk) "partition" (Fun "v1" (Fun "v2" (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "partition_aux")) (Var (Short "v1")))) (Var (Short "v2")))) (Con (SOME (Short "[]")) nil))) (Con (SOME (Short "[]")) nil)))))) (Dletrec (unk unk) (("foldl" "v4" Fun "v3" (Fun "v5" (Mat (Var (Short "v5")) (((Pcon (SOME (Short "[]")) nil) Var (Short "v3")) ((Pcon (SOME (Short "::")) ("v2" "v1")) App Opapp ((App Opapp ((App Opapp ((Var (Short "foldl")) (Var (Short "v4")))) (App Opapp ((App Opapp ((Var (Short "v4")) (Var (Short "v2")))) (Var (Short "v3")))))) (Var (Short "v1")))))))))) (Dlocal ((Dletrec (unk unk) (("foldli_aux" "v4" Fun "v3" (Fun "v5" (Fun "v6" (Mat (Var (Short "v6")) (((Pcon (SOME (Short "[]")) nil) Var (Short "v3")) ((Pcon (SOME (Short "::")) ("v2" "v1")) App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "foldli_aux")) (Var (Short "v4")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "v4")) (Var (Short "v5")))) (Var (Short "v2")))) (Var (Short "v3")))))) (App OpnPlus ((Var (Short "v5")) (Lit 1))))) (Var (Short "v1")))))))))))) ((Dlet (unk unk) "foldli" (Fun "v2" (Fun "v1" (Fun "v3" (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "foldli_aux")) (Var (Short "v2")))) (Var (Short "v1")))) (Lit 0))) (Var (Short "v3")))))))) (Dletrec (unk unk) (("foldr" "v4" Fun "v3" (Fun "v5" (Mat (Var (Short "v5")) (((Pcon (SOME (Short "[]")) nil) Var (Short "v3")) ((Pcon (SOME (Short "::")) ("v2" "v1")) App Opapp ((App Opapp ((Var (Short "v4")) (Var (Short "v2")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "foldr")) (Var (Short "v4")))) (Var (Short "v3")))) (Var (Short "v1")))))))))))) (Dletrec (unk unk) (("foldri" "v5" Fun "v4" (Fun "v6" (Mat (Var (Short "v6")) (((Pcon (SOME (Short "[]")) nil) Var (Short "v4")) ((Pcon (SOME (Short "::")) ("v3" "v2")) App Opapp ((App Opapp ((App Opapp ((Var (Short "v5")) (Lit 0))) (Var (Short "v3")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "foldri")) (Fun "v1" (App Opapp ((Var (Short "v5")) (App OpnPlus ((Var (Short "v1")) (Lit 1)))))))) (Var (Short "v4")))) (Var (Short "v2")))))))))))) (Dletrec (unk unk) (("exists" "v3" Fun "v4" (Mat (Var (Short "v4")) (((Pcon (SOME (Short "[]")) nil) App OpbLt ((Lit 0) (Lit 0))) ((Pcon (SOME (Short "::")) ("v2" "v1")) Log Or (App Opapp ((Var (Short "v3")) (Var (Short "v2")))) (App Opapp ((App Opapp ((Var (Short "exists")) (Var (Short "v3")))) (Var (Short "v1")))))))))) (Dletrec (unk unk) (("all" "v3" Fun "v4" (Mat (Var (Short "v4")) (((Pcon (SOME (Short "[]")) nil) App OpbLeq ((Lit 0) (Lit 0))) ((Pcon (SOME (Short "::")) ("v2" "v1")) Log And (App Opapp ((Var (Short "v3")) (Var (Short "v2")))) (App Opapp ((App Opapp ((Var (Short "all")) (Var (Short "v3")))) (Var (Short "v1")))))))))) (Dletrec (unk unk) (("snoc" "v4" Fun "v3" (Mat (Var (Short "v3")) (((Pcon (SOME (Short "[]")) nil) Con (SOME (Short "::")) ((Var (Short "v4")) (Con (SOME (Short "[]")) nil))) ((Pcon (SOME (Short "::")) ("v2" "v1")) Con (SOME (Short "::")) ((Var (Short "v2")) (App Opapp ((App Opapp ((Var (Short "snoc")) (Var (Short "v4")))) (Var (Short "v1"))))))))))) (Dlocal ((Dletrec (unk unk) (("genlist_aux" "v1" Fun "v3" (Fun "v2" (If (App Equality ((Var (Short "v3")) (Lit 0))) (Var (Short "v2")) (App Opapp ((App Opapp ((App Opapp ((Var (Short "genlist_aux")) (Var (Short "v1")))) (Let (SOME "k") (App OpnMinus ((Var (Short "v3")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))) (Con (SOME (Short "::")) ((App Opapp ((Var (Short "v1")) (Let (SOME "k") (App OpnMinus ((Var (Short "v3")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))) (Var (Short "v2")))))))))))) ((Dlet (unk unk) "genlist" (Fun "v1" (Fun "v2" (App Opapp ((App Opapp ((App Opapp ((Var (Short "genlist_aux")) (Var (Short "v1")))) (Var (Short "v2")))) (Con (SOME (Short "[]")) nil)))))) (Dletrec (unk unk) (("tabulate" "v8" Fun "v7" (Fun "v6" (Fun "v5" (Let (SOME "v4") (App OpbGeq ((Var (Short "v8")) (Var (Short "v7")))) (If (Var (Short "v4")) (App Opapp ((Var (Short "rev")) (Var (Short "v5")))) (Let (SOME "v3") (App Opapp ((Var (Short "v6")) (Var (Short "v8")))) (Let (SOME "v2") (App OpnPlus ((Var (Short "v8")) (Lit 1))) (Let (SOME "v1") (Con (SOME (Short "::")) ((Var (Short "v3")) (Var (Short "v5")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "tabulate")) (Var (Short "v2")))) (Var (Short "v7")))) (Var (Short "v6")))) (Var (Short "v1")))))))))))))) (Dlet (unk unk) "tabulate" (Fun "v3" (Fun "v2" (Let (SOME "v1") (Con (SOME (Short "[]")) nil) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "tabulate")) (Lit 0))) (Var (Short "v3")))) (Var (Short "v2")))) (Var (Short "v1")))))))) (Dletrec (unk unk) (("collate" "v7" Fun "v8" (Fun "v9" (Mat (Var (Short "v8")) (((Pcon (SOME (Short "[]")) nil) Mat (Var (Short "v9")) (((Pcon (SOME (Short "[]")) nil) Con (SOME (Short "Equal")) nil) ((Pcon (SOME (Short "::")) ("v2" "v1")) Con (SOME (Short "Less")) nil))) ((Pcon (SOME (Short "::")) ("v6" "v5")) Mat (Var (Short "v9")) (((Pcon (SOME (Short "[]")) nil) Con (SOME (Short "Greater")) nil) ((Pcon (SOME (Short "::")) ("v4" "v3")) If (App Equality ((App Opapp ((App Opapp ((Var (Short "v7")) (Var (Short "v6")))) (Var (Short "v4")))) (Con (SOME (Short "Equal")) nil))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "collate")) (Var (Short "v7")))) (Var (Short "v5")))) (Var (Short "v3")))) (App Opapp ((App Opapp ((Var (Short "v7")) (Var (Short "v6")))) (Var (Short "v4"))))))))))))) (Dletrec (unk unk) (("zip" "v7" Mat (Var (Short "v7")) (((Pcon NONE ("v6" "v5")) Mat (Var (Short "v6")) (((Pcon (SOME (Short "[]")) nil) Con (SOME (Short "[]")) nil) ((Pcon (SOME (Short "::")) ("v4" "v3")) Mat (Var (Short "v5")) (((Pcon (SOME (Short "[]")) nil) Con (SOME (Short "[]")) nil) ((Pcon (SOME (Short "::")) ("v2" "v1")) Con (SOME (Short "::")) ((Con NONE ((Var (Short "v4")) (Var (Short "v2")))) (App Opapp ((Var (Short "zip")) (Con NONE ((Var (Short "v3")) (Var (Short "v1")))))))))))))))) (Dletrec (unk unk) (("member" "v4" Fun "v3" (Mat (Var (Short "v3")) (((Pcon (SOME (Short "[]")) nil) App OpbLt ((Lit 0) (Lit 0))) ((Pcon (SOME (Short "::")) ("v2" "v1")) Log Or (App Equality ((Var (Short "v4")) (Var (Short "v2")))) (App Opapp ((App Opapp ((Var (Short "member")) (Var (Short "v4")))) (Var (Short "v1")))))))))) (Dletrec (unk unk) (("sum" "v3" Mat (Var (Short "v3")) (((Pcon (SOME (Short "[]")) nil) Lit 0) ((Pcon (SOME (Short "::")) ("v2" "v1")) App OpnPlus ((Var (Short "v2")) (App Opapp ((Var (Short "sum")) (Var (Short "v1")))))))))) (Dletrec (unk unk) (("unzip" "v8" Mat (Var (Short "v8")) (((Pcon (SOME (Short "[]")) nil) Con NONE ((Con (SOME (Short "[]")) nil) (Con (SOME (Short "[]")) nil))) ((Pcon (SOME (Short "::")) ("v7" "v6")) Mat (Var (Short "v7")) (((Pcon NONE ("v5" "v4")) Let (SOME "v3") (App Opapp ((Var (Short "unzip")) (Var (Short "v6")))) (Mat (Var (Short "v3")) (((Pcon NONE ("v2" "v1")) Con NONE ((Con (SOME (Short "::")) ((Var (Short "v5")) (Var (Short "v2")))) (Con (SOME (Short "::")) ((Var (Short "v4")) (Var (Short "v1"))))))))))))))) (Dlet (unk unk) "pad_right" (Fun "v1" (Fun "v2" (Fun "v3" (App ListAppend ((Var (Short "v3")) (App Opapp ((App Opapp ((Var (Short "genlist")) (App Opapp ((Var (Short "const")) (Var (Short "v1")))))) (Let (SOME "k") (App OpnMinus ((Var (Short "v2")) (App Opapp ((Var (Short "length")) (Var (Short "v3")))))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))))))))) (Dlet (unk unk) "pad_left" (Fun "v1" (Fun "v2" (Fun "v3" (App ListAppend ((App Opapp ((App Opapp ((Var (Short "genlist")) (App Opapp ((Var (Short "const")) (Var (Short "v1")))))) (Let (SOME "k") (App OpnMinus ((Var (Short "v2")) (App Opapp ((Var (Short "length")) (Var (Short "v3")))))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))) (Var (Short "v3")))))))) (Dletrec (unk unk) (("all_distinct" "v3" Mat (Var (Short "v3")) (((Pcon (SOME (Short "[]")) nil) App OpbLeq ((Lit 0) (Lit 0))) ((Pcon (SOME (Short "::")) ("v2" "v1")) Log And (App Equality ((App Opapp ((App Opapp ((Var (Short "member")) (Var (Short "v2")))) (Var (Short "v1")))) (App OpbLt ((Lit 0) (Lit 0))))) (App Opapp ((Var (Short "all_distinct")) (Var (Short "v1"))))))))) (Dletrec (unk unk) (("isPrefix" "v5" Fun "v6" (Mat (Var (Short "v5")) (((Pcon (SOME (Short "[]")) nil) App OpbLeq ((Lit 0) (Lit 0))) ((Pcon (SOME (Short "::")) ("v4" "v3")) Mat (Var (Short "v6")) (((Pcon (SOME (Short "[]")) nil) App OpbLt ((Lit 0) (Lit 0))) ((Pcon (SOME (Short "::")) ("v2" "v1")) Log And (App Equality ((Var (Short "v4")) (Var (Short "v2")))) (App Opapp ((App Opapp ((Var (Short "isPrefix")) (Var (Short "v3")))) (Var (Short "v1")))))))))))) (Dletrec (unk unk) (("front" "v" Mat (Var (Short "v")) (((Pcon (SOME (Short "[]")) nil) Raise (Con (SOME (Short "Bind")) nil)) ((Pcon (SOME (Short "::")) ("v2" "v1")) If (App Equality ((Var (Short "v1")) (Con (SOME (Short "[]")) nil))) (Con (SOME (Short "[]")) nil) (Con (SOME (Short "::")) ((Var (Short "v2")) (App Opapp ((Var (Short "front")) (Var (Short "v1"))))))))))) (Dletrec (unk unk) (("splitAtPki" "v6" Fun "v7" (Fun "v8" (Mat (Var (Short "v8")) (((Pcon (SOME (Short "[]")) nil) App Opapp ((App Opapp ((Var (Short "v7")) (Con (SOME (Short "[]")) nil))) (Con (SOME (Short "[]")) nil))) ((Pcon (SOME (Short "::")) ("v5" "v4")) If (App Opapp ((App Opapp ((Var (Short "v6")) (Lit 0))) (Var (Short "v5")))) (App Opapp ((App Opapp ((Var (Short "v7")) (Con (SOME (Short "[]")) nil))) (Con (SOME (Short "::")) ((Var (Short "v5")) (Var (Short "v4")))))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "splitAtPki")) (App Opapp ((App Opapp ((Var (Short "o")) (Var (Short "v6")))) (Fun "v1" (App OpnPlus ((Var (Short "v1")) (Lit 1)))))))) (Fun "v3" (Fun "v2" (App Opapp ((App Opapp ((Var (Short "v7")) (Con (SOME (Short "::")) ((Var (Short "v5")) (Var (Short "v3")))))) (Var (Short "v2")))))))) (Var (Short "v4"))))))))))) (Dletrec (unk unk) (("update" "v3" Fun "v4" (Fun "v5" (Mat (Var (Short "v5")) (((Pcon (SOME (Short "[]")) nil) Con (SOME (Short "[]")) nil) ((Pcon (SOME (Short "::")) ("v2" "v1")) If (App Equality ((Var (Short "v4")) (Lit 0))) (Con (SOME (Short "::")) ((Var (Short "v3")) (Var (Short "v1")))) (Con (SOME (Short "::")) ((Var (Short "v2")) (App Opapp ((App Opapp ((App Opapp ((Var (Short "update")) (Var (Short "v3")))) (Let (SOME "k") (App OpnMinus ((Var (Short "v4")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))) (Var (Short "v1"))))))))))))) (Dletrec (unk unk) (("compare" "v7" Fun "v8" (Fun "v9" (Mat (Var (Short "v8")) (((Pcon (SOME (Short "[]")) nil) Mat (Var (Short "v9")) (((Pcon (SOME (Short "[]")) nil) Con (SOME (Short "Equal")) nil) ((Pcon (SOME (Short "::")) ("v2" "v1")) Con (SOME (Short "Less")) nil))) ((Pcon (SOME (Short "::")) ("v6" "v5")) Mat (Var (Short "v9")) (((Pcon (SOME (Short "[]")) nil) Con (SOME (Short "Greater")) nil) ((Pcon (SOME (Short "::")) ("v4" "v3")) Mat (App Opapp ((App Opapp ((Var (Short "v7")) (Var (Short "v6")))) (Var (Short "v4")))) (((Pcon (SOME (Short "Less")) nil) Con (SOME (Short "Less")) nil) ((Pcon (SOME (Short "Equal")) nil) App Opapp ((App Opapp ((App Opapp ((Var (Short "compare")) (Var (Short "v7")))) (Var (Short "v5")))) (Var (Short "v3")))) ((Pcon (SOME (Short "Greater")) nil) Con (SOME (Short "Greater")) nil))))))))))) (Dlocal ((Dletrec (unk unk) (("qsort_part" "v3" Fun "v5" (Fun "v4" (Fun "v6" (Fun "v7" (Mat (Var (Short "v4")) (((Pcon (SOME (Short "[]")) nil) Con NONE ((Var (Short "v6")) (Var (Short "v7")))) ((Pcon (SOME (Short "::")) ("v2" "v1")) If (App Opapp ((App Opapp ((Var (Short "v3")) (Var (Short "v2")))) (Var (Short "v5")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "qsort_part")) (Var (Short "v3")))) (Var (Short "v5")))) (Var (Short "v1")))) (Con (SOME (Short "::")) ((Var (Short "v2")) (Var (Short "v6")))))) (Var (Short "v7")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "qsort_part")) (Var (Short "v3")))) (Var (Short "v5")))) (Var (Short "v1")))) (Var (Short "v6")))) (Con (SOME (Short "::")) ((Var (Short "v2")) (Var (Short "v7"))))))))))))))) (Dletrec (unk unk) (("qsort_acc" "v6" Fun "v7" (Fun "v8" (Mat (Var (Short "v7")) (((Pcon (SOME (Short "[]")) nil) Var (Short "v8")) ((Pcon (SOME (Short "::")) ("v5" "v4")) Let (SOME "v3") (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "qsort_part")) (Var (Short "v6")))) (Var (Short "v5")))) (Var (Short "v4")))) (Con (SOME (Short "[]")) nil))) (Con (SOME (Short "[]")) nil))) (Mat (Var (Short "v3")) (((Pcon NONE ("v2" "v1")) App Opapp ((App Opapp ((App Opapp ((Var (Short "qsort_acc")) (Var (Short "v6")))) (Var (Short "v2")))) (Con (SOME (Short "::")) ((Var (Short "v5")) (App Opapp ((App Opapp ((App Opapp ((Var (Short "qsort_acc")) (Var (Short "v6")))) (Var (Short "v1")))) (Var (Short "v8")))))))))))))))))) ((Dlet (unk unk) "sort" (Fun "v1" (Fun "v2" (App Opapp ((App Opapp ((App Opapp ((Var (Short "qsort_acc")) (Var (Short "v1")))) (Var (Short "v2")))) (Con (SOME (Short "[]")) nil)))))))))))))))))))))) (Dmod "Alist" ((Dletrec (unk unk) (("lookup" "v5" Fun "v6" (Mat (Var (Short "v5")) (((Pcon (SOME (Short "[]")) nil) Con (SOME (Short "None")) nil) ((Pcon (SOME (Short "::")) ("v4" "v3")) Mat (Var (Short "v4")) (((Pcon NONE ("v2" "v1")) If (App Equality ((Var (Short "v2")) (Var (Short "v6")))) (Con (SOME (Short "Some")) ((Var (Short "v1")))) (App Opapp ((App Opapp ((Var (Short "lookup")) (Var (Short "v3")))) (Var (Short "v6")))))))))))) (Dlet (unk unk) "update" (Fun "v3" (Fun "v4" (Mat (Var (Short "v4")) (((Pcon NONE ("v2" "v1")) Con (SOME (Short "::")) ((Con NONE ((Var (Short "v2")) (Var (Short "v1")))) (Var (Short "v3"))))))))) (Dletrec (unk unk) (("every" "v5" Fun "v6" (Fun "v7" (Mat (Var (Short "v7")) (((Pcon (SOME (Short "[]")) nil) App OpbLeq ((Lit 0) (Lit 0))) ((Pcon (SOME (Short "::")) ("v4" "v3")) Mat (Var (Short "v4")) (((Pcon NONE ("v2" "v1")) If (App Opapp ((App Opapp ((Var (Long "List" (Short "member"))) (Var (Short "v2")))) (Var (Short "v5")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "every")) (Var (Short "v5")))) (Var (Short "v6")))) (Var (Short "v3")))) (Log And (App Opapp ((Var (Short "v6")) (Con NONE ((Var (Short "v2")) (Var (Short "v1")))))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "every")) (Con (SOME (Short "::")) ((Var (Short "v2")) (Var (Short "v5")))))) (Var (Short "v6")))) (Var (Short "v3")))))))))))))) (Dlet (unk unk) "every" (Fun "v1" (App Opapp ((App Opapp ((Var (Short "every")) (Con (SOME (Short "[]")) nil))) (Var (Short "v1")))))) (Dletrec (unk unk) (("map" "v5" Fun "v6" (Mat (Var (Short "v6")) (((Pcon (SOME (Short "[]")) nil) Con (SOME (Short "[]")) nil) ((Pcon (SOME (Short "::")) ("v4" "v3")) Mat (Var (Short "v4")) (((Pcon NONE ("v2" "v1")) Con (SOME (Short "::")) ((Con NONE ((Var (Short "v2")) (App Opapp ((Var (Short "v5")) (Var (Short "v1")))))) (App Opapp ((App Opapp ((Var (Short "map")) (Var (Short "v5")))) (Var (Short "v3"))))))))))))) (Dletrec (unk unk) (("delete" "v5" Fun "v6" (Mat (Var (Short "v5")) (((Pcon (SOME (Short "[]")) nil) Con (SOME (Short "[]")) nil) ((Pcon (SOME (Short "::")) ("v4" "v3")) Mat (Var (Short "v4")) (((Pcon NONE ("v2" "v1")) If (App Equality ((Var (Short "v2")) (Var (Short "v6")))) (App Opapp ((App Opapp ((Var (Short "delete")) (Var (Short "v3")))) (Var (Short "v6")))) (Con (SOME (Short "::")) ((Con NONE ((Var (Short "v2")) (Var (Short "v1")))) (App Opapp ((App Opapp ((Var (Short "delete")) (Var (Short "v3")))) (Var (Short "v6")))))))))))))))) (Dmod "Vector" ((Dtabbrev (unk unk) ("'a") "vector" (Atapp ((Atvar "'a")) (Short "vector"))) (Dlet (unk unk) "fromList" (Fun "v1" (App VfromList ((Var (Short "v1")))))) (Dlet (unk unk) "length" (Fun "v1" (App Vlength ((Var (Short "v1")))))) (Dlet (unk unk) "sub" (Fun "v1" (Fun "v2" (App Vsub ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "tabulate" (Fun "v2" (Fun "v1" (App VfromList ((App Opapp ((App Opapp ((Var (Long "List" (Short "genlist"))) (Var (Short "v1")))) (Var (Short "v2"))))))))) (Dlocal ((Dletrec (unk unk) (("tolist_aux" "v2" Fun "v1" (If (App OpbLeq ((App Vlength ((Var (Short "v2")))) (Var (Short "v1")))) (Con (SOME (Short "[]")) nil) (Con (SOME (Short "::")) ((App Vsub ((Var (Short "v2")) (Var (Short "v1")))) (App Opapp ((App Opapp ((Var (Short "tolist_aux")) (Var (Short "v2")))) (App OpnPlus ((Var (Short "v1")) (Lit 1)))))))))))) ((Dlet (unk unk) "toList" (Fun "v1" (App Opapp ((App Opapp ((Var (Short "tolist_aux")) (Var (Short "v1")))) (Lit 0))))) (Dlet (unk unk) "update" (Fun "v2" (Fun "v1" (Fun "v3" (App VfromList ((App Opapp ((App Opapp ((App Opapp ((Var (Long "List" (Short "update"))) (Var (Short "v3")))) (Var (Short "v1")))) (App Opapp ((Var (Short "toList")) (Var (Short "v2")))))))))))) (Dlet (unk unk) "concat" (Fun "v1" (App VfromList ((App Opapp ((Var (Long "List" (Short "concat"))) (App Opapp ((App Opapp ((Var (Long "List" (Short "map"))) (Var (Short "toList")))) (Var (Short "v1")))))))))) (Dlet (unk unk) "map" (Fun "v2" (Fun "v1" (App VfromList ((App Opapp ((App Opapp ((Var (Long "List" (Short "map"))) (Var (Short "v1")))) (App Opapp ((Var (Short "toList")) (Var (Short "v2"))))))))))) (Dlet (unk unk) "mapi" (Fun "v2" (Fun "v1" (App VfromList ((App Opapp ((App Opapp ((Var (Long "List" (Short "mapi"))) (Var (Short "v1")))) (App Opapp ((Var (Short "toList")) (Var (Short "v2"))))))))))) (Dlocal ((Dletrec (unk unk) (("foldli_aux" "v2" Fun "v1" (Fun "v5" (Fun "v3" (Fun "v4" (If (App Equality ((Var (Short "v4")) (Lit 0))) (Var (Short "v1")) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "foldli_aux")) (Var (Short "v2")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "v2")) (Var (Short "v3")))) (App Vsub ((Var (Short "v5")) (Var (Short "v3")))))) (Var (Short "v1")))))) (Var (Short "v5")))) (App OpnPlus ((Var (Short "v3")) (Lit 1))))) (Let (SOME "k") (App OpnMinus ((Var (Short "v4")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))))))))))) ((Dlet (unk unk) "foldli" (Fun "v2" (Fun "v1" (Fun "v3" (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "foldli_aux")) (Var (Short "v2")))) (Var (Short "v1")))) (Var (Short "v3")))) (Lit 0))) (App Vlength ((Var (Short "v3")))))))))) (Dlocal ((Dletrec (unk unk) (("foldl_aux" "v2" Fun "v1" (Fun "v5" (Fun "v3" (Fun "v4" (If (App Equality ((Var (Short "v4")) (Lit 0))) (Var (Short "v1")) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "foldl_aux")) (Var (Short "v2")))) (App Opapp ((App Opapp ((Var (Short "v2")) (Var (Short "v1")))) (App Vsub ((Var (Short "v5")) (Var (Short "v3")))))))) (Var (Short "v5")))) (App OpnPlus ((Var (Short "v3")) (Lit 1))))) (Let (SOME "k") (App OpnMinus ((Var (Short "v4")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))))))))))) ((Dlet (unk unk) "foldl" (Fun "v2" (Fun "v1" (Fun "v3" (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "foldl_aux")) (Var (Short "v2")))) (Var (Short "v1")))) (Var (Short "v3")))) (Lit 0))) (App Vlength ((Var (Short "v3")))))))))) (Dlocal ((Dletrec (unk unk) (("foldri_aux" "v2" Fun "v1" (Fun "v4" (Fun "v3" (If (App Equality ((Var (Short "v3")) (Lit 0))) (Var (Short "v1")) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "foldri_aux")) (Var (Short "v2")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "v2")) (Let (SOME "k") (App OpnMinus ((Var (Short "v3")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))) (App Vsub ((Var (Short "v4")) (Let (SOME "k") (App OpnMinus ((Var (Short "v3")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))))) (Var (Short "v1")))))) (Var (Short "v4")))) (Let (SOME "k") (App OpnMinus ((Var (Short "v3")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k"))))))))))))) ((Dlet (unk unk) "foldri" (Fun "v2" (Fun "v1" (Fun "v3" (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "foldri_aux")) (Var (Short "v2")))) (Var (Short "v1")))) (Var (Short "v3")))) (App Vlength ((Var (Short "v3")))))))))) (Dlocal ((Dletrec (unk unk) (("foldr_aux" "v2" Fun "v1" (Fun "v4" (Fun "v3" (If (App Equality ((Var (Short "v3")) (Lit 0))) (Var (Short "v1")) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "foldr_aux")) (Var (Short "v2")))) (App Opapp ((App Opapp ((Var (Short "v2")) (App Vsub ((Var (Short "v4")) (Let (SOME "k") (App OpnMinus ((Var (Short "v3")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))))) (Var (Short "v1")))))) (Var (Short "v4")))) (Let (SOME "k") (App OpnMinus ((Var (Short "v3")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k"))))))))))))) ((Dlet (unk unk) "foldr" (Fun "v2" (Fun "v1" (Fun "v3" (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "foldr_aux")) (Var (Short "v2")))) (Var (Short "v1")))) (Var (Short "v3")))) (App Vlength ((Var (Short "v3")))))))))) (Dlocal ((Dletrec (unk unk) (("findi_aux" "v1" Fun "v4" (Fun "v2" (Fun "v3" (If (App Equality ((Var (Short "v3")) (Lit 0))) (Con (SOME (Short "None")) nil) (If (App Opapp ((App Opapp ((Var (Short "v1")) (Var (Short "v2")))) (App Vsub ((Var (Short "v4")) (Var (Short "v2")))))) (Con (SOME (Short "Some")) ((Con NONE ((Var (Short "v2")) (App Vsub ((Var (Short "v4")) (Var (Short "v2")))))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "findi_aux")) (Var (Short "v1")))) (Var (Short "v4")))) (App OpnPlus ((Var (Short "v2")) (Lit 1))))) (Let (SOME "k") (App OpnMinus ((Var (Short "v3")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))))))))))) ((Dlet (unk unk) "findi" (Fun "v1" (Fun "v2" (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "findi_aux")) (Var (Short "v1")))) (Var (Short "v2")))) (Lit 0))) (App Vlength ((Var (Short "v2"))))))))) (Dlocal ((Dletrec (unk unk) (("find_aux" "v1" Fun "v4" (Fun "v2" (Fun "v3" (If (App Equality ((Var (Short "v3")) (Lit 0))) (Con (SOME (Short "None")) nil) (If (App Opapp ((Var (Short "v1")) (App Vsub ((Var (Short "v4")) (Var (Short "v2")))))) (Con (SOME (Short "Some")) ((App Vsub ((Var (Short "v4")) (Var (Short "v2")))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "find_aux")) (Var (Short "v1")))) (Var (Short "v4")))) (App OpnPlus ((Var (Short "v2")) (Lit 1))))) (Let (SOME "k") (App OpnMinus ((Var (Short "v3")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))))))))))) ((Dlet (unk unk) "find" (Fun "v1" (Fun "v2" (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "find_aux")) (Var (Short "v1")))) (Var (Short "v2")))) (Lit 0))) (App Vlength ((Var (Short "v2"))))))))) (Dlocal ((Dletrec (unk unk) (("exists_aux" "v1" Fun "v4" (Fun "v2" (Fun "v3" (If (App Equality ((Var (Short "v3")) (Lit 0))) (App OpbLt ((Lit 0) (Lit 0))) (If (App Opapp ((Var (Short "v1")) (App Vsub ((Var (Short "v4")) (Var (Short "v2")))))) (App OpbLeq ((Lit 0) (Lit 0))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "exists_aux")) (Var (Short "v1")))) (Var (Short "v4")))) (App OpnPlus ((Var (Short "v2")) (Lit 1))))) (Let (SOME "k") (App OpnMinus ((Var (Short "v3")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))))))))))) ((Dlet (unk unk) "exists" (Fun "v1" (Fun "v2" (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "exists_aux")) (Var (Short "v1")))) (Var (Short "v2")))) (Lit 0))) (App Vlength ((Var (Short "v2"))))))))) (Dlocal ((Dletrec (unk unk) (("all_aux" "v1" Fun "v4" (Fun "v2" (Fun "v3" (If (App Equality ((Var (Short "v3")) (Lit 0))) (App OpbLeq ((Lit 0) (Lit 0))) (If (App Opapp ((Var (Short "v1")) (App Vsub ((Var (Short "v4")) (Var (Short "v2")))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "all_aux")) (Var (Short "v1")))) (Var (Short "v4")))) (App OpnPlus ((Var (Short "v2")) (Lit 1))))) (Let (SOME "k") (App OpnMinus ((Var (Short "v3")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))) (App OpbLt ((Lit 0) (Lit 0))))))))))) ((Dlet (unk unk) "all" (Fun "v1" (Fun "v2" (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "all_aux")) (Var (Short "v1")))) (Var (Short "v2")))) (Lit 0))) (App Vlength ((Var (Short "v2"))))))))) (Dlocal ((Dletrec (unk unk) (("collate_aux" "v1" Fun "v5" (Fun "v6" (Fun "v2" (Fun "v3" (Fun "v4" (If (App Equality ((Var (Short "v4")) (Lit 0))) (Var (Short "v3")) (If (App Equality ((App Opapp ((App Opapp ((Var (Short "v1")) (App Vsub ((Var (Short "v5")) (Var (Short "v2")))))) (App Vsub ((Var (Short "v6")) (Var (Short "v2")))))) (Con (SOME (Short "Equal")) nil))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "collate_aux")) (Var (Short "v1")))) (Var (Short "v5")))) (Var (Short "v6")))) (App OpnPlus ((Var (Short "v2")) (Lit 1))))) (Var (Short "v3")))) (Let (SOME "k") (App OpnMinus ((Var (Short "v4")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))) (App Opapp ((App Opapp ((Var (Short "v1")) (App Vsub ((Var (Short "v5")) (Var (Short "v2")))))) (App Vsub ((Var (Short "v6")) (Var (Short "v2")))))))))))))))) ((Dlet (unk unk) "collate" (Fun "v1" (Fun "v2" (Fun "v3" (If (App OpbLt ((App Vlength ((Var (Short "v2")))) (App Vlength ((Var (Short "v3")))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "collate_aux")) (Var (Short "v1")))) (Var (Short "v2")))) (Var (Short "v3")))) (Lit 0))) (Con (SOME (Short "Less")) nil))) (App Vlength ((Var (Short "v2")))))) (If (App OpbLt ((App Vlength ((Var (Short "v3")))) (App Vlength ((Var (Short "v2")))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "collate_aux")) (Var (Short "v1")))) (Var (Short "v2")))) (Var (Short "v3")))) (Lit 0))) (Con (SOME (Short "Greater")) nil))) (App Vlength ((Var (Short "v3")))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "collate_aux")) (Var (Short "v1")))) (Var (Short "v2")))) (Var (Short "v3")))) (Lit 0))) (Con (SOME (Short "Equal")) nil))) (App Vlength ((Var (Short "v3")))))))))))))))))))))))))))))))))) (Dmod "String" ((Dtabbrev (unk unk) nil "string" (Atapp nil (Short "string"))) (Dlet (unk unk) "sub" (Fun "v1" (Fun "v2" (App Strsub ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "implode" (Fun "v1" (App Implode ((Var (Short "v1")))))) (Dlet (unk unk) "explode" (Fun "v1" (App Explode ((Var (Short "v1")))))) (Dlet (unk unk) "size" (Fun "v1" (App Strlen ((Var (Short "v1")))))) (Dlet (unk unk) "concat" (Fun "v1" (App Strcat ((Var (Short "v1")))))) (Dlet (unk unk) "substring" (Fun "v1" (Fun "v2" (Fun "v3" (App CopyStrStr ((Var (Short "v1")) (Var (Short "v2")) (Var (Short "v3")))))))) (Dlet (unk unk) "strcat" (Fun "v1" (Fun "v2" (App Strcat ((Con (SOME (Short "::")) ((Var (Short "v1")) (Con (SOME (Short "::")) ((Var (Short "v2")) (Con (SOME (Short "[]")) nil)))))))))) (Dlet (unk unk) "^" (Fun "v1" (Fun "v2" (App Opapp ((App Opapp ((Var (Short "strcat")) (Var (Short "v1")))) (Var (Short "v2"))))))) (Dlet (unk unk) "extract" (Fun "v4" (Fun "v2" (Fun "v3" (If (App OpbLeq ((App Strlen ((Var (Short "v4")))) (Var (Short "v2")))) (Lit "") (Mat (Var (Short "v3")) (((Pcon (SOME (Short "None")) nil) App CopyStrStr ((Var (Short "v4")) (Var (Short "v2")) (Let (SOME "k") (App OpnMinus ((App Strlen ((Var (Short "v4")))) (Var (Short "v2")))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))) ((Pcon (SOME (Short "Some")) ("v1")) App CopyStrStr ((Var (Short "v4")) (Var (Short "v2")) (App Opapp ((App Opapp ((Var (Short "min")) (Let (SOME "k") (App OpnMinus ((App Strlen ((Var (Short "v4")))) (Var (Short "v2")))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))) (Var (Short "v1"))))))))))))) (Dlocal ((Dletrec (unk unk) (("concatwith_aux" "v3" Fun "v4" (Fun "v5" (Mat (Var (Short "v4")) (((Pcon (SOME (Short "[]")) nil) Lit "") ((Pcon (SOME (Short "::")) ("v2" "v1")) If (Var (Short "v5")) (App Opapp ((App Opapp ((Var (Short "strcat")) (Var (Short "v2")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "concatwith_aux")) (Var (Short "v3")))) (Var (Short "v1")))) (App OpbLt ((Lit 0) (Lit 0))))))) (App Opapp ((App Opapp ((Var (Short "strcat")) (Var (Short "v3")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "concatwith_aux")) (Var (Short "v3")))) (Con (SOME (Short "::")) ((Var (Short "v2")) (Var (Short "v1")))))) (App OpbLeq ((Lit 0) (Lit 0))))))))))))))) ((Dlet (unk unk) "concatWith" (Fun "v2" (Fun "v1" (App Opapp ((App Opapp ((App Opapp ((Var (Short "concatwith_aux")) (Var (Short "v2")))) (Var (Short "v1")))) (App OpbLeq ((Lit 0) (Lit 0)))))))) (Dlet (unk unk) "str" (Fun "v1" (App Implode ((Con (SOME (Short "::")) ((Var (Short "v1")) (Con (SOME (Short "[]")) nil))))))) (Dlocal ((Dletrec (unk unk) (("translate_aux" "v1" Fun "v4" (Fun "v2" (Fun "v3" (If (App Equality ((Var (Short "v3")) (Lit 0))) (Con (SOME (Short "[]")) nil) (Con (SOME (Short "::")) ((App Opapp ((Var (Short "v1")) (App Strsub ((Var (Short "v4")) (Var (Short "v2")))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "translate_aux")) (Var (Short "v1")))) (Var (Short "v4")))) (App OpnPlus ((Var (Short "v2")) (Lit 1))))) (Let (SOME "k") (App OpnMinus ((Var (Short "v3")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k"))))))))))))))) ((Dlet (unk unk) "translate" (Fun "v1" (Fun "v2" (App Implode ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "translate_aux")) (Var (Short "v1")))) (Var (Short "v2")))) (Lit 0))) (App Strlen ((Var (Short "v2"))))))))))) (Dlocal ((Dletrec (unk unk) (("splitl_aux" "v1" Fun "v3" (Fun "v2" (If (Log And (App OpbLt ((Var (Short "v2")) (App Strlen ((Var (Short "v3")))))) (App Opapp ((Var (Short "v1")) (App Strsub ((Var (Short "v3")) (Var (Short "v2"))))))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "splitl_aux")) (Var (Short "v1")))) (Var (Short "v3")))) (App OpnPlus ((Var (Short "v2")) (Lit 1))))) (Con NONE ((App Opapp ((App Opapp ((App Opapp ((Var (Short "extract")) (Var (Short "v3")))) (Lit 0))) (Con (SOME (Short "Some")) ((Var (Short "v2")))))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "extract")) (Var (Short "v3")))) (Var (Short "v2")))) (Con (SOME (Short "None")) nil))))))))))) ((Dlet (unk unk) "split" (Fun "v1" (Fun "v2" (App Opapp ((App Opapp ((App Opapp ((Var (Short "splitl_aux")) (Var (Short "v1")))) (Var (Short "v2")))) (Lit 0)))))) (Dlocal ((Dletrec (unk unk) (("tokens_aux" "v3" Fun "v4" (Fun "v5" (Fun "v6" (Fun "v7" (Mat (Var (Short "v5")) (((Pcon (SOME (Short "[]")) nil) If (App Equality ((Var (Short "v7")) (Lit 0))) (Con (SOME (Short "[]")) nil) (If (App Opapp ((Var (Short "v3")) (App Strsub ((Var (Short "v4")) (Var (Short "v6")))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "tokens_aux")) (Var (Short "v3")))) (Var (Short "v4")))) (Con (SOME (Short "[]")) nil))) (App OpnPlus ((Var (Short "v6")) (Lit 1))))) (Let (SOME "k") (App OpnMinus ((Var (Short "v7")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "tokens_aux")) (Var (Short "v3")))) (Var (Short "v4")))) (Con (SOME (Short "::")) ((App Strsub ((Var (Short "v4")) (Var (Short "v6")))) (Con (SOME (Short "[]")) nil))))) (App OpnPlus ((Var (Short "v6")) (Lit 1))))) (Let (SOME "k") (App OpnMinus ((Var (Short "v7")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))))) ((Pcon (SOME (Short "::")) ("v2" "v1")) If (App Equality ((Var (Short "v7")) (Lit 0))) (Con (SOME (Short "::")) ((App Implode ((App Opapp ((Var (Long "List" (Short "rev"))) (Con (SOME (Short "::")) ((Var (Short "v2")) (Var (Short "v1")))))))) (Con (SOME (Short "[]")) nil))) (If (App Opapp ((Var (Short "v3")) (App Strsub ((Var (Short "v4")) (Var (Short "v6")))))) (Con (SOME (Short "::")) ((App Implode ((App Opapp ((Var (Long "List" (Short "rev"))) (Con (SOME (Short "::")) ((Var (Short "v2")) (Var (Short "v1")))))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "tokens_aux")) (Var (Short "v3")))) (Var (Short "v4")))) (Con (SOME (Short "[]")) nil))) (App OpnPlus ((Var (Short "v6")) (Lit 1))))) (Let (SOME "k") (App OpnMinus ((Var (Short "v7")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "tokens_aux")) (Var (Short "v3")))) (Var (Short "v4")))) (Con (SOME (Short "::")) ((App Strsub ((Var (Short "v4")) (Var (Short "v6")))) (Con (SOME (Short "::")) ((Var (Short "v2")) (Var (Short "v1")))))))) (App OpnPlus ((Var (Short "v6")) (Lit 1))))) (Let (SOME "k") (App OpnMinus ((Var (Short "v7")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k"))))))))))))))))) ((Dlet (unk unk) "tokens" (Fun "v1" (Fun "v2" (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "tokens_aux")) (Var (Short "v1")))) (Var (Short "v2")))) (Con (SOME (Short "[]")) nil))) (Lit 0))) (App Strlen ((Var (Short "v2"))))))))) (Dlocal ((Dletrec (unk unk) (("fields_aux" "v1" Fun "v4" (Fun "v5" (Fun "v2" (Fun "v3" (If (App Equality ((Var (Short "v3")) (Lit 0))) (Con (SOME (Short "::")) ((App Implode ((App Opapp ((Var (Long "List" (Short "rev"))) (Var (Short "v5")))))) (Con (SOME (Short "[]")) nil))) (If (App Opapp ((Var (Short "v1")) (App Strsub ((Var (Short "v4")) (Var (Short "v2")))))) (Con (SOME (Short "::")) ((App Implode ((App Opapp ((Var (Long "List" (Short "rev"))) (Var (Short "v5")))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "fields_aux")) (Var (Short "v1")))) (Var (Short "v4")))) (Con (SOME (Short "[]")) nil))) (App OpnPlus ((Var (Short "v2")) (Lit 1))))) (Let (SOME "k") (App OpnMinus ((Var (Short "v3")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "fields_aux")) (Var (Short "v1")))) (Var (Short "v4")))) (Con (SOME (Short "::")) ((App Strsub ((Var (Short "v4")) (Var (Short "v2")))) (Var (Short "v5")))))) (App OpnPlus ((Var (Short "v2")) (Lit 1))))) (Let (SOME "k") (App OpnMinus ((Var (Short "v3")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k"))))))))))))))) ((Dlet (unk unk) "fields" (Fun "v1" (Fun "v2" (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "fields_aux")) (Var (Short "v1")))) (Var (Short "v2")))) (Con (SOME (Short "[]")) nil))) (Lit 0))) (App Strlen ((Var (Short "v2"))))))))) (Dletrec (unk unk) (("findi" "v1" Fun "v2" (Fun "v3" (If (App OpbLt ((Var (Short "v2")) (App Strlen ((Var (Short "v3")))))) (If (App Opapp ((Var (Short "v1")) (App Strsub ((Var (Short "v3")) (Var (Short "v2")))))) (Con (SOME (Short "Some")) ((Var (Short "v2")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "findi")) (Var (Short "v1")))) (App OpnPlus ((Var (Short "v2")) (Lit 1))))) (Var (Short "v3"))))) (Con (SOME (Short "None")) nil)))))) (Dlocal ((Dletrec (unk unk) (("isstringthere_aux" "v2" Fun "v4" (Fun "v3" (Fun "v5" (Fun "v1" (If (App Equality ((Var (Short "v1")) (Lit 0))) (App OpbLeq ((Lit 0) (Lit 0))) (If (App Equality ((App Strsub ((Var (Short "v2")) (Var (Short "v3")))) (App Strsub ((Var (Short "v4")) (Var (Short "v5")))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "isstringthere_aux")) (Var (Short "v2")))) (Var (Short "v4")))) (App OpnPlus ((Var (Short "v3")) (Lit 1))))) (App OpnPlus ((Var (Short "v5")) (Lit 1))))) (Let (SOME "k") (App OpnMinus ((Var (Short "v1")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))) (App OpbLt ((Lit 0) (Lit 0)))))))))))) ((Dletrec (unk unk) (("isSubstring" "v4" Fun "v5" (Fun "v1" (Fun "v2" (Fun "v3" (If (App Equality ((Var (Short "v3")) (Lit 0))) (App OpbLt ((Lit 0) (Lit 0))) (If (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "isstringthere_aux")) (Var (Short "v4")))) (Var (Short "v5")))) (Lit 0))) (Var (Short "v2")))) (Var (Short "v1")))) (App OpbLeq ((Lit 0) (Lit 0))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "isSubstring")) (Var (Short "v4")))) (Var (Short "v5")))) (Var (Short "v1")))) (App OpnPlus ((Var (Short "v2")) (Lit 1))))) (Let (SOME "k") (App OpnMinus ((Var (Short "v3")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))))))))))) (Dlet (unk unk) "isSubstring" (Fun "v1" (Fun "v2" (If (App OpbLeq ((App Strlen ((Var (Short "v1")))) (App Strlen ((Var (Short "v2")))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "isSubstring")) (Var (Short "v1")))) (Var (Short "v2")))) (App Strlen ((Var (Short "v1")))))) (Lit 0))) (App OpnPlus ((Let (SOME "k") (App OpnMinus ((App Strlen ((Var (Short "v2")))) (App Strlen ((Var (Short "v1")))))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))) (Lit 1))))) (App OpbLt ((Lit 0) (Lit 0))))))) (Dlet (unk unk) "isSuffix" (Fun "v1" (Fun "v2" (If (App OpbLeq ((App Strlen ((Var (Short "v1")))) (App Strlen ((Var (Short "v2")))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "isstringthere_aux")) (Var (Short "v1")))) (Var (Short "v2")))) (Lit 0))) (Let (SOME "k") (App OpnMinus ((App Strlen ((Var (Short "v2")))) (App Strlen ((Var (Short "v1")))))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))) (App Strlen ((Var (Short "v1")))))) (App OpbLt ((Lit 0) (Lit 0))))))) (Dlet (unk unk) "isPrefix" (Fun "v1" (Fun "v2" (If (App OpbLeq ((App Strlen ((Var (Short "v1")))) (App Strlen ((Var (Short "v2")))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "isstringthere_aux")) (Var (Short "v1")))) (Var (Short "v2")))) (Lit 0))) (Lit 0))) (App Strlen ((Var (Short "v1")))))) (App OpbLt ((Lit 0) (Lit 0))))))) (Dlocal ((Dletrec (unk unk) (("compare_aux" "v3" Fun "v4" (Fun "v2" (Fun "v5" (Fun "v1" (If (App Equality ((Var (Short "v1")) (Lit 0))) (Var (Short "v2")) (If (App ChopbLt ((App Strsub ((Var (Short "v4")) (Var (Short "v5")))) (App Strsub ((Var (Short "v3")) (Var (Short "v5")))))) (Con (SOME (Short "Greater")) nil) (If (App ChopbLt ((App Strsub ((Var (Short "v3")) (Var (Short "v5")))) (App Strsub ((Var (Short "v4")) (Var (Short "v5")))))) (Con (SOME (Short "Less")) nil) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "compare_aux")) (Var (Short "v3")))) (Var (Short "v4")))) (Var (Short "v2")))) (App OpnPlus ((Var (Short "v5")) (Lit 1))))) (Let (SOME "k") (App OpnMinus ((Var (Short "v1")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))))))))))))) ((Dlet (unk unk) "compare" (Fun "v1" (Fun "v2" (If (App OpbLt ((App Strlen ((Var (Short "v1")))) (App Strlen ((Var (Short "v2")))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "compare_aux")) (Var (Short "v1")))) (Var (Short "v2")))) (Con (SOME (Short "Less")) nil))) (Lit 0))) (App Strlen ((Var (Short "v1")))))) (If (App OpbLt ((App Strlen ((Var (Short "v2")))) (App Strlen ((Var (Short "v1")))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "compare_aux")) (Var (Short "v1")))) (Var (Short "v2")))) (Con (SOME (Short "Greater")) nil))) (Lit 0))) (App Strlen ((Var (Short "v2")))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "compare_aux")) (Var (Short "v1")))) (Var (Short "v2")))) (Con (SOME (Short "Equal")) nil))) (Lit 0))) (App Strlen ((Var (Short "v2"))))))))))) (Dlet (unk unk) "<" (Fun "v1" (Fun "v2" (App Equality ((App Opapp ((App Opapp ((Var (Short "compare")) (Var (Short "v1")))) (Var (Short "v2")))) (Con (SOME (Short "Less")) nil)))))) (Dlet (unk unk) "<=" (Fun "v1" (Fun "v2" (App Equality ((App Equality ((App Opapp ((App Opapp ((Var (Short "compare")) (Var (Short "v1")))) (Var (Short "v2")))) (Con (SOME (Short "Greater")) nil))) (App OpbLt ((Lit 0) (Lit 0)))))))) (Dlet (unk unk) ">=" (Fun "v1" (Fun "v2" (App Equality ((App Equality ((App Opapp ((App Opapp ((Var (Short "compare")) (Var (Short "v1")))) (Var (Short "v2")))) (Con (SOME (Short "Less")) nil))) (App OpbLt ((Lit 0) (Lit 0)))))))) (Dlet (unk unk) ">" (Fun "v1" (Fun "v2" (App Equality ((App Opapp ((App Opapp ((Var (Short "compare")) (Var (Short "v1")))) (Var (Short "v2")))) (Con (SOME (Short "Greater")) nil)))))) (Dlocal ((Dletrec (unk unk) (("collate_aux" "v1" Fun "v5" (Fun "v6" (Fun "v3" (Fun "v2" (Fun "v4" (If (App Equality ((Var (Short "v4")) (Lit 0))) (Var (Short "v3")) (If (App Equality ((App Opapp ((App Opapp ((Var (Short "v1")) (App Strsub ((Var (Short "v5")) (Var (Short "v2")))))) (App Strsub ((Var (Short "v6")) (Var (Short "v2")))))) (Con (SOME (Short "Equal")) nil))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "collate_aux")) (Var (Short "v1")))) (Var (Short "v5")))) (Var (Short "v6")))) (Var (Short "v3")))) (App OpnPlus ((Var (Short "v2")) (Lit 1))))) (Let (SOME "k") (App OpnMinus ((Var (Short "v4")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))) (App Opapp ((App Opapp ((Var (Short "v1")) (App Strsub ((Var (Short "v5")) (Var (Short "v2")))))) (App Strsub ((Var (Short "v6")) (Var (Short "v2")))))))))))))))) ((Dlet (unk unk) "collate" (Fun "v1" (Fun "v2" (Fun "v3" (If (App OpbLt ((App Strlen ((Var (Short "v2")))) (App Strlen ((Var (Short "v3")))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "collate_aux")) (Var (Short "v1")))) (Var (Short "v2")))) (Var (Short "v3")))) (Con (SOME (Short "Less")) nil))) (Lit 0))) (App Strlen ((Var (Short "v2")))))) (If (App OpbLt ((App Strlen ((Var (Short "v3")))) (App Strlen ((Var (Short "v2")))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "collate_aux")) (Var (Short "v1")))) (Var (Short "v2")))) (Var (Short "v3")))) (Con (SOME (Short "Greater")) nil))) (Lit 0))) (App Strlen ((Var (Short "v3")))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "collate_aux")) (Var (Short "v1")))) (Var (Short "v2")))) (Var (Short "v3")))) (Con (SOME (Short "Equal")) nil))) (Lit 0))) (App Strlen ((Var (Short "v3")))))))))))) (Dlet (unk unk) "char_escape_seq" (Fun "v1" (If (App Equality ((Var (Short "v1")) (Lit (char "\\09")))) (Con (SOME (Short "Some")) ((Lit "\\\\t"))) (If (App Equality ((Var (Short "v1")) (Lit (char "\\0A")))) (Con (SOME (Short "Some")) ((Lit "\\\\n"))) (If (App Equality ((Var (Short "v1")) (Lit (char "\\\\")))) (Con (SOME (Short "Some")) ((Lit "\\\\\\\\"))) (If (App Equality ((Var (Short "v1")) (Lit (char "\"")))) (Con (SOME (Short "Some")) ((Lit "\\\\\""))) (Con (SOME (Short "None")) nil))))))) (Dlocal ((Dlet (unk unk) "char_escaped" (Fun "v2" (Mat (App Opapp ((Var (Short "char_escape_seq")) (Var (Short "v2")))) (((Pcon (SOME (Short "None")) nil) Con (SOME (Short "::")) ((Var (Short "v2")) (Con (SOME (Short "[]")) nil))) ((Pcon (SOME (Short "Some")) ("v1")) App Explode ((Var (Short "v1"))))))))) ((Dlet (unk unk) "escape_str" (Fun "v1" (App Implode ((App ListAppend ((App ListAppend ((Con (SOME (Short "::")) ((Lit (char "\"")) (Con (SOME (Short "[]")) nil))) (App Opapp ((Var (Long "List" (Short "concat"))) (App Opapp ((App Opapp ((Var (Long "List" (Short "map"))) (Var (Short "char_escaped")))) (App Explode ((Var (Short "v1")))))))))) (Con (SOME (Short "::")) ((Lit (char "\"")) (Con (SOME (Short "[]")) nil))))))))) (Dlet (unk unk) "escape_char" (Fun "v1" (App Implode ((App ListAppend ((App ListAppend ((Con (SOME (Short "::")) ((Lit (char "#")) (Con (SOME (Short "::")) ((Lit (char "\"")) (Con (SOME (Short "[]")) nil))))) (App Opapp ((Var (Short "char_escaped")) (Var (Short "v1")))))) (Con (SOME (Short "::")) ((Lit (char "\"")) (Con (SOME (Short "[]")) nil))))))))))))))))))))))))))))) (Dlet (unk unk) "+" (Fun "v1" (Fun "v2" (App OpnPlus ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "-" (Fun "v1" (Fun "v2" (App OpnMinus ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "*" (Fun "v1" (Fun "v2" (App OpnTimes ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "div" (Fun "v1" (Fun "v2" (App OpnDivide ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "mod" (Fun "v1" (Fun "v2" (App OpnModulo ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "<" (Fun "v1" (Fun "v2" (App OpbLt ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) ">" (Fun "v1" (Fun "v2" (App OpbGt ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "<=" (Fun "v1" (Fun "v2" (App OpbLeq ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) ">=" (Fun "v1" (Fun "v2" (App OpbGeq ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "~" (Fun "v1" (App OpnMinus ((Lit 0) (Var (Short "v1")))))) (Dlet (unk unk) "@" (Fun "v1" (Fun "v2" (App ListAppend ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "=" (Fun "v1" (Fun "v2" (App Equality ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "not" (Fun "v1" (App Equality ((Var (Short "v1")) (App OpbLt ((Lit 0) (Lit 0))))))) (Dlet (unk unk) "<>" (Fun "v1" (Fun "v2" (App Equality ((App Equality ((Var (Short "v1")) (Var (Short "v2")))) (App OpbLt ((Lit 0) (Lit 0)))))))) (Dlet (unk unk) "^" (Fun "v1" (Fun "v2" (App Opapp ((App Opapp ((Var (Long "String" (Short "strcat"))) (Var (Short "v1")))) (Var (Short "v2"))))))) (Dlet (unk unk) ":=" (Fun "x" (Fun "y" (App Opassign ((Var (Short "x")) (Var (Short "y"))))))) (Dlet (unk unk) "!" (Fun "x" (App Opderef ((Var (Short "x")))))) (Dmod "Bool" ((Dlet (unk unk) "toString" (Fun "v1" (If (Var (Short "v1")) (Lit "True") (Lit "False")))) (Dlet (unk unk) "compare" (Fun "v1" (Fun "v2" (If (Var (Short "v1")) (If (Var (Short "v2")) (Con (SOME (Short "Equal")) nil) (Con (SOME (Short "Greater")) nil)) (If (Var (Short "v2")) (Con (SOME (Short "Less")) nil) (Con (SOME (Short "Equal")) nil)))))))) (Dmod "Pair" ((Dlet (unk unk) "map" (Fun "v3" (Fun "v4" (Fun "v5" (Mat (Var (Short "v5")) (((Pcon NONE ("v2" "v1")) Con NONE ((App Opapp ((Var (Short "v3")) (Var (Short "v2")))) (App Opapp ((Var (Short "v4")) (Var (Short "v1")))))))))))) (Dlet (unk unk) "toString" (Fun "v3" (Fun "v4" (Fun "v5" (Mat (Var (Short "v5")) (((Pcon NONE ("v2" "v1")) App Strcat ((Con (SOME (Short "::")) ((Lit "(") (Con (SOME (Short "::")) ((App Opapp ((Var (Short "v3")) (Var (Short "v2")))) (Con (SOME (Short "::")) ((Lit ", ") (Con (SOME (Short "::")) ((App Opapp ((Var (Short "v4")) (Var (Short "v1")))) (Con (SOME (Short "::")) ((Lit ")") (Con (SOME (Short "[]")) nil))))))))))))))))))) (Dlet (unk unk) "compare" (Fun "v1" (Fun "v2" (Fun "v3" (Fun "v4" (Mat (App Opapp ((App Opapp ((Var (Short "v1")) (App Opapp ((Var (Short "fst")) (Var (Short "v3")))))) (App Opapp ((Var (Short "fst")) (Var (Short "v4")))))) (((Pcon (SOME (Short "Less")) nil) Con (SOME (Short "Less")) nil) ((Pcon (SOME (Short "Equal")) nil) App Opapp ((App Opapp ((Var (Short "v2")) (App Opapp ((Var (Short "snd")) (Var (Short "v3")))))) (App Opapp ((Var (Short "snd")) (Var (Short "v4")))))) ((Pcon (SOME (Short "Greater")) nil) Con (SOME (Short "Greater")) nil)))))))))) (Dmod "Int" ((Dtabbrev (unk unk) nil "int" (Atapp nil (Short "int"))) (Dlet (unk unk) "+" (Fun "v1" (Fun "v2" (App OpnPlus ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "-" (Fun "v1" (Fun "v2" (App OpnMinus ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "*" (Fun "v1" (Fun "v2" (App OpnTimes ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "div" (Fun "v1" (Fun "v2" (App OpnDivide ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "mod" (Fun "v1" (Fun "v2" (App OpnModulo ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "<" (Fun "v1" (Fun "v2" (App OpbLt ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) ">" (Fun "v1" (Fun "v2" (App OpbGt ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "<=" (Fun "v1" (Fun "v2" (App OpbLeq ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) ">=" (Fun "v1" (Fun "v2" (App OpbGeq ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "~" (Fun "v1" (App OpnMinus ((Lit 0) (Var (Short "v1")))))) (Dlocal ((Dlet (unk unk) "exp_for_dec_enc" (Lit 8)) (Dlet (unk unk) "tochar" (Fun "v1" (If (App OpbLt ((Var (Short "v1")) (Lit 10))) (App Chr ((App OpnPlus ((App Ord ((Lit (char "0")))) (Var (Short "v1")))))) (App Chr ((Let (SOME "k") (App OpnMinus ((App OpnPlus ((App Ord ((Lit (char "A")))) (Var (Short "v1")))) (Lit 10))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k"))))))))) (Dletrec (unk unk) (("num_to_rev_chars" "v1" Fun "v2" (Fun "v3" (If (App Equality ((Var (Short "v2")) (Lit 0))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "num_to_rev_chars")) (App OpnDivide ((Var (Short "v1")) (Lit 100000000))))) (Var (Short "exp_for_dec_enc")))) (App OpnPlus ((App OpnModulo ((Var (Short "v1")) (Lit 100000000))) (Var (Short "v3")))))) (If (Log And (App OpbLt ((Var (Short "v3")) (Lit 10))) (App Equality ((Var (Short "v1")) (Lit 0)))) (Con (SOME (Short "::")) ((App Opapp ((Var (Short "tochar")) (Var (Short "v3")))) (Con (SOME (Short "[]")) nil))) (Con (SOME (Short "::")) ((App Opapp ((Var (Short "tochar")) (App OpnModulo ((Var (Short "v3")) (Lit 10))))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "num_to_rev_chars")) (Var (Short "v1")))) (Let (SOME "k") (App OpnMinus ((Var (Short "v2")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))) (App OpnDivide ((Var (Short "v3")) (Lit 10)))))))))))))) ((Dlet (unk unk) "int_to_string" (Fun "v2" (Fun "v1" (If (App OpbLeq ((Lit 0) (Var (Short "v1")))) (App Implode ((App Opapp ((Var (Long "List" (Short "rev"))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "num_to_rev_chars")) (Var (Short "v1")))) (Lit 0))) (Lit 0))))))) (App Implode ((App ListAppend ((Con (SOME (Short "::")) ((Var (Short "v2")) (Con (SOME (Short "[]")) nil))) (App Opapp ((Var (Long "List" (Short "rev"))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "num_to_rev_chars")) (Let (SOME "k") (Var (Short "v1")) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (App OpnMinus ((Lit 0) (Var (Short "k")))) (Var (Short "k")))))) (Lit 0))) (Lit 0))))))))))))) (Dlet (unk unk) "toString" (Fun "v1" (App Opapp ((App Opapp ((Var (Short "int_to_string")) (Lit (char "~")))) (Var (Short "v1")))))))) (Dlocal ((Dlet (unk unk) "fromchar_unsafe" (Fun "v1" (Let (SOME "k") (App OpnMinus ((App Ord ((Var (Short "v1")))) (Lit 48))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))) (Dletrec (unk unk) (("fromchars_range_unsafe" "v1" Fun "v2" (Fun "v3" (If (App Equality ((Var (Short "v2")) (Lit 0))) (Lit 0) (App OpnPlus ((App OpnTimes ((App Opapp ((App Opapp ((App Opapp ((Var (Short "fromchars_range_unsafe")) (Var (Short "v1")))) (Let (SOME "k") (App OpnMinus ((Var (Short "v2")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))) (Var (Short "v3")))) (Lit 10))) (App Opapp ((Var (Short "fromchar_unsafe")) (App Strsub ((Var (Short "v3")) (App OpnPlus ((Var (Short "v1")) (Let (SOME "k") (App OpnMinus ((Var (Short "v2")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k"))))))))))))))))) (Dlet (unk unk) "padlen_dec" (Lit 8)) (Dlet (unk unk) "maxsmall_dec" (Lit 100000000)) (Dletrec (unk unk) (("fromchars_unsafe" "v4" Fun "v5" (If (App Equality ((Var (Short "v4")) (Lit 0))) (Lit 0) (If (App OpbLeq ((App OpnPlus ((Let (SOME "k") (App OpnMinus ((Var (Short "v4")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))) (Lit 1))) (Lit 8))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "fromchars_range_unsafe")) (Lit 0))) (App OpnPlus ((Let (SOME "k") (App OpnMinus ((Var (Short "v4")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))) (Lit 1))))) (Var (Short "v5")))) (Let (SOME "v3") (Let (SOME "k") (App OpnMinus ((App OpnPlus ((Let (SOME "k") (App OpnMinus ((Var (Short "v4")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))) (Lit 1))) (Lit 8))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))) (Let (SOME "v2") (App OpnTimes ((App Opapp ((App Opapp ((Var (Short "fromchars_unsafe")) (Var (Short "v3")))) (Var (Short "v5")))) (Lit 100000000))) (Let (SOME "v1") (App Opapp ((App Opapp ((App Opapp ((Var (Short "fromchars_range_unsafe")) (Var (Short "v3")))) (Lit 8))) (Var (Short "v5")))) (App OpnPlus ((Var (Short "v2")) (Var (Short "v1")))))))))))) (Dlet (unk unk) "fromstring_unsafe" (Fun "v1" (If (App Equality ((App Strlen ((Var (Short "v1")))) (Lit 0))) (Lit 0) (If (App Equality ((App Strsub ((Var (Short "v1")) (Lit 0))) (Lit (char "~")))) (App OpnMinus ((Lit 0) (App Opapp ((App Opapp ((Var (Short "fromchars_unsafe")) (Let (SOME "k") (App OpnMinus ((App Strlen ((Var (Short "v1")))) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))) (App CopyStrStr ((Var (Short "v1")) (Lit 1) (Let (SOME "k") (App OpnMinus ((App Strlen ((Var (Short "v1")))) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))))))) (App Opapp ((App Opapp ((Var (Short "fromchars_unsafe")) (App Strlen ((Var (Short "v1")))))) (Var (Short "v1")))))))) (Dlet (unk unk) "fromchar" (Fun "v2" (Let (SOME "v1") (App Ord ((Var (Short "v2")))) (If (Log And (App OpbLeq ((Lit 48) (Var (Short "v1")))) (App OpbLeq ((Var (Short "v1")) (Lit 57)))) (Con (SOME (Short "Some")) ((Let (SOME "k") (App OpnMinus ((Var (Short "v1")) (Lit 48))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))) (Con (SOME (Short "None")) nil))))) (Dletrec (unk unk) (("fromchars_range" "v6" Fun "v7" (Fun "v8" (If (App Equality ((Var (Short "v7")) (Lit 0))) (Con (SOME (Short "Some")) ((Lit 0))) (Let (SOME "v4") (App Opapp ((App Opapp ((Var (Long "Option" (Short "map"))) (Fun "v5" (App OpnTimes ((Lit 10) (Var (Short "v5"))))))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "fromchars_range")) (Var (Short "v6")))) (Let (SOME "k") (App OpnMinus ((Var (Short "v7")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))) (Var (Short "v8")))))) (Let (SOME "v3") (App Opapp ((Var (Short "fromchar")) (App Strsub ((Var (Short "v8")) (App OpnPlus ((Var (Short "v6")) (Let (SOME "k") (App OpnMinus ((Var (Short "v7")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))))))) (App Opapp ((App Opapp ((App Opapp ((Var (Long "Option" (Short "map2"))) (Fun "v2" (Fun "v1" (App OpnPlus ((Var (Short "v2")) (Var (Short "v1")))))))) (Var (Short "v4")))) (Var (Short "v3"))))))))))) (Dletrec (unk unk) (("fromchars" "v7" Fun "v8" (If (App Equality ((Var (Short "v7")) (Lit 0))) (Con (SOME (Short "None")) nil) (If (App OpbLeq ((App OpnPlus ((Let (SOME "k") (App OpnMinus ((Var (Short "v7")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))) (Lit 1))) (Lit 8))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "fromchars_range")) (Lit 0))) (App OpnPlus ((Let (SOME "k") (App OpnMinus ((Var (Short "v7")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))) (Lit 1))))) (Var (Short "v8")))) (Let (SOME "v6") (Let (SOME "k") (App OpnMinus ((App OpnPlus ((Let (SOME "k") (App OpnMinus ((Var (Short "v7")) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))) (Lit 1))) (Lit 8))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))) (Let (SOME "v4") (App Opapp ((App Opapp ((Var (Long "Option" (Short "map"))) (Fun "v5" (App OpnTimes ((Lit 100000000) (Var (Short "v5"))))))) (App Opapp ((App Opapp ((Var (Short "fromchars")) (Var (Short "v6")))) (Var (Short "v8")))))) (Let (SOME "v3") (App Opapp ((App Opapp ((App Opapp ((Var (Short "fromchars_range")) (Var (Short "v6")))) (Lit 8))) (Var (Short "v8")))) (App Opapp ((App Opapp ((App Opapp ((Var (Long "Option" (Short "map2"))) (Fun "v2" (Fun "v1" (App OpnPlus ((Var (Short "v2")) (Var (Short "v1")))))))) (Var (Short "v4")))) (Var (Short "v3"))))))))))))) ((Dlet (unk unk) "fromString" (Fun "v5" (If (App Equality ((App Strlen ((Var (Short "v5")))) (Lit 0))) (Con (SOME (Short "None")) nil) (If (Log Or (App Equality ((App Strsub ((Var (Short "v5")) (Lit 0))) (Lit (char "~")))) (App Equality ((App Strsub ((Var (Short "v5")) (Lit 0))) (Lit (char "-"))))) (App Opapp ((App Opapp ((Var (Long "Option" (Short "map"))) (App Opapp ((App Opapp ((Var (Short "o")) (Fun "v1" (App OpnMinus ((Lit 0) (Var (Short "v1"))))))) (Fun "v2" (Var (Short "v2"))))))) (App Opapp ((App Opapp ((Var (Short "fromchars")) (Let (SOME "k") (App OpnMinus ((App Strlen ((Var (Short "v5")))) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))) (App CopyStrStr ((Var (Short "v5")) (Lit 1) (Let (SOME "k") (App OpnMinus ((App Strlen ((Var (Short "v5")))) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))))))) (If (App Equality ((App Strsub ((Var (Short "v5")) (Lit 0))) (Lit (char "+")))) (App Opapp ((App Opapp ((Var (Long "Option" (Short "map"))) (Fun "v3" (Var (Short "v3"))))) (App Opapp ((App Opapp ((Var (Short "fromchars")) (Let (SOME "k") (App OpnMinus ((App Strlen ((Var (Short "v5")))) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))) (App CopyStrStr ((Var (Short "v5")) (Lit 1) (Let (SOME "k") (App OpnMinus ((App Strlen ((Var (Short "v5")))) (Lit 1))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))))))) (App Opapp ((App Opapp ((Var (Long "Option" (Short "map"))) (Fun "v4" (Var (Short "v4"))))) (App Opapp ((App Opapp ((Var (Short "fromchars")) (App Strlen ((Var (Short "v5")))))) (Var (Short "v5"))))))))))) (Dlet (unk unk) "fromNatString" (Fun "v2" (Mat (App Opapp ((Var (Short "fromString")) (Var (Short "v2")))) (((Pcon (SOME (Short "None")) nil) Con (SOME (Short "None")) nil) ((Pcon (SOME (Short "Some")) ("v1")) If (App OpbLeq ((Lit 0) (Var (Short "v1")))) (Con (SOME (Short "Some")) ((Var (Short "v1")))) (Con (SOME (Short "None")) nil)))))) (Dlocal ((Dletrec (unk unk) (("num_gcd" "v1" Fun "v2" (If (App Equality ((Var (Short "v1")) (Lit 0))) (Var (Short "v2")) (App Opapp ((App Opapp ((Var (Short "num_gcd")) (App OpnModulo ((Var (Short "v2")) (Var (Short "v1")))))) (Var (Short "v1"))))))))) ((Dlet (unk unk) "gcd" (Fun "v1" (Fun "v2" (App Opapp ((App Opapp ((Var (Short "num_gcd")) (Let (SOME "k") (Var (Short "v1")) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (App OpnMinus ((Lit 0) (Var (Short "k")))) (Var (Short "k")))))) (Let (SOME "k") (Var (Short "v2")) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (App OpnMinus ((Lit 0) (Var (Short "k")))) (Var (Short "k"))))))))) (Dlet (unk unk) "compare" (Fun "v1" (Fun "v2" (If (App OpbLt ((Var (Short "v1")) (Var (Short "v2")))) (Con (SOME (Short "Less")) nil) (If (App OpbLt ((Var (Short "v2")) (Var (Short "v1")))) (Con (SOME (Short "Greater")) nil) (Con (SOME (Short "Equal")) nil)))))))))))) (Dmod "PrettyPrinter" ((Dtype (unk unk) ((nil "pp_data" ("Pp_data" (Atapp nil (Short "bool")) (Atapp ((Atapp nil (Short "string"))) (Short "app_list")))))) (Dtype (unk unk) ((nil "default_type" ("Default_type")))) (Dlocal ((Dletrec (unk unk) (("app_intersperse" "v5" Fun "v6" (Mat (Var (Short "v6")) (((Pcon (SOME (Short "[]")) nil) Con (SOME (Short "Nil")) nil) ((Pcon (SOME (Short "::")) ("v4" "v3")) Mat (Var (Short "v3")) (((Pcon (SOME (Short "[]")) nil) Var (Short "v4")) ((Pcon (SOME (Short "::")) ("v2" "v1")) Con (SOME (Short "Append")) ((Con (SOME (Short "Append")) ((Var (Short "v4")) (Con (SOME (Short "List")) ((Con (SOME (Short "::")) ((Var (Short "v5")) (Con (SOME (Short "[]")) nil))))))) (App Opapp ((App Opapp ((Var (Short "app_intersperse")) (Var (Short "v5")))) (Con (SOME (Short "::")) ((Var (Short "v2")) (Var (Short "v1"))))))))))))))) (Dlet (unk unk) "app_list_wrap" (Fun "v1" (Fun "v3" (Fun "v2" (Con (SOME (Short "Append")) ((Con (SOME (Short "List")) ((Con (SOME (Short "::")) ((Var (Short "v1")) (Con (SOME (Short "[]")) nil))))) (Con (SOME (Short "Append")) ((Var (Short "v3")) (Con (SOME (Short "List")) ((Con (SOME (Short "::")) ((Var (Short "v2")) (Con (SOME (Short "[]")) nil))))))))))))) (Dlet (unk unk) "pp_paren_contents" (Fun "v3" (Mat (Var (Short "v3")) (((Pcon (SOME (Short "Pp_data")) ("v2" "v1")) If (Var (Short "v2")) (App Opapp ((App Opapp ((App Opapp ((Var (Short "app_list_wrap")) (Lit "("))) (Var (Short "v1")))) (Lit ")"))) (Var (Short "v1"))))))) (Dletrec (unk unk) (("escape_str_app_list" "v4" Fun "v5" (Mat (App Opapp ((App Opapp ((App Opapp ((Var (Long "String" (Short "findi"))) (Fun "v1" (App Opapp ((Var (Long "Option" (Short "isSome"))) (App Opapp ((Var (Long "String" (Short "char_escape_seq"))) (Var (Short "v1"))))))))) (Var (Short "v4")))) (Var (Short "v5")))) (((Pcon (SOME (Short "None")) nil) Con (SOME (Short "List")) ((Con (SOME (Short "::")) ((App CopyStrStr ((Var (Short "v5")) (Var (Short "v4")) (Let (SOME "k") (App OpnMinus ((App Strlen ((Var (Short "v5")))) (Var (Short "v4")))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))) (Con (SOME (Short "[]")) nil))))) ((Pcon (SOME (Short "Some")) ("v3")) Con (SOME (Short "Append")) ((Con (SOME (Short "List")) ((Con (SOME (Short "::")) ((App CopyStrStr ((Var (Short "v5")) (Var (Short "v4")) (Let (SOME "k") (App OpnMinus ((Var (Short "v3")) (Var (Short "v4")))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k")))))) (Con (SOME (Short "::")) ((Mat (App Opapp ((Var (Long "String" (Short "char_escape_seq"))) (App Strsub ((Var (Short "v5")) (Var (Short "v3")))))) (((Pcon (SOME (Short "None")) nil) Lit "") ((Pcon (SOME (Short "Some")) ("v2")) Var (Short "v2")))) (Con (SOME (Short "[]")) nil))))))) (App Opapp ((App Opapp ((Var (Short "escape_str_app_list")) (App OpnPlus ((Var (Short "v3")) (Lit 1))))) (Var (Short "v5")))))))))))) ((Dlet (unk unk) "toAppList" (Fun "v3" (Mat (Var (Short "v3")) (((Pcon (SOME (Short "Pp_data")) ("v2" "v1")) Var (Short "v1")))))) (Dlet (unk unk) "no_parens" (Fun "v1" (Con (SOME (Short "Pp_data")) ((App OpbLt ((Lit 0) (Lit 0))) (App Opapp ((Var (Short "toAppList")) (Var (Short "v1")))))))) (Dlet (unk unk) "token" (Fun "v1" (Con (SOME (Short "Pp_data")) ((App OpbLt ((Lit 0) (Lit 0))) (Con (SOME (Short "List")) ((Con (SOME (Short "::")) ((Var (Short "v1")) (Con (SOME (Short "[]")) nil))))))))) (Dlet (unk unk) "tuple" (Fun "v1" (Con (SOME (Short "Pp_data")) ((App OpbLt ((Lit 0) (Lit 0))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "app_list_wrap")) (Lit "("))) (App Opapp ((App Opapp ((Var (Short "app_intersperse")) (Lit ", "))) (App Opapp ((App Opapp ((Var (Long "List" (Short "map"))) (Var (Short "toAppList")))) (Var (Short "v1")))))))) (Lit ")"))))))) (Dlet (unk unk) "spaced_block" (Fun "v1" (Con (SOME (Short "Pp_data")) ((App OpbGt ((App Opapp ((Var (Long "List" (Short "length"))) (Var (Short "v1")))) (Lit 1))) (App Opapp ((App Opapp ((Var (Short "app_intersperse")) (Lit " "))) (App Opapp ((App Opapp ((Var (Long "List" (Short "map"))) (Var (Short "pp_paren_contents")))) (Var (Short "v1")))))))))) (Dlet (unk unk) "app_block" (Fun "v1" (Fun "v2" (App Opapp ((Var (Short "spaced_block")) (Con (SOME (Short "::")) ((App Opapp ((Var (Short "token")) (Var (Short "v1")))) (Var (Short "v2"))))))))) (Dlet (unk unk) "val_eq" (Fun "v1" (Fun "v2" (Fun "v4" (Fun "v3" (Con (SOME (Short "Pp_data")) ((App OpbLt ((Lit 0) (Lit 0))) (Con (SOME (Short "Append")) ((Con (SOME (Short "List")) ((Con (SOME (Short "::")) ((Lit "val ") (Con (SOME (Short "::")) ((Var (Short "v1")) (Con (SOME (Short "::")) ((Lit " = ") (Con (SOME (Short "[]")) nil))))))))) (Con (SOME (Short "Append")) ((App Opapp ((Var (Short "toAppList")) (App Opapp ((Var (Short "v2")) (Var (Short "v4")))))) (Con (SOME (Short "List")) ((Con (SOME (Short "::")) ((Lit ": ") (Con (SOME (Short "::")) ((Var (Short "v3")) (Con (SOME (Short "::")) ((Lit "\\0A") (Con (SOME (Short "[]")) nil)))))))))))))))))))) (Dlet (unk unk) "val_eq" (Fun "v1" (Fun "v2" (Fun "v4" (Fun "v3" (Con (SOME (Short "Pp_data")) ((App OpbLt ((Lit 0) (Lit 0))) (Con (SOME (Short "Append")) ((Con (SOME (Short "List")) ((Con (SOME (Short "::")) ((Lit "val ") (Con (SOME (Short "::")) ((Var (Short "v1")) (Con (SOME (Short "::")) ((Lit " = ") (Con (SOME (Short "[]")) nil))))))))) (Con (SOME (Short "Append")) ((App Opapp ((Var (Short "toAppList")) (App Opapp ((Var (Short "v2")) (Var (Short "v4")))))) (Con (SOME (Short "List")) ((Con (SOME (Short "::")) ((Lit ": ") (Con (SOME (Short "::")) ((Var (Short "v3")) (Con (SOME (Short "::")) ((Lit "\\0A") (Con (SOME (Short "[]")) nil)))))))))))))))))))) (Dlet (unk unk) "val_hidden_type" (Fun "v1" (Fun "v2" (Con (SOME (Short "Pp_data")) ((App OpbLt ((Lit 0) (Lit 0))) (Con (SOME (Short "List")) ((Con (SOME (Short "::")) ((Lit "val ") (Con (SOME (Short "::")) ((Var (Short "v1")) (Con (SOME (Short "::")) ((Lit " <not printable> : ") (Con (SOME (Short "::")) ((Var (Short "v2")) (Con (SOME (Short "::")) ((Lit "\\0A") (Con (SOME (Short "[]")) nil)))))))))))))))))) (Dlet (unk unk) "failure_message" (Fun "v1" (Con (SOME (Short "Pp_data")) ((App OpbLt ((Lit 0) (Lit 0))) (Con (SOME (Short "List")) ((Con (SOME (Short "::")) ((Lit "<failure: ") (Con (SOME (Short "::")) ((Var (Short "v1")) (Con (SOME (Short "::")) ((Lit ">\\0A") (Con (SOME (Short "[]")) nil))))))))))))) (Dlet (unk unk) "unprintable" (Fun "v1" (Con (SOME (Short "Pp_data")) ((App OpbLt ((Lit 0) (Lit 0))) (Con (SOME (Short "List")) ((Con (SOME (Short "::")) ((Lit "<val of unprintable type ") (Con (SOME (Short "::")) ((Var (Short "v1")) (Con (SOME (Short "::")) ((Lit ">") (Con (SOME (Short "[]")) nil))))))))))))) (Dlet (unk unk) "pp_list" (Fun "v2" (Fun "v3" (Con (SOME (Short "Pp_data")) ((App OpbLt ((Lit 0) (Lit 0))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "app_list_wrap")) (Lit "["))) (App Opapp ((App Opapp ((Var (Short "app_intersperse")) (Lit "; "))) (App Opapp ((App Opapp ((Var (Long "List" (Short "map"))) (Fun "v1" (App Opapp ((Var (Short "toAppList")) (App Opapp ((Var (Short "v2")) (Var (Short "v1"))))))))) (Var (Short "v3")))))))) (Lit "]")))))))) (Dlet (unk unk) "pp_bool" (Fun "v1" (Con (SOME (Short "Pp_data")) ((App OpbLt ((Lit 0) (Lit 0))) (Con (SOME (Short "List")) ((Con (SOME (Short "::")) ((If (Var (Short "v1")) (Lit "True") (Lit "False")) (Con (SOME (Short "[]")) nil))))))))) (Dlet (unk unk) "pp_char" (Fun "v2" (Con (SOME (Short "Pp_data")) ((App OpbLt ((Lit 0) (Lit 0))) (Con (SOME (Short "List")) ((Con (SOME (Short "::")) ((Lit "#\"") (Con (SOME (Short "::")) ((Mat (App Opapp ((Var (Long "String" (Short "char_escape_seq"))) (Var (Short "v2")))) (((Pcon (SOME (Short "None")) nil) App Implode ((Con (SOME (Short "::")) ((Var (Short "v2")) (Con (SOME (Short "[]")) nil))))) ((Pcon (SOME (Short "Some")) ("v1")) Var (Short "v1")))) (Con (SOME (Short "::")) ((Lit "\"") (Con (SOME (Short "[]")) nil))))))))))))) (Dlet (unk unk) "pp_string" (Fun "v1" (Con (SOME (Short "Pp_data")) ((App OpbLt ((Lit 0) (Lit 0))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "app_list_wrap")) (Lit "\""))) (App Opapp ((App Opapp ((Var (Short "escape_str_app_list")) (Lit 0))) (Var (Short "v1")))))) (Lit "\""))))))) (Dletrec (unk unk) (("pp_app_list" "v4" Fun "v5" (Mat (Var (Short "v5")) (((Pcon (SOME (Short "List")) ("v1")) App Opapp ((App Opapp ((Var (Short "app_block")) (Lit "List"))) (Con (SOME (Short "::")) ((App Opapp ((App Opapp ((Var (Short "pp_list")) (Var (Short "v4")))) (Var (Short "v1")))) (Con (SOME (Short "[]")) nil))))) ((Pcon (SOME (Short "Append")) ("v3" "v2")) App Opapp ((App Opapp ((Var (Short "app_block")) (Lit "Append"))) (Con (SOME (Short "::")) ((App Opapp ((App Opapp ((Var (Short "pp_app_list")) (Var (Short "v4")))) (Var (Short "v3")))) (Con (SOME (Short "::")) ((App Opapp ((App Opapp ((Var (Short "pp_app_list")) (Var (Short "v4")))) (Var (Short "v2")))) (Con (SOME (Short "[]")) nil))))))) ((Pcon (SOME (Short "Nil")) nil) App Opapp ((Var (Short "token")) (Lit "Nil")))))))) (Dlet (unk unk) "pp_pp_data" (Fun "v3" (Mat (Var (Short "v3")) (((Pcon (SOME (Short "Pp_data")) ("v2" "v1")) App Opapp ((App Opapp ((Var (Short "app_block")) (Lit "PP_Data"))) (Con (SOME (Short "::")) ((App Opapp ((Var (Short "pp_bool")) (Var (Short "v2")))) (Con (SOME (Short "::")) ((App Opapp ((App Opapp ((Var (Short "pp_app_list")) (Var (Short "pp_string")))) (Var (Short "v1")))) (Con (SOME (Short "[]")) nil))))))))))) (Dlet (unk unk) "pp_default_type" (Fun "v1" (App Opapp ((Var (Short "token")) (Lit "<val of default type: this should be impossible>"))))))))) (Dlet (unk unk) "pp_exn" (Fun "v1" (App Opapp ((Var (Long "PrettyPrinter" (Short "token"))) (Lit "<exn>"))))) (Dlet (unk unk) "pp_unit" (Fun "v1" (App Opapp ((Var (Long "PrettyPrinter" (Short "token"))) (Lit "()"))))) (Dlet (unk unk) "pp_vector" (Fun "v1" (Fun "v2" (App Opapp ((App Opapp ((Var (Long "PrettyPrinter" (Short "app_block"))) (Lit "Vector.fromList"))) (Con (SOME (Short "::")) ((App Opapp ((App Opapp ((Var (Long "PrettyPrinter" (Short "pp_list"))) (Var (Short "v1")))) (App Opapp ((Var (Long "Vector" (Short "toList"))) (Var (Short "v2")))))) (Con (SOME (Short "[]")) nil)))))))) (Dlet (unk unk) "pp_list" (Fun "v1" (App Opapp ((Var (Long "PrettyPrinter" (Short "pp_list"))) (Var (Short "v1")))))) (Dlet (unk unk) "pp_bool" (Fun "v1" (App Opapp ((Var (Long "PrettyPrinter" (Short "pp_bool"))) (Var (Short "v1")))))) (Dlet (unk unk) "pp_char" (Fun "v1" (App Opapp ((Var (Long "PrettyPrinter" (Short "pp_char"))) (Var (Short "v1")))))) (Dlet (unk unk) "pp_string" (Fun "v1" (App Opapp ((Var (Long "PrettyPrinter" (Short "pp_string"))) (Var (Short "v1")))))) (Dlet (unk unk) "pp_app_list" (Fun "v1" (App Opapp ((Var (Long "PrettyPrinter" (Short "pp_app_list"))) (Var (Short "v1")))))) (Dlet (unk unk) "pp_ref" (Fun "v1" (Fun "v2" (App Opapp ((Var (Long "PrettyPrinter" (Short "token"))) (Lit "<ref>")))))) (Dlet (unk unk) "pp_array" (Fun "v2" (Fun "v1" (App Opapp ((Var (Long "PrettyPrinter" (Short "token"))) (Lit "<array>")))))) (Dlet (unk unk) "pp_word8array" (Fun "v1" (App Opapp ((Var (Long "PrettyPrinter" (Short "token"))) (Lit "<w8array>"))))) (Dlet (unk unk) "pp_fun" (Con (SOME (Long "PrettyPrinter" (Short "Pp_data"))) ((App OpbLt ((Lit 0) (Lit 0))) (Con (SOME (Short "List")) ((Con (SOME (Short "::")) ((Lit "<fun>") (Con (SOME (Short "[]")) nil)))))))) (Dlet (unk unk) "pp_int" (Fun "v1" (App Opapp ((Var (Long "PrettyPrinter" (Short "token"))) (App Opapp ((Var (Long "Int" (Short "toString"))) (Var (Short "v1")))))))) (Dlet (unk unk) "pp_word8" (Fun "v1" (App Opapp ((App Opapp ((Var (Long "PrettyPrinter" (Short "app_block"))) (Lit "Word8.fromInt"))) (Con (SOME (Short "::")) ((App Opapp ((Var (Short "pp_int")) (Let (SOME "x") (App W8toInt ((Var (Short "v1")))) (If (App OpbLt ((Var (Short "x")) (Lit 128))) (Var (Short "x")) (App OpnMinus ((Var (Short "x")) (Lit 256))))))) (Con (SOME (Short "[]")) nil))))))) (Dlet (unk unk) "pp_word64" (Fun "v1" (App Opapp ((App Opapp ((Var (Long "PrettyPrinter" (Short "app_block"))) (Lit "Word64.fromInt"))) (Con (SOME (Short "::")) ((App Opapp ((Var (Short "pp_int")) (Let (SOME "x") (App W64toInt ((Var (Short "v1")))) (If (App OpbLt ((Var (Short "x")) (Lit 9223372036854775808))) (Var (Short "x")) (App OpnMinus ((Var (Short "x")) (Lit 18446744073709551616))))))) (Con (SOME (Short "[]")) nil))))))) (Dletrec (unk unk) (("pp_option" "pp_'a" Fun "x" (Mat (Var (Short "x")) (((Pcon (SOME (Short "Some")) ("x0")) App Opapp ((App Opapp ((Var (Long "PrettyPrinter" (Short "app_block"))) (Lit "Some"))) (Con (SOME (Short "::")) ((App Opapp ((Var (Short "pp_'a")) (Var (Short "x0")))) (Con (SOME (Short "[]")) nil))))) ((Pcon (SOME (Short "None")) nil) App Opapp ((App Opapp ((Var (Long "PrettyPrinter" (Short "app_block"))) (Lit "None"))) (Con (SOME (Short "[]")) nil)))))))) (Dletrec (unk unk) (("pp_ordering" "x" Mat (Var (Short "x")) (((Pcon (SOME (Short "Greater")) nil) App Opapp ((App Opapp ((Var (Long "PrettyPrinter" (Short "app_block"))) (Lit "Greater"))) (Con (SOME (Short "[]")) nil))) ((Pcon (SOME (Short "Equal")) nil) App Opapp ((App Opapp ((Var (Long "PrettyPrinter" (Short "app_block"))) (Lit "Equal"))) (Con (SOME (Short "[]")) nil))) ((Pcon (SOME (Short "Less")) nil) App Opapp ((App Opapp ((Var (Long "PrettyPrinter" (Short "app_block"))) (Lit "Less"))) (Con (SOME (Short "[]")) nil))))))) (Dletrec (unk unk) (("pp_sum" "pp_'a" Fun "pp_'b" (Fun "x" (Mat (Var (Short "x")) (((Pcon (SOME (Short "Inr")) ("x0")) App Opapp ((App Opapp ((Var (Long "PrettyPrinter" (Short "app_block"))) (Lit "Inr"))) (Con (SOME (Short "::")) ((App Opapp ((Var (Short "pp_'b")) (Var (Short "x0")))) (Con (SOME (Short "[]")) nil))))) ((Pcon (SOME (Short "Inl")) ("x0")) App Opapp ((App Opapp ((Var (Long "PrettyPrinter" (Short "app_block"))) (Lit "Inl"))) (Con (SOME (Short "::")) ((App Opapp ((Var (Short "pp_'a")) (Var (Short "x0")))) (Con (SOME (Short "[]")) nil))))))))))) (Dletrec (unk unk) (("pp_app_list" "pp_'a" Fun "x" (Mat (Var (Short "x")) (((Pcon (SOME (Short "Nil")) nil) App Opapp ((App Opapp ((Var (Long "PrettyPrinter" (Short "app_block"))) (Lit "Nil"))) (Con (SOME (Short "[]")) nil))) ((Pcon (SOME (Short "Append")) ("x0" "x1")) App Opapp ((App Opapp ((Var (Long "PrettyPrinter" (Short "app_block"))) (Lit "Append"))) (Con (SOME (Short "::")) ((App Opapp ((App Opapp ((Var (Short "pp_app_list")) (Var (Short "pp_'a")))) (Var (Short "x0")))) (Con (SOME (Short "::")) ((App Opapp ((App Opapp ((Var (Short "pp_app_list")) (Var (Short "pp_'a")))) (Var (Short "x1")))) (Con (SOME (Short "[]")) nil))))))) ((Pcon (SOME (Short "List")) ("x0")) App Opapp ((App Opapp ((Var (Long "PrettyPrinter" (Short "app_block"))) (Lit "List"))) (Con (SOME (Short "::")) ((App Opapp ((App Opapp ((Var (Short "pp_list")) (Var (Short "pp_'a")))) (Var (Short "x0")))) (Con (SOME (Short "[]")) nil)))))))))) (Dlocal ((Dtype (unk unk) ((nil "rational" ("Ratpair" (Atapp nil (Short "int")) (Atapp nil (Short "int")))))) (Dlet (unk unk) "div_gcd" (Fun "v2" (Fun "v3" (Let (SOME "v1") (App Opapp ((App Opapp ((Var (Long "Int" (Short "gcd"))) (Let (SOME "k") (Var (Short "v2")) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (App OpnMinus ((Lit 0) (Var (Short "k")))) (Var (Short "k")))))) (Var (Short "v3")))) (If (Log Or (App Equality ((Var (Short "v1")) (Lit 0))) (App Equality ((Var (Short "v1")) (Lit 1)))) (Con (SOME (Short "Ratpair")) ((Var (Short "v2")) (Var (Short "v3")))) (Con (SOME (Short "Ratpair")) ((App OpnDivide ((Var (Short "v2")) (Var (Short "v1")))) (App OpnDivide ((Var (Short "v3")) (Var (Short "v1")))))))))))) ((Dmod "Rat" ((Dtabbrev (unk unk) nil "rat" (Atapp nil (Short "rational"))) (Dlet (unk unk) "fromInt" (Fun "v1" (Con (SOME (Short "Ratpair")) ((Var (Short "v1")) (Lit 1))))) (Dlet (unk unk) "<=" (Fun "v6" (Fun "v5" (Mat (Var (Short "v6")) (((Pcon (SOME (Short "Ratpair")) ("v4" "v3")) Mat (Var (Short "v5")) (((Pcon (SOME (Short "Ratpair")) ("v2" "v1")) App OpbLeq ((App OpnTimes ((Var (Short "v4")) (Var (Short "v1")))) (App OpnTimes ((Var (Short "v2")) (Var (Short "v3"))))))))))))) (Dlet (unk unk) ">=" (Fun "v1" (Fun "v2" (App Opapp ((App Opapp ((Var (Short "<=")) (Var (Short "v2")))) (Var (Short "v1"))))))) (Dlet (unk unk) "<" (Fun "v6" (Fun "v5" (Mat (Var (Short "v6")) (((Pcon (SOME (Short "Ratpair")) ("v4" "v3")) Mat (Var (Short "v5")) (((Pcon (SOME (Short "Ratpair")) ("v2" "v1")) App OpbLt ((App OpnTimes ((Var (Short "v4")) (Var (Short "v1")))) (App OpnTimes ((Var (Short "v2")) (Var (Short "v3"))))))))))))) (Dlet (unk unk) ">" (Fun "v1" (Fun "v2" (App Opapp ((App Opapp ((Var (Short "<")) (Var (Short "v2")))) (Var (Short "v1"))))))) (Dlet (unk unk) "compare" (Fun "v8" (Fun "v7" (Mat (Var (Short "v8")) (((Pcon (SOME (Short "Ratpair")) ("v6" "v5")) Mat (Var (Short "v7")) (((Pcon (SOME (Short "Ratpair")) ("v4" "v3")) Let (SOME "v2") (App OpnTimes ((Var (Short "v6")) (Var (Short "v3")))) (Let (SOME "v1") (App OpnTimes ((Var (Short "v4")) (Var (Short "v5")))) (If (App OpbLt ((Var (Short "v2")) (Var (Short "v1")))) (Con (SOME (Short "Less")) nil) (If (App OpbLt ((Var (Short "v1")) (Var (Short "v2")))) (Con (SOME (Short "Greater")) nil) (Con (SOME (Short "Equal")) nil)))))))))))) (Dlet (unk unk) "min" (Fun "v1" (Fun "v2" (If (App Opapp ((App Opapp ((Var (Short "<")) (Var (Short "v1")))) (Var (Short "v2")))) (Var (Short "v1")) (Var (Short "v2")))))) (Dlet (unk unk) "max" (Fun "v1" (Fun "v2" (If (App Opapp ((App Opapp ((Var (Short ">")) (Var (Short "v1")))) (Var (Short "v2")))) (Var (Short "v1")) (Var (Short "v2")))))) (Dlet (unk unk) "+" (Fun "v6" (Fun "v5" (Mat (Var (Short "v6")) (((Pcon (SOME (Short "Ratpair")) ("v4" "v3")) Mat (Var (Short "v5")) (((Pcon (SOME (Short "Ratpair")) ("v2" "v1")) App Opapp ((App Opapp ((Var (Short "div_gcd")) (App OpnPlus ((App OpnTimes ((Var (Short "v4")) (Var (Short "v1")))) (App OpnTimes ((Var (Short "v2")) (Var (Short "v3")))))))) (App OpnTimes ((Var (Short "v3")) (Var (Short "v1"))))))))))))) (Dlet (unk unk) "-" (Fun "v6" (Fun "v5" (Mat (Var (Short "v6")) (((Pcon (SOME (Short "Ratpair")) ("v4" "v3")) Mat (Var (Short "v5")) (((Pcon (SOME (Short "Ratpair")) ("v2" "v1")) App Opapp ((App Opapp ((Var (Short "div_gcd")) (App OpnMinus ((App OpnTimes ((Var (Short "v4")) (Var (Short "v1")))) (App OpnTimes ((Var (Short "v2")) (Var (Short "v3")))))))) (App OpnTimes ((Var (Short "v3")) (Var (Short "v1"))))))))))))) (Dlet (unk unk) "~" (Fun "v1" (App Opapp ((App Opapp ((Var (Short "-")) (App Opapp ((Var (Short "fromInt")) (Lit 0))))) (Var (Short "v1")))))) (Dlet (unk unk) "*" (Fun "v6" (Fun "v5" (Mat (Var (Short "v6")) (((Pcon (SOME (Short "Ratpair")) ("v4" "v3")) Mat (Var (Short "v5")) (((Pcon (SOME (Short "Ratpair")) ("v2" "v1")) App Opapp ((App Opapp ((Var (Short "div_gcd")) (App OpnTimes ((Var (Short "v4")) (Var (Short "v2")))))) (App OpnTimes ((Var (Short "v3")) (Var (Short "v1"))))))))))))) (Dlet (unk unk) "inv" (Fun "v3" (Mat (Var (Short "v3")) (((Pcon (SOME (Short "Ratpair")) ("v2" "v1")) Con (SOME (Short "Ratpair")) ((If (App OpbLt ((Var (Short "v2")) (Lit 0))) (App OpnMinus ((Lit 0) (Var (Short "v1")))) (Var (Short "v1"))) (Let (SOME "k") (Var (Short "v2")) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (App OpnMinus ((Lit 0) (Var (Short "k")))) (Var (Short "k")))))))))) (Dlet (unk unk) "/" (Fun "v1" (Fun "v2" (App Opapp ((App Opapp ((Var (Short "*")) (Var (Short "v1")))) (App Opapp ((Var (Short "inv")) (Var (Short "v2"))))))))) (Dlet (unk unk) "toString" (Fun "v3" (Mat (Var (Short "v3")) (((Pcon (SOME (Short "Ratpair")) ("v2" "v1")) If (App Equality ((Var (Short "v1")) (Lit 1))) (App Opapp ((Var (Long "Int" (Short "toString"))) (Var (Short "v2")))) (App Strcat ((Con (SOME (Short "::")) ((App Opapp ((Var (Long "Int" (Short "toString"))) (Var (Short "v2")))) (Con (SOME (Short "::")) ((App Implode ((Con (SOME (Short "::")) ((Lit (char "/")) (Con (SOME (Short "[]")) nil))))) (Con (SOME (Short "::")) ((App Opapp ((Var (Long "Int" (Short "toString"))) (Var (Short "v1")))) (Con (SOME (Short "[]")) nil)))))))))))))) (Dlet (unk unk) "pp_rat" (Fun "v1" (App Opapp ((Var (Long "PrettyPrinter" (Short "token"))) (App Opapp ((Var (Short "toString")) (Var (Short "v1")))))))) (Dlet (unk unk) "numerator" (Fun "v3" (Mat (Var (Short "v3")) (((Pcon (SOME (Short "Ratpair")) ("v2" "v1")) Var (Short "v2")))))) (Dlet (unk unk) "denominator" (Fun "v3" (Mat (Var (Short "v3")) (((Pcon (SOME (Short "Ratpair")) ("v2" "v1")) Var (Short "v1")))))) (Dlet (unk unk) "floor" (Fun "v3" (Mat (Var (Short "v3")) (((Pcon (SOME (Short "Ratpair")) ("v2" "v1")) App OpnDivide ((Var (Short "v2")) (Var (Short "v1")))))))) (Dlet (unk unk) "ceiling" (Fun "v2" (Let (SOME "v1") (App Opapp ((Var (Short "floor")) (Var (Short "v2")))) (If (App Equality ((App Opapp ((Var (Short "fromInt")) (Var (Short "v1")))) (Var (Short "v2")))) (Var (Short "v1")) (App OpnPlus ((Var (Short "v1")) (Lit 1))))))) (Dlet (unk unk) "is_int" (Fun "v3" (Mat (Var (Short "v3")) (((Pcon (SOME (Short "Ratpair")) ("v2" "v1")) App Equality ((Var (Short "v1")) (Lit 1))))))))) (Dtabbrev (unk unk) nil "rat" (Atapp nil (Short "rational"))))) (Dmod "Char" ((Dtabbrev (unk unk) nil "char" (Atapp nil (Short "char"))) (Dlet (unk unk) "ord" (Fun "v1" (App Ord ((Var (Short "v1")))))) (Dlet (unk unk) "chr" (Fun "v1" (App Chr ((Var (Short "v1")))))) (Dlet (unk unk) "<" (Fun "v1" (Fun "v2" (App ChopbLt ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) ">" (Fun "v1" (Fun "v2" (App ChopbGt ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "<=" (Fun "v1" (Fun "v2" (App ChopbLeq ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) ">=" (Fun "v1" (Fun "v2" (App ChopbGeq ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "isSpace" (Fun "v1" (Log Or (App Equality ((App Ord ((Var (Short "v1")))) (Lit 32))) (Log And (App OpbLeq ((Lit 9) (App Ord ((Var (Short "v1")))))) (App OpbLeq ((App Ord ((Var (Short "v1")))) (Lit 13))))))) (Dlet (unk unk) "fromByte" (Fun "v1" (App Chr ((App W8toInt ((Var (Short "v1")))))))) (Dlocal ((Dlet (unk unk) "some_chars_vector" (App VfromList ((Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\00")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\01")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\02")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\03")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\04")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\05")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\06")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\07")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\08")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\09")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\0A")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\0B")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\0C")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\0D")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\0E")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\0F")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\10")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\11")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\12")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\13")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\14")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\15")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\16")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\17")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\18")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\19")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\1A")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\1B")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\1C")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\1D")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\1E")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\1F")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char " ")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "!")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\"")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "#")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "$")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "%")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "&")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "'")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "(")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char ")")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "*")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "+")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char ",")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "-")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char ".")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "/")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "0")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "1")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "2")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "3")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "4")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "5")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "6")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "7")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "8")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "9")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char ":")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char ";")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "<")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "=")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char ">")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "?")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "@")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "A")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "B")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "C")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "D")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "E")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "F")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "G")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "H")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "I")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "J")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "K")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "L")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "M")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "N")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "O")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "P")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "Q")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "R")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "S")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "T")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "U")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "V")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "W")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "X")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "Y")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "Z")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "[")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\\\")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "]")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "^")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "_")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "`")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "a")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "b")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "c")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "d")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "e")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "f")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "g")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "h")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "i")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "j")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "k")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "l")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "m")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "n")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "o")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "p")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "q")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "r")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "s")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "t")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "u")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "v")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "w")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "x")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "y")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "z")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "{")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "|")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "}")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "~")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\7F")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\80")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\81")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\82")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\83")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\84")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\85")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\86")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\87")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\88")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\89")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\8A")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\8B")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\8C")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\8D")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\8E")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\8F")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\90")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\91")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\92")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\93")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\94")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\95")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\96")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\97")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\98")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\99")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\9A")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\9B")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\9C")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\9D")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\9E")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\9F")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\A0")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\A1")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\A2")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\A3")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\A4")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\A5")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\A6")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\A7")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\A8")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\A9")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\AA")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\AB")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\AC")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\AD")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\AE")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\AF")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\B0")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\B1")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\B2")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\B3")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\B4")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\B5")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\B6")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\B7")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\B8")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\B9")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\BA")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\BB")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\BC")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\BD")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\BE")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\BF")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\C0")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\C1")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\C2")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\C3")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\C4")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\C5")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\C6")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\C7")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\C8")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\C9")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\CA")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\CB")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\CC")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\CD")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\CE")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\CF")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\D0")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\D1")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\D2")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\D3")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\D4")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\D5")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\D6")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\D7")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\D8")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\D9")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\DA")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\DB")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\DC")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\DD")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\DE")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\DF")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\E0")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\E1")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\E2")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\E3")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\E4")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\E5")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\E6")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\E7")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\E8")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\E9")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\EA")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\EB")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\EC")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\ED")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\EE")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\EF")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\F0")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\F1")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\F2")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\F3")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\F4")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\F5")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\F6")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\F7")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\F8")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\F9")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\FA")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\FB")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\FC")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\FD")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\FE")))) (Con (SOME (Short "::")) ((Con (SOME (Short "Some")) ((Lit (char "\\FF")))) (Con (SOME (Short "[]")) nillet (unk unk) "some" (Fun "v1" (App Vsub ((Var (Short "some_chars_vector")) (App Ord ((Var (Short "v1")))))))))))) (Dmod "Word64" ((Dtabbrev (unk unk) nil "word" (Atapp nil (Short "word64"))) (Dlet (unk unk) "fromInt" (Fun "v1" (App W64fromInt ((Var (Short "v1")))))) (Dlet (unk unk) "toInt" (Fun "v1" (App W64toInt ((Var (Short "v1")))))) (Dlet (unk unk) "toIntSigned" (Fun "v1" (Let (SOME "x") (App W64toInt ((Var (Short "v1")))) (If (App OpbLt ((Var (Short "x")) (Lit 9223372036854775808))) (Var (Short "x")) (App OpnMinus ((Var (Short "x")) (Lit 18446744073709551616))))))) (Dlet (unk unk) "andb" (Fun "v1" (Fun "v2" (App Opw64Andw ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "orb" (Fun "v1" (Fun "v2" (App Opw64Orw ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "xorb" (Fun "v1" (Fun "v2" (App Opw64Xor ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "notb" (Fun "v1" (App Opw64Xor ((Var (Short "v1")) (Lit (word64 18446744073709551615)))))) (Dlet (unk unk) "+" (Fun "v1" (Fun "v2" (App Opw64Add ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "-" (Fun "v1" (Fun "v2" (App Opw64Sub ((Var (Short "v1")) (Var (Short "v2"))))))) (Dletrec (unk unk) (("<<" "v2" Fun "v1" (If (App OpbLt ((Lit 64) (Var (Short "v1")))) (Lit (word64 0)) (If (App OpbLt ((Var (Short "v1")) (Lit 8))) (If (App OpbLt ((Var (Short "v1")) (Lit 4))) (If (App OpbLt ((Var (Short "v1")) (Lit 2))) (If (App OpbLt ((Var (Short "v1")) (Lit 1))) (Var (Short "v2")) (App (Shift64Lsl . 1) ((Var (Short "v2"))))) (If (App OpbLt ((Var (Short "v1")) (Lit 3))) (App (Shift64Lsl . 2) ((Var (Short "v2")))) (App (Shift64Lsl . 3) ((Var (Short "v2")))))) (If (App OpbLt ((Var (Short "v1")) (Lit 6))) (If (App OpbLt ((Var (Short "v1")) (Lit 5))) (App (Shift64Lsl . 4) ((Var (Short "v2")))) (App (Shift64Lsl . 5) ((Var (Short "v2"))))) (If (App OpbLt ((Var (Short "v1")) (Lit 7))) (App (Shift64Lsl . 6) ((Var (Short "v2")))) (App (Shift64Lsl . 7) ((Var (Short "v2"))))))) (App Opapp ((App Opapp ((Var (Short "<<")) (App (Shift64Lsl . 8) ((Var (Short "v2")))))) (Let (SOME "k") (App OpnMinus ((Var (Short "v1")) (Lit 8))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k"))))))))))) (Dletrec (unk unk) ((">>" "v2" Fun "v1" (If (App OpbLt ((Lit 64) (Var (Short "v1")))) (Lit (word64 0)) (If (App OpbLt ((Var (Short "v1")) (Lit 8))) (If (App OpbLt ((Var (Short "v1")) (Lit 4))) (If (App OpbLt ((Var (Short "v1")) (Lit 2))) (If (App OpbLt ((Var (Short "v1")) (Lit 1))) (Var (Short "v2")) (App (Shift64Lsr . 1) ((Var (Short "v2"))))) (If (App OpbLt ((Var (Short "v1")) (Lit 3))) (App (Shift64Lsr . 2) ((Var (Short "v2")))) (App (Shift64Lsr . 3) ((Var (Short "v2")))))) (If (App OpbLt ((Var (Short "v1")) (Lit 6))) (If (App OpbLt ((Var (Short "v1")) (Lit 5))) (App (Shift64Lsr . 4) ((Var (Short "v2")))) (App (Shift64Lsr . 5) ((Var (Short "v2"))))) (If (App OpbLt ((Var (Short "v1")) (Lit 7))) (App (Shift64Lsr . 6) ((Var (Short "v2")))) (App (Shift64Lsr . 7) ((Var (Short "v2"))))))) (App Opapp ((App Opapp ((Var (Short ">>")) (App (Shift64Lsr . 8) ((Var (Short "v2")))))) (Let (SOME "k") (App OpnMinus ((Var (Short "v1")) (Lit 8))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k"))))))))))) (Dletrec (unk unk) (("~>>" "v2" Fun "v1" (If (App OpbLt ((Lit 64) (Var (Short "v1")))) (App (Shift64Asr . 64) ((Var (Short "v2")))) (If (App OpbLt ((Var (Short "v1")) (Lit 8))) (If (App OpbLt ((Var (Short "v1")) (Lit 4))) (If (App OpbLt ((Var (Short "v1")) (Lit 2))) (If (App OpbLt ((Var (Short "v1")) (Lit 1))) (Var (Short "v2")) (App (Shift64Asr . 1) ((Var (Short "v2"))))) (If (App OpbLt ((Var (Short "v1")) (Lit 3))) (App (Shift64Asr . 2) ((Var (Short "v2")))) (App (Shift64Asr . 3) ((Var (Short "v2")))))) (If (App OpbLt ((Var (Short "v1")) (Lit 6))) (If (App OpbLt ((Var (Short "v1")) (Lit 5))) (App (Shift64Asr . 4) ((Var (Short "v2")))) (App (Shift64Asr . 5) ((Var (Short "v2"))))) (If (App OpbLt ((Var (Short "v1")) (Lit 7))) (App (Shift64Asr . 6) ((Var (Short "v2")))) (App (Shift64Asr . 7) ((Var (Short "v2"))))))) (App Opapp ((App Opapp ((Var (Short "~>>")) (App (Shift64Asr . 8) ((Var (Short "v2")))))) (Let (SOME "k") (App OpnMinus ((Var (Short "v1")) (Lit 8))) (If (App OpbLt ((Var (Short "k")) (Lit 0))) (Lit 0) (Var (Short "k"))))))))))) (Dlet (unk unk) "concatAll" (Fun "v1" (Fun "v2" (Fun "v3" (Fun "v4" (Fun "v5" (Fun "v6" (Fun "v7" (Fun "v8" (App Opw64Orw ((App (Shift64Lsl . 0) ((App (Shift64Lsr . 0) ((App W64fromInt ((App W8toInt ((Var (Short "v1")))))))))) (App (Shift64Lsl . 8) ((App Opw64Orw ((App (Shift64Lsl . 0) ((App (Shift64Lsr . 0) ((App W64fromInt ((App W8toInt ((Var (Short "v2")))))))))) (App (Shift64Lsl . 8) ((App Opw64Orw ((App (Shift64Lsl . 0) ((App (Shift64Lsr . 0) ((App W64fromInt ((App W8toInt ((Var (Short "v3")))))))))) (App (Shift64Lsl . 8) ((App Opw64Orw ((App (Shift64Lsl . 0) ((App (Shift64Lsr . 0) ((App W64fromInt ((App W8toInt ((Var (Short "v4")))))))))) (App (Shift64Lsl . 8) ((App Opw64Orw ((App (Shift64Lsl . 0) ((App (Shift64Lsr . 0) ((App W64fromInt ((App W8toInt ((Var (Short "v5")))))))))) (App (Shift64Lsl . 8) ((App Opw64Orw ((App (Shift64Lsl . 0) ((App (Shift64Lsr . 0) ((App W64fromInt ((App W8toInt ((Var (Short "v6")))))))))) (App (Shift64Lsl . 8) ((App Opw64Orw ((App (Shift64Lsl . 0) ((App (Shift64Lsr . 0) ((App W64fromInt ((App W8toInt ((Var (Short "v7")))))))))) (App (Shift64Lsl . 8) ((App (Shift64Lsl . 0) ((App (Shift64Lsr . 0) ((App W64fromInt ((App W8toInt ((Var (Short "v8"))))))))))))))))))))))))))))))))))))))))))))))))) (Dtabbrev (unk unk) nil "byte" (Atapp nil (Short "word8"))) (Dmod "Word8" ((Dtabbrev (unk unk) nil "word" (Atapp nil (Short "word8"))) (Dlet (unk unk) "fromInt" (Fun "v1" (App W8fromInt ((Var (Short "v1")))))) (Dlet (unk unk) "toInt" (Fun "v1" (App W8toInt ((Var (Short "v1")))))) (Dlet (unk unk) "toIntSigned" (Fun "v1" (Let (SOME "x") (App W8toInt ((Var (Short "v1")))) (If (App OpbLt ((Var (Short "x")) (Lit 128))) (Var (Short "x")) (App OpnMinus ((Var (Short "x")) (Lit 256))))))) (Dlet (unk unk) "andb" (Fun "v1" (Fun "v2" (App Opw8Andw ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "orb" (Fun "v1" (Fun "v2" (App Opw8Orw ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "xorb" (Fun "v1" (Fun "v2" (App Opw8Xor ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "notb" (Fun "v1" (App Opw8Xor ((Var (Short "v1")) (Lit (word8 255)))))) (Dlet (unk unk) "+" (Fun "v1" (Fun "v2" (App Opw8Add ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "-" (Fun "v1" (Fun "v2" (App Opw8Sub ((Var (Short "v1")) (Var (Short "v2"))))))) (Dlet (unk unk) "<<" (Fun "v2" (Fun "v1" (If (App OpbLt ((Var (Short "v1")) (Lit 8))) (If (App OpbLt ((Var (Short "v1")) (Lit 4))) (If (App OpbLt ((Var (Short "v1")) (Lit 2))) (If (App OpbLt ((Var (Short "v1")) (Lit 1))) (Var (Short "v2")) (App (Shift8Lsl . 1) ((Var (Short "v2"))))) (If (App OpbLt ((Var (Short "v1")) (Lit 3))) (App (Shift8Lsl . 2) ((Var (Short "v2")))) (App (Shift8Lsl . 3) ((Var (Short "v2")))))) (If (App OpbLt ((Var (Short "v1")) (Lit 6))) (If (App OpbLt ((Var (Short "v1")) (Lit 5))) (App (Shift8Lsl . 4) ((Var (Short "v2")))) (App (Shift8Lsl . 5) ((Var (Short "v2"))))) (If (App OpbLt ((Var (Short "v1")) (Lit 7))) (App (Shift8Lsl . 6) ((Var (Short "v2")))) (App (Shift8Lsl . 7) ((Var (Short "v2"))))))) (Lit (word8 0)))))) (Dlet (unk unk) ">>" (Fun "v2" (Fun "v1" (If (App OpbLt ((Var (Short "v1")) (Lit 8))) (If (App OpbLt ((Var (Short "v1")) (Lit 4))) (If (App OpbLt ((Var (Short "v1")) (Lit 2))) (If (App OpbLt ((Var (Short "v1")) (Lit 1))) (Var (Short "v2")) (App (Shift8Lsr . 1) ((Var (Short "v2"))))) (If (App OpbLt ((Var (Short "v1")) (Lit 3))) (App (Shift8Lsr . 2) ((Var (Short "v2")))) (App (Shift8Lsr . 3) ((Var (Short "v2")))))) (If (App OpbLt ((Var (Short "v1")) (Lit 6))) (If (App OpbLt ((Var (Short "v1")) (Lit 5))) (App (Shift8Lsr . 4) ((Var (Short "v2")))) (App (Shift8Lsr . 5) ((Var (Short "v2"))))) (If (App OpbLt ((Var (Short "v1")) (Lit 7))) (App (Shift8Lsr . 6) ((Var (Short "v2")))) (App (Shift8Lsr . 7) ((Var (Short "v2"))))))) (Lit (word8 0)))))) (Dlet (unk unk) "~>>" (Fun "v2" (Fun "v1" (If (App OpbLt ((Var (Short "v1")) (Lit 8))) (If (App OpbLt ((Var (Short "v1")) (Lit 4))) (If (App OpbLt ((Var (Short "v1")) (Lit 2))) (If (App OpbLt ((Var (Short "v1")) (Lit 1))) (Var (Short "v2")) (App (Shift8Asr . 1) ((Var (Short "v2"))))) (If (App OpbLt ((Var (Short "v1")) (Lit 3))) (App (Shift8Asr . 2) ((Var (Short "v2")))) (App (Shift8Asr . 3) ((Var (Short "v2")))))) (If (App OpbLt ((Var (Short "v1")) (Lit 6))) (If (App OpbLt ((Var (Short "v1")) (Lit 5))) (App (Shift8Asr . 4) ((Var (Short "v2")))) (App (Shift8Asr . 5) ((Var (Short "v2"))))) (If (App OpbLt ((Var (Short "v1")) (Lit 7))) (App (Shift8Asr . 6) ((Var (Short "v2")))) (App (Shift8Asr . 7) ((Var (Short "v2"))))))) (App (Shift8Asr . 8) ((Var (Short "v2")))))))))) (Dtabbrev (unk unk) nil "byte_array" (Atapp nil (Short "word8array"))) (Dmod "Word8Array" ((Dlet (unk unk) "array" (Fun "x" (Fun "y" (App Aw8alloc ((Var (Short "x")) (Var (Short "y"))))))) (Dlet (unk unk) "sub" (Fun "x" (Fun "y" (App Aw8sub ((Var (Short "x")) (Var (Short "y"))))))) (Dlet (unk unk) "length" (Fun "x" (App Aw8length ((Var (Short "x")))))) (Dlet (unk unk) "update" (Fun "x" (Fun "y" (Fun "z" (App Aw8update ((Var (Short "x")) (Var (Short "y")) (Var (Short "z")))))))) (Dlet (unk unk) "copy" (Fun "src" (Fun "srcoff" (Fun "len" (Fun "dst" (Fun "dstoff" (App CopyAw8Aw8 ((Var (Short "src")) (Var (Short "srcoff")) (Var (Short "len")) (Var (Short "dst")) (Var (Short "dstoff")))))))))) (Dlet (unk unk) "copyVec" (Fun "src" (Fun "srcoff" (Fun "len" (Fun "dst" (Fun "dstoff" (App CopyStrAw8 ((Var (Short "src")) (Var (Short "srcoff")) (Var (Short "len")) (Var (Short "dst")) (Var (Short "dstoff")))))))))) (Dlet (unk unk) "substring" (Fun "src" (Fun "srcoff" (Fun "len" (App CopyAw8Str ((Var (Short "src")) (Var (Short "srcoff")) (Var (Short "len")))))))) (Dlocal ((Dletrec ((0 14) (5 38)) (("findi_aux" "f" Fun "arr" (Fun "max" (Fun "n" (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "n")))) (Var (Short "max")))) (If (Var (Short " v0")) (Con (SOME (Short "None")) nil) (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "sub")) (Var (Short "arr")))) (Var (Short "n")))) (Let (SOME " v2") (App Opapp ((Var (Short "f")) (Var (Short " v1")))) (If (Var (Short " v2")) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Short "sub")) (Var (Short "arr")))) (Var (Short "n")))) (Let (SOME " v4") (Con NONE ((Var (Short "n")) (Var (Short " v3")))) (Con (SOME (Short "Some")) ((Var (Short " v4")))))) (Let (SOME " v5") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "n")))) (Lit 1))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "findi_aux")) (Var (Short "f")))) (Var (Short "arr")))) (Var (Short "max")))) (Var (Short " v5")))))))))))))))) ((Dletrec ((0 14) (1 33)) (("findi" "f" Fun "arr" (Let (SOME " v0") (App Opapp ((Var (Short "length")) (Var (Short "arr")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "findi_aux")) (Var (Short "f")))) (Var (Short "arr")))) (Var (Short " v0")))) (Lit 0))))))))))) (Dmod "Array" ((Dtabbrev (unk unk) ("'a") "array" (Atapp ((Atvar "'a")) (Short "array"))) (Dlet (unk unk) "array" (Fun "x" (Fun "y" (App Aalloc ((Var (Short "x")) (Var (Short "y"))))))) (Dlet (unk unk) "arrayEmpty" (Fun "x" (App AallocEmpty ((Var (Short "x")))))) (Dlet (unk unk) "sub" (Fun "x" (Fun "y" (App Asub ((Var (Short "x")) (Var (Short "y"))))))) (Dlet (unk unk) "length" (Fun "x" (App Alength ((Var (Short "x")))))) (Dlet (unk unk) "update" (Fun "x" (Fun "y" (Fun "z" (App Aupdate ((Var (Short "x")) (Var (Short "y")) (Var (Short "z")))))))) (Dletrec ((0 14) (9 6)) (("fromList" "l" Letrec (("f" "arr" Fun "l" (Fun "i" (Mat (Var (Short "l")) (((Pcon (SOME (Short "[]")) nil) Var (Short "arr")) ((Pcon (SOME (Short "::")) ("h" "t")) Let NONE (App Opapp ((App Opapp ((App Opapp ((Var (Short "update")) (Var (Short "arr")))) (Var (Short "i")))) (Var (Short "h")))) (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "i")))) (Lit 1))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "f")) (Var (Short "arr")))) (Var (Short "t")))) (Var (Short " v0"))))))))))) (Mat (Var (Short "l")) (((Pcon (SOME (Short "[]")) nil) Let (SOME " v1") (Con NONE nil) (App Opapp ((Var (Short "arrayEmpty")) (Var (Short " v1"))))) ((Pcon (SOME (Short "::")) ("h" "t")) Let (SOME " v2") (App Opapp ((Var (Long "List" (Short "length"))) (Var (Short "l")))) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Short "array")) (Var (Short " v2")))) (Var (Short "h")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "f")) (Var (Short " v3")))) (Var (Short "t")))) (Lit 1)))))))))) (Dletrec ((0 14) (9 6)) (("tabulate" "n" Fun "f" (Letrec (("u" "arr" Fun "x" (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "x")))) (Var (Short "n")))) (If (Var (Short " v0")) (Var (Short "arr")) (Let (SOME " v1") (App Opapp ((Var (Short "f")) (Var (Short "x")))) (Let NONE (App Opapp ((App Opapp ((App Opapp ((Var (Short "update")) (Var (Short "arr")))) (Var (Short "x")))) (Var (Short " v1")))) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "x")))) (Lit 1))) (App Opapp ((App Opapp ((Var (Short "u")) (Var (Short "arr")))) (Var (Short " v2"))))))))))) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "n")))) (Lit 0))) (If (Var (Short " v3")) (Let (SOME " v4") (Con NONE nil) (App Opapp ((Var (Short "arrayEmpty")) (Var (Short " v4"))))) (Let (SOME " v5") (App Opapp ((Var (Short "f")) (Lit 0))) (Let (SOME " v6") (App Opapp ((App Opapp ((Var (Short "array")) (Var (Short "n")))) (Var (Short " v5")))) (App Opapp ((App Opapp ((Var (Short "u")) (Var (Short " v6")))) (Lit 1))))))))))) (Dlocal ((Dletrec ((0 14) (3 74)) (("copy_aux" "src" Fun "dst" (Fun "di" (Fun "max" (Fun "n" (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "n")))) (Var (Short "max")))) (If (Var (Short " v0")) (Con NONE nil) (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "sub")) (Var (Short "src")))) (Var (Short "n")))) (Let NONE (App Opapp ((App Opapp ((App Opapp ((Var (Short "update")) (Var (Short "dst")))) (Var (Short "di")))) (Var (Short " v1")))) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "n")))) (Lit 1))) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "di")))) (Lit 1))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "copy_aux")) (Var (Short "src")))) (Var (Short "dst")))) (Var (Short " v2")))) (Var (Short "max")))) (Var (Short " v3"))))))))))))))))) ((Dletrec ((0 14) (1 37)) (("copy" "src" Fun "dst" (Fun "di" (Let (SOME " v0") (App Opapp ((Var (Short "length")) (Var (Short "src")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "copy_aux")) (Var (Short "src")))) (Var (Short "dst")))) (Var (Short "di")))) (Var (Short " v0")))) (Lit 0)))))))) (Dlocal ((Dletrec ((0 14) (3 84)) (("copyVec_aux" "src" Fun "dst" (Fun "di" (Fun "max" (Fun "n" (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "n")))) (Var (Short "max")))) (If (Var (Short " v0")) (Con NONE nil) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Long "Vector" (Short "sub"))) (Var (Short "src")))) (Var (Short "n")))) (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "di")))) (Var (Short "n")))) (Let NONE (App Opapp ((App Opapp ((App Opapp ((Var (Short "update")) (Var (Short "dst")))) (Var (Short " v1")))) (Var (Short " v2")))) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "n")))) (Lit 1))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "copyVec_aux")) (Var (Short "src")))) (Var (Short "dst")))) (Var (Short "di")))) (Var (Short "max")))) (Var (Short " v3"))))))))))))))))) ((Dletrec ((0 14) (1 47)) (("copyVec" "src" Fun "dst" (Fun "di" (Let (SOME " v0") (App Opapp ((Var (Long "Vector" (Short "length"))) (Var (Short "src")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "copyVec_aux")) (Var (Short "src")))) (Var (Short "dst")))) (Var (Short "di")))) (Var (Short " v0")))) (Lit 0)))))))) (Dlocal ((Dletrec ((0 14) (3 50)) (("app_aux" "f" Fun "arr" (Fun "max" (Fun "n" (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "n")))) (Var (Short "max")))) (If (Var (Short " v0")) (Con NONE nil) (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "sub")) (Var (Short "arr")))) (Var (Short "n")))) (Let NONE (App Opapp ((Var (Short "f")) (Var (Short " v1")))) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "n")))) (Lit 1))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "app_aux")) (Var (Short "f")))) (Var (Short "arr")))) (Var (Short "max")))) (Var (Short " v2"))))))))))))))) ((Dletrec ((0 15) (1 31)) (("app" "f" Fun "arr" (Let (SOME " v0") (App Opapp ((Var (Short "length")) (Var (Short "arr")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "app_aux")) (Var (Short "f")))) (Var (Short "arr")))) (Var (Short " v0")))) (Lit 0))))))) (Dlocal ((Dletrec ((0 15) (4 36)) (("appi_aux" "f" Fun "arr" (Fun "max" (Fun "n" (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "n")))) (Var (Short "max")))) (If (Var (Short " v0")) (Con NONE nil) (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "sub")) (Var (Short "arr")))) (Var (Short "n")))) (Let NONE (App Opapp ((App Opapp ((Var (Short "f")) (Var (Short "n")))) (Var (Short " v1")))) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "n")))) (Lit 1))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "appi_aux")) (Var (Short "f")))) (Var (Short "arr")))) (Var (Short "max")))) (Var (Short " v2"))))))))))))))) ((Dletrec ((0 15) (1 32)) (("appi" "f" Fun "arr" (Let (SOME " v0") (App Opapp ((Var (Short "length")) (Var (Short "arr")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "appi_aux")) (Var (Short "f")))) (Var (Short "arr")))) (Var (Short " v0")))) (Lit 0))))))) (Dlocal ((Dletrec ((0 15) (3 68)) (("modify_aux" "f" Fun "arr" (Fun "max" (Fun "n" (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "n")))) (Var (Short "max")))) (If (Var (Short " v0")) (Con NONE nil) (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "sub")) (Var (Short "arr")))) (Var (Short "n")))) (Let (SOME " v2") (App Opapp ((Var (Short "f")) (Var (Short " v1")))) (Let NONE (App Opapp ((App Opapp ((App Opapp ((Var (Short "update")) (Var (Short "arr")))) (Var (Short "n")))) (Var (Short " v2")))) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "n")))) (Lit 1))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "modify_aux")) (Var (Short "f")))) (Var (Short "arr")))) (Var (Short "max")))) (Var (Short " v3")))))))))))))))) ((Dletrec ((0 15) (1 34)) (("modify" "f" Fun "arr" (Let (SOME " v0") (App Opapp ((Var (Short "length")) (Var (Short "arr")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "modify_aux")) (Var (Short "f")))) (Var (Short "arr")))) (Var (Short " v0")))) (Lit 0))))))) (Dlocal ((Dletrec ((0 15) (3 71)) (("modifyi_aux" "f" Fun "arr" (Fun "max" (Fun "n" (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "n")))) (Var (Short "max")))) (If (Var (Short " v0")) (Con NONE nil) (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "sub")) (Var (Short "arr")))) (Var (Short "n")))) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "f")) (Var (Short "n")))) (Var (Short " v1")))) (Let NONE (App Opapp ((App Opapp ((App Opapp ((Var (Short "update")) (Var (Short "arr")))) (Var (Short "n")))) (Var (Short " v2")))) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "n")))) (Lit 1))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "modifyi_aux")) (Var (Short "f")))) (Var (Short "arr")))) (Var (Short "max")))) (Var (Short " v3")))))))))))))))) ((Dletrec ((0 15) (1 35)) (("modifyi" "f" Fun "arr" (Let (SOME " v0") (App Opapp ((Var (Short "length")) (Var (Short "arr")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "modifyi_aux")) (Var (Short "f")))) (Var (Short "arr")))) (Var (Short " v0")))) (Lit 0))))))) (Dlocal ((Dletrec ((0 15) (3 60)) (("foldli_aux" "f" Fun "init" (Fun "arr" (Fun "max" (Fun "n" (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "n")))) (Var (Short "max")))) (If (Var (Short " v0")) (Var (Short "init")) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "n")))) (Lit 1))) (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "sub")) (Var (Short "arr")))) (Var (Short "n")))) (Let (SOME " v2") (App Opapp ((App Opapp ((App Opapp ((Var (Short "f")) (Var (Short "n")))) (Var (Short " v1")))) (Var (Short "init")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "foldli_aux")) (Var (Short "f")))) (Var (Short " v2")))) (Var (Short "arr")))) (Var (Short "max")))) (Var (Short " v3")))))))))))))))) ((Dletrec ((0 15) (1 39)) (("foldli" "f" Fun "init" (Fun "arr" (Let (SOME " v0") (App Opapp ((Var (Short "length")) (Var (Short "arr")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "foldli_aux")) (Var (Short "f")))) (Var (Short "init")))) (Var (Short "arr")))) (Var (Short " v0")))) (Lit 0)))))))) (Dlocal ((Dletrec ((0 15) (3 57)) (("foldl_aux" "f" Fun "init" (Fun "arr" (Fun "max" (Fun "n" (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "n")))) (Var (Short "max")))) (If (Var (Short " v0")) (Var (Short "init")) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "n")))) (Lit 1))) (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "sub")) (Var (Short "arr")))) (Var (Short "n")))) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "f")) (Var (Short " v1")))) (Var (Short "init")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "foldl_aux")) (Var (Short "f")))) (Var (Short " v2")))) (Var (Short "arr")))) (Var (Short "max")))) (Var (Short " v3")))))))))))))))) ((Dletrec ((0 15) (1 38)) (("foldl" "f" Fun "init" (Fun "arr" (Let (SOME " v0") (App Opapp ((Var (Short "length")) (Var (Short "arr")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "foldl_aux")) (Var (Short "f")))) (Var (Short "init")))) (Var (Short "arr")))) (Var (Short " v0")))) (Lit 0)))))))) (Dlocal ((Dletrec ((0 15) (3 67)) (("foldri_aux" "f" Fun "init" (Fun "arr" (Fun "n" (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "n")))) (Lit 0))) (If (Var (Short " v0")) (Var (Short "init")) (Let (SOME " v5") (App Opapp ((App Opapp ((Var (Short "-")) (Var (Short "n")))) (Lit 1))) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "-")) (Var (Short "n")))) (Lit 1))) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Short "sub")) (Var (Short "arr")))) (Var (Short " v2")))) (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "-")) (Var (Short "n")))) (Lit 1))) (Let (SOME " v4") (App Opapp ((App Opapp ((App Opapp ((Var (Short "f")) (Var (Short " v1")))) (Var (Short " v3")))) (Var (Short "init")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "foldri_aux")) (Var (Short "f")))) (Var (Short " v4")))) (Var (Short "arr")))) (Var (Short " v5"))))))))))))))))) ((Dletrec ((0 15) (1 37)) (("foldri" "f" Fun "init" (Fun "arr" (Let (SOME " v0") (App Opapp ((Var (Short "length")) (Var (Short "arr")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "foldri_aux")) (Var (Short "f")))) (Var (Short "init")))) (Var (Short "arr")))) (Var (Short " v0"))))))))) (Dlocal ((Dletrec ((0 15) (3 58)) (("foldr_aux" "f" Fun "init" (Fun "arr" (Fun "n" (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "n")))) (Lit 0))) (If (Var (Short " v0")) (Var (Short "init")) (Let (SOME " v4") (App Opapp ((App Opapp ((Var (Short "-")) (Var (Short "n")))) (Lit 1))) (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "-")) (Var (Short "n")))) (Lit 1))) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "sub")) (Var (Short "arr")))) (Var (Short " v1")))) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Short "f")) (Var (Short " v2")))) (Var (Short "init")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "foldr_aux")) (Var (Short "f")))) (Var (Short " v3")))) (Var (Short "arr")))) (Var (Short " v4")))))))))))))))) ((Dletrec ((0 15) (1 36)) (("foldr" "f" Fun "init" (Fun "arr" (Let (SOME " v0") (App Opapp ((Var (Short "length")) (Var (Short "arr")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "foldr_aux")) (Var (Short "f")))) (Var (Short "init")))) (Var (Short "arr")))) (Var (Short " v0"))))))))) (Dlocal ((Dletrec ((0 15) (5 37)) (("find_aux" "f" Fun "arr" (Fun "max" (Fun "n" (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "n")))) (Var (Short "max")))) (If (Var (Short " v0")) (Con (SOME (Short "None")) nil) (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "sub")) (Var (Short "arr")))) (Var (Short "n")))) (Let (SOME " v2") (App Opapp ((Var (Short "f")) (Var (Short " v1")))) (If (Var (Short " v2")) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Short "sub")) (Var (Short "arr")))) (Var (Short "n")))) (Con (SOME (Short "Some")) ((Var (Short " v3"))))) (Let (SOME " v4") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "n")))) (Lit 1))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "find_aux")) (Var (Short "f")))) (Var (Short "arr")))) (Var (Short "max")))) (Var (Short " v4")))))))))))))))) ((Dletrec ((0 15) (1 32)) (("find" "f" Fun "arr" (Let (SOME " v0") (App Opapp ((Var (Short "length")) (Var (Short "arr")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "find_aux")) (Var (Short "f")))) (Var (Short "arr")))) (Var (Short " v0")))) (Lit 0))))))) (Dlocal ((Dletrec (unk unk) (("findi_aux" "f" Fun "arr" (Fun "max" (Fun "n" (Let (SOME "a") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "n")))) (Var (Short "max")))) (If (Var (Short "a")) (Con (SOME (Short "None")) nil) (Let (SOME "b") (App Opapp ((App Opapp ((Var (Short "sub")) (Var (Short "arr")))) (Var (Short "n")))) (Let (SOME "c") (App Opapp ((App Opapp ((Var (Short "f")) (Var (Short "n")))) (Var (Short "b")))) (If (Var (Short "c")) (Let (SOME "d") (App Opapp ((App Opapp ((Var (Short "sub")) (Var (Short "arr")))) (Var (Short "n")))) (Con (SOME (Short "Some")) ((Con NONE ((Var (Short "n")) (Var (Short "d"))))))) (Let (SOME "e") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "n")))) (Lit 1))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "findi_aux")) (Var (Short "f")))) (Var (Short "arr")))) (Var (Short "max")))) (Var (Short "e")))))))))))))))) ((Dletrec ((0 15) (1 33)) (("findi" "f" Fun "arr" (Let (SOME " v0") (App Opapp ((Var (Short "length")) (Var (Short "arr")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "findi_aux")) (Var (Short "f")))) (Var (Short "arr")))) (Var (Short " v0")))) (Lit 0))))))) (Dlocal ((Dletrec ((0 15) (5 37)) (("exists_aux" "f" Fun "arr" (Fun "max" (Fun "n" (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "n")))) (Var (Short "max")))) (If (Var (Short " v0")) (Con (SOME (Short "False")) nil) (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "sub")) (Var (Short "arr")))) (Var (Short "n")))) (Let (SOME " v2") (App Opapp ((Var (Short "f")) (Var (Short " v1")))) (If (Var (Short " v2")) (Con (SOME (Short "True")) nil) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "n")))) (Lit 1))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "exists_aux")) (Var (Short "f")))) (Var (Short "arr")))) (Var (Short "max")))) (Var (Short " v3")))))))))))))))) ((Dletrec ((0 15) (1 34)) (("exists" "f" Fun "arr" (Let (SOME " v0") (App Opapp ((Var (Short "length")) (Var (Short "arr")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "exists_aux")) (Var (Short "f")))) (Var (Short "arr")))) (Var (Short " v0")))) (Lit 0))))))) (Dlocal ((Dletrec ((0 15) (5 14)) (("all_aux" "f" Fun "arr" (Fun "max" (Fun "n" (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "n")))) (Var (Short "max")))) (If (Var (Short " v0")) (Con (SOME (Short "True")) nil) (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "sub")) (Var (Short "arr")))) (Var (Short "n")))) (Let (SOME " v2") (App Opapp ((Var (Short "f")) (Var (Short " v1")))) (If (Var (Short " v2")) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "n")))) (Lit 1))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "all_aux")) (Var (Short "f")))) (Var (Short "arr")))) (Var (Short "max")))) (Var (Short " v3"))))) (Con (SOME (Short "False")) nil)))))))))))) ((Dletrec ((0 15) (1 31)) (("all" "f" Fun "arr" (Let (SOME " v0") (App Opapp ((Var (Short "length")) (Var (Short "arr")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "all_aux")) (Var (Short "f")))) (Var (Short "arr")))) (Var (Short " v0")))) (Lit 0))))))) (Dlocal ((Dletrec ((0 15) (5 34)) (("collate_aux" "f" Fun "a1" (Fun "a2" (Fun "max" (Fun "ord" (Fun "n" (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "n")))) (Var (Short "max")))) (If (Var (Short " v0")) (Var (Short "ord")) (Let (SOME " v4") (Con (SOME (Short "Equal")) nil) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "sub")) (Var (Short "a2")))) (Var (Short "n")))) (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "sub")) (Var (Short "a1")))) (Var (Short "n")))) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Short "f")) (Var (Short " v1")))) (Var (Short " v2")))) (Let (SOME " v5") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short " v3")))) (Var (Short " v4")))) (If (Var (Short " v5")) (Let (SOME " v6") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "n")))) (Lit 1))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "collate_aux")) (Var (Short "f")))) (Var (Short "a1")))) (Var (Short "a2")))) (Var (Short "max")))) (Var (Short "ord")))) (Var (Short " v6"))))) (Let (SOME " v8") (App Opapp ((App Opapp ((Var (Short "sub")) (Var (Short "a2")))) (Var (Short "n")))) (Let (SOME " v7") (App Opapp ((App Opapp ((Var (Short "sub")) (Var (Short "a1")))) (Var (Short "n")))) (App Opapp ((App Opapp ((Var (Short "f")) (Var (Short " v7")))) (Var (Short " v8")))))))))))))))))))))) ((Dletrec ((0 15) (5 47)) (("collate" "f" Fun "a1" (Fun "a2" (Let (SOME " v1") (App Opapp ((Var (Short "length")) (Var (Short "a2")))) (Let (SOME " v0") (App Opapp ((Var (Short "length")) (Var (Short "a1")))) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "<")) (Var (Short " v0")))) (Var (Short " v1")))) (If (Var (Short " v2")) (Let (SOME " v4") (Con (SOME (Short "Less")) nil) (Let (SOME " v3") (App Opapp ((Var (Short "length")) (Var (Short "a1")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "collate_aux")) (Var (Short "f")))) (Var (Short "a1")))) (Var (Short "a2")))) (Var (Short " v3")))) (Var (Short " v4")))) (Lit 0))))) (Let (SOME " v6") (App Opapp ((Var (Short "length")) (Var (Short "a1")))) (Let (SOME " v5") (App Opapp ((Var (Short "length")) (Var (Short "a2")))) (Let (SOME " v7") (App Opapp ((App Opapp ((Var (Short "<")) (Var (Short " v5")))) (Var (Short " v6")))) (If (Var (Short " v7")) (Let (SOME " v9") (Con (SOME (Short "Greater")) nil) (Let (SOME " v8") (App Opapp ((Var (Short "length")) (Var (Short "a2")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "collate_aux")) (Var (Short "f")))) (Var (Short "a1")))) (Var (Short "a2")))) (Var (Short " v8")))) (Var (Short " v9")))) (Lit 0))))) (Let (SOME " v11") (Con (SOME (Short "Equal")) nil) (Let (SOME " v10") (App Opapp ((Var (Short "length")) (Var (Short "a2")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "collate_aux")) (Var (Short "f")))) (Var (Short "a1")))) (Var (Short "a2")))) (Var (Short " v10")))) (Var (Short " v11")))) (Lit 0))))))))))))))))) (Dlet ((1 2) (2 32)) "lookup" (Fun "arr" (Fun "default" (Fun "n" (Handle (App Opapp ((App Opapp ((Var (Short "sub")) (Var (Short "arr")))) (Var (Short "n")))) (((Pany) Var (Short "default")))))))) (Dlet ((1 2) (9 6)) "updateResize" (Fun "arr" (Fun "default" (Fun "n" (Fun "v" (Handle (Let NONE (App Opapp ((App Opapp ((App Opapp ((Var (Short "update")) (Var (Short "arr")))) (Var (Short "n")))) (Var (Short "v")))) (Var (Short "arr"))) (((Pany) Let (SOME " v0") (App Opapp ((App Opapp ((Var (Short "*")) (Lit 2))) (Var (Short "n")))) (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short " v0")))) (Lit 1))) (Let (SOME "arr'") (App Opapp ((App Opapp ((Var (Short "array")) (Var (Short " v1")))) (Var (Short "default")))) (Let NONE (App Opapp ((App Opapp ((App Opapp ((Var (Short "copy")) (Var (Short "arr")))) (Var (Short "arr'")))) (Lit 0))) (Let NONE (App Opapp ((App Opapp ((App Opapp ((Var (Short "update")) (Var (Short "arr'")))) (Var (Short "n")))) (Var (Short "v")))) (Var (Short "arr'")))))))))))))))))))))))))))))))))))))))))))))) (Dtype (unk unk) ((("'k" "'w") "balanced_map" ("Bin" (Atapp nil (Short "int")) (Atvar "'k") (Atvar "'w") (Atapp ((Atvar "'k") (Atvar "'w")) (Short "balanced_map")) (Atapp ((Atvar "'k") (Atvar "'w")) (Short "balanced_map"))) ("Tip")))) (Dlocal ((Dtype (unk unk) ((("'a" "'b") "map" ("Map" (Atfun (Atvar "'a") (Atfun (Atvar "'a") (Atapp nil (Short "ordering")))) (Atapp ((Atvar "'a") (Atvar "'b")) (Short "balanced_map")))))) (Dlet (unk unk) "size" (Fun "v6" (Mat (Var (Short "v6")) (((Pcon (SOME (Short "Tip")) nil) Lit 0) ((Pcon (SOME (Short "Bin")) ("v5" "v4" "v3" "v2" "v1")) Var (Short "v5")))))) (Dlet (unk unk) "singleton" (Fun "v1" (Fun "v2" (Con (SOME (Short "Bin")) ((Lit 1) (Var (Short "v1")) (Var (Short "v2")) (Con (SOME (Short "Tip")) nil) (Con (SOME (Short "Tip")) nil)))))) (Dlet (unk unk) "ratio" (Lit 2)) (Dlet (unk unk) "delta" (Lit 3)) (Dlet (unk unk) "balancel" (Fun "v41" (Fun "v42" (Fun "v43" (Fun "v44" (Mat (Var (Short "v43")) (((Pcon (SOME (Short "Tip")) nil) Mat (Var (Short "v44")) (((Pcon (SOME (Short "Tip")) nil) Con (SOME (Short "Bin")) ((Lit 1) (Var (Short "v41")) (Var (Short "v42")) (Con (SOME (Short "Tip")) nil) (Con (SOME (Short "Tip")) nil))) ((Pcon (SOME (Short "Bin")) ("v5" "v4" "v3" "v2" "v1")) Con (SOME (Short "Bin")) ((App OpnPlus ((Lit 1) (Var (Short "v5")))) (Var (Short "v41")) (Var (Short "v42")) (Con (SOME (Short "Tip")) nil) (Con (SOME (Short "Bin")) ((Var (Short "v5")) (Var (Short "v4")) (Var (Short "v3")) (Var (Short "v2")) (Var (Short "v1")))))))) ((Pcon (SOME (Short "Bin")) ("v40" "v39" "v38" "v37" "v36")) Mat (Var (Short "v44")) (((Pcon (SOME (Short "Tip")) nil) Mat (Var (Short "v37")) (((Pcon (SOME (Short "Tip")) nil) Mat (Var (Short "v36")) (((Pcon (SOME (Short "Tip")) nil) Con (SOME (Short "Bin")) ((Lit 2) (Var (Short "v41")) (Var (Short "v42")) (Con (SOME (Short "Bin")) ((Var (Short "v40")) (Var (Short "v39")) (Var (Short "v38")) (Con (SOME (Short "Tip")) nil) (Con (SOME (Short "Tip")) nil))) (Con (SOME (Short "Tip")) nil))) ((Pcon (SOME (Short "Bin")) ("v10" "v9" "v8" "v7" "v6")) Con (SOME (Short "Bin")) ((Lit 3) (Var (Short "v9")) (Var (Short "v8")) (Con (SOME (Short "Bin")) ((Lit 1) (Var (Short "v39")) (Var (Short "v38")) (Con (SOME (Short "Tip")) nil) (Con (SOME (Short "Tip")) nil))) (Con (SOME (Short "Bin")) ((Lit 1) (Var (Short "v41")) (Var (Short "v42")) (Con (SOME (Short "Tip")) nil) (Con (SOME (Short "Tip")) nil))))))) ((Pcon (SOME (Short "Bin")) ("v20" "v19" "v18" "v17" "v16")) Mat (Var (Short "v36")) (((Pcon (SOME (Short "Tip")) nil) Con (SOME (Short "Bin")) ((Lit 3) (Var (Short "v39")) (Var (Short "v38")) (Con (SOME (Short "Bin")) ((Var (Short "v20")) (Var (Short "v19")) (Var (Short "v18")) (Var (Short "v17")) (Var (Short "v16")))) (Con (SOME (Short "Bin")) ((Lit 1) (Var (Short "v41")) (Var (Short "v42")) (Con (SOME (Short "Tip")) nil) (Con (SOME (Short "Tip")) nil))))) ((Pcon (SOME (Short "Bin")) ("v15" "v14" "v13" "v12" "v11")) If (App OpbLt ((Var (Short "v15")) (App OpnTimes ((Var (Short "ratio")) (Var (Short "v20")))))) (Con (SOME (Short "Bin")) ((App OpnPlus ((Lit 1) (Var (Short "v40")))) (Var (Short "v39")) (Var (Short "v38")) (Con (SOME (Short "Bin")) ((Var (Short "v20")) (Var (Short "v19")) (Var (Short "v18")) (Var (Short "v17")) (Var (Short "v16")))) (Con (SOME (Short "Bin")) ((App OpnPlus ((Lit 1) (Var (Short "v15")))) (Var (Short "v41")) (Var (Short "v42")) (Con (SOME (Short "Bin")) ((Var (Short "v15")) (Var (Short "v14")) (Var (Short "v13")) (Var (Short "v12")) (Var (Short "v11")))) (Con (SOME (Short "Tip")) nil))))) (Con (SOME (Short "Bin")) ((App OpnPlus ((Lit 1) (Var (Short "v40")))) (Var (Short "v14")) (Var (Short "v13")) (Con (SOME (Short "Bin")) ((App OpnPlus ((App OpnPlus ((Lit 1) (Var (Short "v20")))) (App Opapp ((Var (Short "size")) (Var (Short "v12")))))) (Var (Short "v39")) (Var (Short "v38")) (Con (SOME (Short "Bin")) ((Var (Short "v20")) (Var (Short "v19")) (Var (Short "v18")) (Var (Short "v17")) (Var (Short "v16")))) (Var (Short "v12")))) (Con (SOME (Short "Bin")) ((App OpnPlus ((Lit 1) (App Opapp ((Var (Short "size")) (Var (Short "v11")))))) (Var (Short "v41")) (Var (Short "v42")) (Var (Short "v11")) (Con (SOME (Short "Tip")) nil)))))))))) ((Pcon (SOME (Short "Bin")) ("v35" "v34" "v33" "v32" "v31")) If (App OpbGt ((Var (Short "v40")) (App OpnTimes ((Var (Short "delta")) (Var (Short "v35")))))) (Mat (Var (Short "v37")) (((Pcon (SOME (Short "Tip")) nil) Con (SOME (Short "Tip")) nil) ((Pcon (SOME (Short "Bin")) ("v30" "v29" "v28" "v27" "v26")) Mat (Var (Short "v36")) (((Pcon (SOME (Short "Tip")) nil) Con (SOME (Short "Tip")) nil) ((Pcon (SOME (Short "Bin")) ("v25" "v24" "v23" "v22" "v21")) If (App OpbLt ((Var (Short "v25")) (App OpnTimes ((Var (Short "ratio")) (Var (Short "v30")))))) (Con (SOME (Short "Bin")) ((App OpnPlus ((App OpnPlus ((Lit 1) (Var (Short "v40")))) (Var (Short "v35")))) (Var (Short "v39")) (Var (Short "v38")) (Var (Short "v37")) (Con (SOME (Short "Bin")) ((App OpnPlus ((App OpnPlus ((Lit 1) (Var (Short "v35")))) (Var (Short "v25")))) (Var (Short "v41")) (Var (Short "v42")) (Var (Short "v36")) (Con (SOME (Short "Bin")) ((Var (Short "v35")) (Var (Short "v34")) (Var (Short "v33")) (Var (Short "v32")) (Var (Short "v31")))))))) (Con (SOME (Short "Bin")) ((App OpnPlus ((App OpnPlus ((Lit 1) (Var (Short "v40")))) (Var (Short "v35")))) (Var (Short "v24")) (Var (Short "v23")) (Con (SOME (Short "Bin")) ((App OpnPlus ((App OpnPlus ((Lit 1) (Var (Short "v30")))) (App Opapp ((Var (Short "size")) (Var (Short "v22")))))) (Var (Short "v39")) (Var (Short "v38")) (Var (Short "v37")) (Var (Short "v22")))) (Con (SOME (Short "Bin")) ((App OpnPlus ((App OpnPlus ((Lit 1) (Var (Short "v35")))) (App Opapp ((Var (Short "size")) (Var (Short "v21")))))) (Var (Short "v41")) (Var (Short "v42")) (Var (Short "v21")) (Con (SOME (Short "Bin")) ((Var (Short "v35")) (Var (Short "v34")) (Var (Short "v33")) (Var (Short "v32")) (Var (Short "v31"))))))))))))) (Con (SOME (Short "Bin")) ((App OpnPlus ((App OpnPlus ((Lit 1) (Var (Short "v40")))) (Var (Short "v35")))) (Var (Short "v41")) (Var (Short "v42")) (Con (SOME (Short "Bin")) ((Var (Short "v40")) (Var (Short "v39")) (Var (Short "v38")) (Var (Short "v37")) (Var (Short "v36")))) (Con (SOME (Short "Bin")) ((Var (Short "v35")) (Var (Short "v34")) (Var (Short "v33")) (Var (Short "v32")) (Var (Short "v31")))))))))))))))) (Dlet (unk unk) "balancer" (Fun "v41" (Fun "v42" (Fun "v43" (Fun "v44" (Mat (Var (Short "v43")) (((Pcon (SOME (Short "Tip")) nil) Mat (Var (Short "v44")) (((Pcon (SOME (Short "Tip")) nil) Con (SOME (Short "Bin")) ((Lit 1) (Var (Short "v41")) (Var (Short "v42")) (Con (SOME (Short "Tip")) nil) (Con (SOME (Short "Tip")) nil))) ((Pcon (SOME (Short "Bin")) ("v20" "v19" "v18" "v17" "v16")) Mat (Var (Short "v17")) (((Pcon (SOME (Short "Tip")) nil) Mat (Var (Short "v16")) (((Pcon (SOME (Short "Tip")) nil) Con (SOME (Short "Bin")) ((Lit 2) (Var (Short "v41")) (Var (Short "v42")) (Con (SOME (Short "Tip")) nil) (Con (SOME (Short "Bin")) ((Var (Short "v20")) (Var (Short "v19")) (Var (Short "v18")) (Con (SOME (Short "Tip")) nil) (Con (SOME (Short "Tip")) nil))))) ((Pcon (SOME (Short "Bin")) ("v5" "v4" "v3" "v2" "v1")) Con (SOME (Short "Bin")) ((Lit 3) (Var (Short "v19")) (Var (Short "v18")) (Con (SOME (Short "Bin")) ((Lit 1) (Var (Short "v41")) (Var (Short "v42")) (Con (SOME (Short "Tip")) nil) (Con (SOME (Short "Tip")) nil))) (Con (SOME (Short "Bin")) ((Var (Short "v5")) (Var (Short "v4")) (Var (Short "v3")) (Var (Short "v2")) (Var (Short "v1")))))))) ((Pcon (SOME (Short "Bin")) ("v15" "v14" "v13" "v12" "v11")) Mat (Var (Short "v16")) (((Pcon (SOME (Short "Tip")) nil) Con (SOME (Short "Bin")) ((Lit 3) (Var (Short "v14")) (Var (Short "v13")) (Con (SOME (Short "Bin")) ((Lit 1) (Var (Short "v41")) (Var (Short "v42")) (Con (SOME (Short "Tip")) nil) (Con (SOME (Short "Tip")) nil))) (Con (SOME (Short "Bin")) ((Lit 1) (Var (Short "v19")) (Var (Short "v18")) (Con (SOME (Short "Tip")) nil) (Con (SOME (Short "Tip")) nil))))) ((Pcon (SOME (Short "Bin")) ("v10" "v9" "v8" "v7" "v6")) If (App OpbLt ((Var (Short "v15")) (App OpnTimes ((Var (Short "ratio")) (Var (Short "v10")))))) (Con (SOME (Short "Bin")) ((App OpnPlus ((Lit 1) (Var (Short "v20")))) (Var (Short "v19")) (Var (Short "v18")) (Con (SOME (Short "Bin")) ((App OpnPlus ((Lit 1) (Var (Short "v15")))) (Var (Short "v41")) (Var (Short "v42")) (Con (SOME (Short "Tip")) nil) (Con (SOME (Short "Bin")) ((Var (Short "v15")) (Var (Short "v14")) (Var (Short "v13")) (Var (Short "v12")) (Var (Short "v11")))))) (Con (SOME (Short "Bin")) ((Var (Short "v10")) (Var (Short "v9")) (Var (Short "v8")) (Var (Short "v7")) (Var (Short "v6")))))) (Con (SOME (Short "Bin")) ((App OpnPlus ((Lit 1) (Var (Short "v20")))) (Var (Short "v14")) (Var (Short "v13")) (Con (SOME (Short "Bin")) ((App OpnPlus ((Lit 1) (App Opapp ((Var (Short "size")) (Var (Short "v12")))))) (Var (Short "v41")) (Var (Short "v42")) (Con (SOME (Short "Tip")) nil) (Var (Short "v12")))) (Con (SOME (Short "Bin")) ((App OpnPlus ((App OpnPlus ((Lit 1) (Var (Short "v10")))) (App Opapp ((Var (Short "size")) (Var (Short "v11")))))) (Var (Short "v19")) (Var (Short "v18")) (Var (Short "v11")) (Con (SOME (Short "Bin")) ((Var (Short "v10")) (Var (Short "v9")) (Var (Short "v8")) (Var (Short "v7")) (Var (Short "v6"))))))))))))))) ((Pcon (SOME (Short "Bin")) ("v40" "v39" "v38" "v37" "v36")) Mat (Var (Short "v44")) (((Pcon (SOME (Short "Tip")) nil) Con (SOME (Short "Bin")) ((App OpnPlus ((Lit 1) (Var (Short "v40")))) (Var (Short "v41")) (Var (Short "v42")) (Con (SOME (Short "Bin")) ((Var (Short "v40")) (Var (Short "v39")) (Var (Short "v38")) (Var (Short "v37")) (Var (Short "v36")))) (Con (SOME (Short "Tip")) nil))) ((Pcon (SOME (Short "Bin")) ("v35" "v34" "v33" "v32" "v31")) If (App OpbGt ((Var (Short "v35")) (App OpnTimes ((Var (Short "delta")) (Var (Short "v40")))))) (Mat (Var (Short "v32")) (((Pcon (SOME (Short "Tip")) nil) Con (SOME (Short "Tip")) nil) ((Pcon (SOME (Short "Bin")) ("v30" "v29" "v28" "v27" "v26")) Mat (Var (Short "v31")) (((Pcon (SOME (Short "Tip")) nil) Con (SOME (Short "Tip")) nil) ((Pcon (SOME (Short "Bin")) ("v25" "v24" "v23" "v22" "v21")) If (App OpbLt ((Var (Short "v30")) (App OpnTimes ((Var (Short "ratio")) (Var (Short "v25")))))) (Con (SOME (Short "Bin")) ((App OpnPlus ((App OpnPlus ((Lit 1) (Var (Short "v40")))) (Var (Short "v35")))) (Var (Short "v34")) (Var (Short "v33")) (Con (SOME (Short "Bin")) ((App OpnPlus ((App OpnPlus ((Lit 1) (Var (Short "v40")))) (Var (Short "v30")))) (Var (Short "v41")) (Var (Short "v42")) (Con (SOME (Short "Bin")) ((Var (Short "v40")) (Var (Short "v39")) (Var (Short "v38")) (Var (Short "v37")) (Var (Short "v36")))) (Var (Short "v32")))) (Var (Short "v31")))) (Con (SOME (Short "Bin")) ((App OpnPlus ((App OpnPlus ((Lit 1) (Var (Short "v40")))) (Var (Short "v35")))) (Var (Short "v29")) (Var (Short "v28")) (Con (SOME (Short "Bin")) ((App OpnPlus ((App OpnPlus ((Lit 1) (Var (Short "v40")))) (App Opapp ((Var (Short "size")) (Var (Short "v27")))))) (Var (Short "v41")) (Var (Short "v42")) (Con (SOME (Short "Bin")) ((Var (Short "v40")) (Var (Short "v39")) (Var (Short "v38")) (Var (Short "v37")) (Var (Short "v36")))) (Var (Short "v27")))) (Con (SOME (Short "Bin")) ((App OpnPlus ((App OpnPlus ((Lit 1) (Var (Short "v25")))) (App Opapp ((Var (Short "size")) (Var (Short "v26")))))) (Var (Short "v34")) (Var (Short "v33")) (Var (Short "v26")) (Var (Short "v31"))))))))))) (Con (SOME (Short "Bin")) ((App OpnPlus ((App OpnPlus ((Lit 1) (Var (Short "v40")))) (Var (Short "v35")))) (Var (Short "v41")) (Var (Short "v42")) (Con (SOME (Short "Bin")) ((Var (Short "v40")) (Var (Short "v39")) (Var (Short "v38")) (Var (Short "v37")) (Var (Short "v36")))) (Con (SOME (Short "Bin")) ((Var (Short "v35")) (Var (Short "v34")) (Var (Short "v33")) (Var (Short "v32")) (Var (Short "v31")))))))))))))))) (Dletrec (unk unk) (("deletefindmax" "v14" Mat (Var (Short "v14")) (((Pcon (SOME (Short "Tip")) nil) Con NONE ((Raise (Con (SOME (Short "Bind")) nil)) (Con (SOME (Short "Tip")) nil))) ((Pcon (SOME (Short "Bin")) ("v13" "v12" "v11" "v10" "v9")) Mat (Var (Short "v9")) (((Pcon (SOME (Short "Tip")) nil) Con NONE ((Con NONE ((Var (Short "v12")) (Var (Short "v11")))) (Var (Short "v10")))) ((Pcon (SOME (Short "Bin")) ("v8" "v7" "v6" "v5" "v4")) Let (SOME "v3") (App Opapp ((Var (Short "deletefindmax")) (Con (SOME (Short "Bin")) ((Var (Short "v8")) (Var (Short "v7")) (Var (Short "v6")) (Var (Short "v5")) (Var (Short "v4")))))) (Mat (Var (Short "v3")) (((Pcon NONE ("v2" "v1")) Con NONE ((Var (Short "v2")) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "balancel")) (Var (Short "v12")))) (Var (Short "v11")))) (Var (Short "v10")))) (Var (Short "v1"))))))))))))))) (Dletrec (unk unk) (("deletefindmin" "v14" Mat (Var (Short "v14")) (((Pcon (SOME (Short "Tip")) nil) Con NONE ((Raise (Con (SOME (Short "Bind")) nil)) (Con (SOME (Short "Tip")) nil))) ((Pcon (SOME (Short "Bin")) ("v13" "v12" "v11" "v10" "v9")) Mat (Var (Short "v10")) (((Pcon (SOME (Short "Tip")) nil) Con NONE ((Con NONE ((Var (Short "v12")) (Var (Short "v11")))) (Var (Short "v9")))) ((Pcon (SOME (Short "Bin")) ("v8" "v7" "v6" "v5" "v4")) Let (SOME "v3") (App Opapp ((Var (Short "deletefindmin")) (Con (SOME (Short "Bin")) ((Var (Short "v8")) (Var (Short "v7")) (Var (Short "v6")) (Var (Short "v5")) (Var (Short "v4")))))) (Mat (Var (Short "v3")) (((Pcon NONE ("v2" "v1")) Con NONE ((Var (Short "v2")) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "balancer")) (Var (Short "v12")))) (Var (Short "v11")))) (Var (Short "v1")))) (Var (Short "v9"))))))))))))))) (Dlet (unk unk) "glue" (Fun "v23" (Fun "v24" (Mat (Var (Short "v23")) (((Pcon (SOME (Short "Tip")) nil) Var (Short "v24")) ((Pcon (SOME (Short "Bin")) ("v22" "v21" "v20" "v19" "v18")) Mat (Var (Short "v24")) (((Pcon (SOME (Short "Tip")) nil) Con (SOME (Short "Bin")) ((Var (Short "v22")) (Var (Short "v21")) (Var (Short "v20")) (Var (Short "v19")) (Var (Short "v18")))) ((Pcon (SOME (Short "Bin")) ("v17" "v16" "v15" "v14" "v13")) If (App OpbGt ((App Opapp ((Var (Short "size")) (Con (SOME (Short "Bin")) ((Var (Short "v22")) (Var (Short "v21")) (Var (Short "v20")) (Var (Short "v19")) (Var (Short "v18")))))) (App Opapp ((Var (Short "size")) (Con (SOME (Short "Bin")) ((Var (Short "v17")) (Var (Short "v16")) (Var (Short "v15")) (Var (Short "v14")) (Var (Short "v13")))))))) (Let (SOME "v6") (App Opapp ((Var (Short "deletefindmax")) (Con (SOME (Short "Bin")) ((Var (Short "v22")) (Var (Short "v21")) (Var (Short "v20")) (Var (Short "v19")) (Var (Short "v18")))))) (Mat (Var (Short "v6")) (((Pcon NONE ("v5" "v4")) App Opapp ((Mat (Var (Short "v5")) (((Pcon NONE ("v3" "v2")) Fun "v1" (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "balancer")) (Var (Short "v3")))) (Var (Short "v2")))) (Var (Short "v1")))) (Con (SOME (Short "Bin")) ((Var (Short "v17")) (Var (Short "v16")) (Var (Short "v15")) (Var (Short "v14")) (Var (Short "v13"))))))))) (Var (Short "v4"))))))) (Let (SOME "v12") (App Opapp ((Var (Short "deletefindmin")) (Con (SOME (Short "Bin")) ((Var (Short "v17")) (Var (Short "v16")) (Var (Short "v15")) (Var (Short "v14")) (Var (Short "v13")))))) (Mat (Var (Short "v12")) (((Pcon NONE ("v11" "v10")) App Opapp ((Mat (Var (Short "v11")) (((Pcon NONE ("v9" "v8")) Fun "v7" (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "balancel")) (Var (Short "v9")))) (Var (Short "v8")))) (Con (SOME (Short "Bin")) ((Var (Short "v22")) (Var (Short "v21")) (Var (Short "v20")) (Var (Short "v19")) (Var (Short "v18")))))) (Var (Short "v7"))))))) (Var (Short "v10"))))))))))))))) (Dletrec (unk unk) (("trim_help_greater" "v6" Fun "v7" (Fun "v8" (Mat (Var (Short "v8")) (((Pcon (SOME (Short "Tip")) nil) Con (SOME (Short "Tip")) nil) ((Pcon (SOME (Short "Bin")) ("v5" "v4" "v3" "v2" "v1")) If (Log Or (App Equality ((App Opapp ((App Opapp ((Var (Short "v6")) (Var (Short "v4")))) (Var (Short "v7")))) (Con (SOME (Short "Less")) nil))) (App Equality ((App Opapp ((App Opapp ((Var (Short "v6")) (Var (Short "v4")))) (Var (Short "v7")))) (Con (SOME (Short "Equal")) nil)))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "trim_help_greater")) (Var (Short "v6")))) (Var (Short "v7")))) (Var (Short "v1")))) (Con (SOME (Short "Bin")) ((Var (Short "v5")) (Var (Short "v4")) (Var (Short "v3")) (Var (Short "v2")) (Var (Short "v1"))))))))))) (Dletrec (unk unk) (("trim_help_lesser" "v6" Fun "v7" (Fun "v8" (Mat (Var (Short "v8")) (((Pcon (SOME (Short "Tip")) nil) Con (SOME (Short "Tip")) nil) ((Pcon (SOME (Short "Bin")) ("v5" "v4" "v3" "v2" "v1")) If (Log Or (App Equality ((App Opapp ((App Opapp ((Var (Short "v6")) (Var (Short "v4")))) (Var (Short "v7")))) (Con (SOME (Short "Greater")) nil))) (App Equality ((App Opapp ((App Opapp ((Var (Short "v6")) (Var (Short "v4")))) (Var (Short "v7")))) (Con (SOME (Short "Equal")) nil)))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "trim_help_lesser")) (Var (Short "v6")))) (Var (Short "v7")))) (Var (Short "v2")))) (Con (SOME (Short "Bin")) ((Var (Short "v5")) (Var (Short "v4")) (Var (Short "v3")) (Var (Short "v2")) (Var (Short "v1"))))))))))) (Dletrec (unk unk) (("trim_help_middle" "v10" Fun "v8" (Fun "v11" (Fun "v9" (Mat (Con NONE ((Var (Short "v8")) (Var (Short "v9")))) (((Pcon NONE ("v7" "v6")) Mat (Var (Short "v6")) (((Pcon (SOME (Short "Tip")) nil) Con (SOME (Short "Tip")) nil) ((Pcon (SOME (Short "Bin")) ("v5" "v4" "v3" "v2" "v1")) If (Log Or (App Equality ((App Opapp ((App Opapp ((Var (Short "v10")) (Var (Short "v4")))) (Var (Short "v7")))) (Con (SOME (Short "Less")) nil))) (App Equality ((App Opapp ((App Opapp ((Var (Short "v10")) (Var (Short "v4")))) (Var (Short "v7")))) (Con (SOME (Short "Equal")) nil)))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "trim_help_middle")) (Var (Short "v10")))) (Var (Short "v7")))) (Var (Short "v11")))) (Var (Short "v1")))) (If (Log Or (App Equality ((App Opapp ((App Opapp ((Var (Short "v10")) (Var (Short "v4")))) (Var (Short "v11")))) (Con (SOME (Short "Greater")) nil))) (App Equality ((App Opapp ((App Opapp ((Var (Short "v10")) (Var (Short "v4")))) (Var (Short "v11")))) (Con (SOME (Short "Equal")) nil)))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "trim_help_middle")) (Var (Short "v10")))) (Var (Short "v7")))) (Var (Short "v11")))) (Var (Short "v2")))) (Con (SOME (Short "Bin")) ((Var (Short "v5")) (Var (Short "v4")) (Var (Short "v3")) (Var (Short "v2")) (Var (Short "v1"))))))))))))))) (Dlet (unk unk) "trim" (Fun "v4" (Fun "v5" (Fun "v6" (Fun "v7" (Mat (Var (Short "v5")) (((Pcon (SOME (Short "None")) nil) Mat (Var (Short "v6")) (((Pcon (SOME (Short "None")) nil) Var (Short "v7")) ((Pcon (SOME (Short "Some")) ("v1")) App Opapp ((App Opapp ((App Opapp ((Var (Short "trim_help_lesser")) (Var (Short "v4")))) (Var (Short "v1")))) (Var (Short "v7")))))) ((Pcon (SOME (Short "Some")) ("v3")) Mat (Var (Short "v6")) (((Pcon (SOME (Short "None")) nil) App Opapp ((App Opapp ((App Opapp ((Var (Short "trim_help_greater")) (Var (Short "v4")))) (Var (Short "v3")))) (Var (Short "v7")))) ((Pcon (SOME (Short "Some")) ("v2")) App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "trim_help_middle")) (Var (Short "v4")))) (Var (Short "v3")))) (Var (Short "v2")))) (Var (Short "v7"))))))))))))) (Dletrec (unk unk) (("insertmin" "v6" Fun "v8" (Fun "v7" (Mat (Var (Short "v7")) (((Pcon (SOME (Short "Tip")) nil) App Opapp ((App Opapp ((Var (Short "singleton")) (Var (Short "v6")))) (Var (Short "v8")))) ((Pcon (SOME (Short "Bin")) ("v5" "v4" "v3" "v2" "v1")) App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "balancel")) (Var (Short "v4")))) (Var (Short "v3")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "insertmin")) (Var (Short "v6")))) (Var (Short "v8")))) (Var (Short "v2")))))) (Var (Short "v1")))))))))) (Dletrec (unk unk) (("insertmax" "v6" Fun "v8" (Fun "v7" (Mat (Var (Short "v7")) (((Pcon (SOME (Short "Tip")) nil) App Opapp ((App Opapp ((Var (Short "singleton")) (Var (Short "v6")))) (Var (Short "v8")))) ((Pcon (SOME (Short "Bin")) ("v5" "v4" "v3" "v2" "v1")) App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "balancer")) (Var (Short "v4")))) (Var (Short "v3")))) (Var (Short "v2")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "insertmax")) (Var (Short "v6")))) (Var (Short "v8")))) (Var (Short "v1")))))))))))) (Dlet (unk unk) "bin" (Fun "v1" (Fun "v4" (Fun "v2" (Fun "v3" (Con (SOME (Short "Bin")) ((App OpnPlus ((App OpnPlus ((App Opapp ((Var (Short "size")) (Var (Short "v2")))) (App Opapp ((Var (Short "size")) (Var (Short "v3")))))) (Lit 1))) (Var (Short "v1")) (Var (Short "v4")) (Var (Short "v2")) (Var (Short "v3"))))))))) (Dletrec (unk unk) (("link" "v11" Fun "v12" (Fun "v13" (Fun "v14" (Mat (Var (Short "v13")) (((Pcon (SOME (Short "Tip")) nil) App Opapp ((App Opapp ((App Opapp ((Var (Short "insertmin")) (Var (Short "v11")))) (Var (Short "v12")))) (Var (Short "v14")))) ((Pcon (SOME (Short "Bin")) ("v10" "v9" "v8" "v7" "v6")) Mat (Var (Short "v14")) (((Pcon (SOME (Short "Tip")) nil) App Opapp ((App Opapp ((App Opapp ((Var (Short "insertmax")) (Var (Short "v11")))) (Var (Short "v12")))) (Con (SOME (Short "Bin")) ((Var (Short "v10")) (Var (Short "v9")) (Var (Short "v8")) (Var (Short "v7")) (Var (Short "v6")))))) ((Pcon (SOME (Short "Bin")) ("v5" "v4" "v3" "v2" "v1")) If (App OpbLt ((App OpnTimes ((Var (Short "delta")) (Var (Short "v10")))) (Var (Short "v5")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "balancel")) (Var (Short "v4")))) (Var (Short "v3")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "link")) (Var (Short "v11")))) (Var (Short "v12")))) (Con (SOME (Short "Bin")) ((Var (Short "v10")) (Var (Short "v9")) (Var (Short "v8")) (Var (Short "v7")) (Var (Short "v6")))))) (Var (Short "v2")))))) (Var (Short "v1")))) (If (App OpbLt ((App OpnTimes ((Var (Short "delta")) (Var (Short "v5")))) (Var (Short "v10")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "balancer")) (Var (Short "v9")))) (Var (Short "v8")))) (Var (Short "v7")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "link")) (Var (Short "v11")))) (Var (Short "v12")))) (Var (Short "v6")))) (Con (SOME (Short "Bin")) ((Var (Short "v5")) (Var (Short "v4")) (Var (Short "v3")) (Var (Short "v2")) (Var (Short "v1")))))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "bin")) (Var (Short "v11")))) (Var (Short "v12")))) (Con (SOME (Short "Bin")) ((Var (Short "v10")) (Var (Short "v9")) (Var (Short "v8")) (Var (Short "v7")) (Var (Short "v6")))))) (Con (SOME (Short "Bin")) ((Var (Short "v5")) (Var (Short "v4")) (Var (Short "v3")) (Var (Short "v2")) (Var (Short "v1"))))))))))))))))) (Dletrec (unk unk) (("link2" "v11" Fun "v12" (Mat (Var (Short "v12")) (((Pcon (SOME (Short "Tip")) nil) Var (Short "v11")) ((Pcon (SOME (Short "Bin")) ("v10" "v9" "v8" "v7" "v6")) Mat (Var (Short "v11")) (((Pcon (SOME (Short "Tip")) nil) Con (SOME (Short "Bin")) ((Var (Short "v10")) (Var (Short "v9")) (Var (Short "v8")) (Var (Short "v7")) (Var (Short "v6")))) ((Pcon (SOME (Short "Bin")) ("v5" "v4" "v3" "v2" "v1")) If (App OpbLt ((App OpnTimes ((Var (Short "delta")) (Var (Short "v5")))) (Var (Short "v10")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "balancel")) (Var (Short "v9")))) (Var (Short "v8")))) (App Opapp ((App Opapp ((Var (Short "link2")) (Con (SOME (Short "Bin")) ((Var (Short "v5")) (Var (Short "v4")) (Var (Short "v3")) (Var (Short "v2")) (Var (Short "v1")))))) (Var (Short "v7")))))) (Var (Short "v6")))) (If (App OpbLt ((App OpnTimes ((Var (Short "delta")) (Var (Short "v10")))) (Var (Short "v5")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "balancer")) (Var (Short "v4")))) (Var (Short "v3")))) (Var (Short "v2")))) (App Opapp ((App Opapp ((Var (Short "link2")) (Var (Short "v1")))) (Con (SOME (Short "Bin")) ((Var (Short "v10")) (Var (Short "v9")) (Var (Short "v8")) (Var (Short "v7")) (Var (Short "v6")))))))) (App Opapp ((App Opapp ((Var (Short "glue")) (Con (SOME (Short "Bin")) ((Var (Short "v5")) (Var (Short "v4")) (Var (Short "v3")) (Var (Short "v2")) (Var (Short "v1")))))) (Con (SOME (Short "Bin")) ((Var (Short "v10")) (Var (Short "v9")) (Var (Short "v8")) (Var (Short "v7")) (Var (Short "v6"))))))))))))))) (Dletrec (unk unk) (("filterlt_help" "v7" Fun "v6" (Fun "v8" (Mat (Var (Short "v8")) (((Pcon (SOME (Short "Tip")) nil) Con (SOME (Short "Tip")) nil) ((Pcon (SOME (Short "Bin")) ("v5" "v4" "v3" "v2" "v1")) Mat (App Opapp ((App Opapp ((Var (Short "v7")) (Var (Short "v4")))) (Var (Short "v6")))) (((Pcon (SOME (Short "Less")) nil) App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "link")) (Var (Short "v4")))) (Var (Short "v3")))) (Var (Short "v2")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "filterlt_help")) (Var (Short "v7")))) (Var (Short "v6")))) (Var (Short "v1")))))) ((Pcon (SOME (Short "Equal")) nil) Var (Short "v2")) ((Pcon (SOME (Short "Greater")) nil) App Opapp ((App Opapp ((App Opapp ((Var (Short "filterlt_help")) (Var (Short "v7")))) (Var (Short "v6")))) (Var (Short "v2")))))))))))) (Dlet (unk unk) "filterlt" (Fun "v2" (Fun "v3" (Fun "v4" (Mat (Var (Short "v3")) (((Pcon (SOME (Short "None")) nil) Var (Short "v4")) ((Pcon (SOME (Short "Some")) ("v1")) App Opapp ((App Opapp ((App Opapp ((Var (Short "filterlt_help")) (Var (Short "v2")))) (Var (Short "v1")))) (Var (Short "v4")))))))))) (Dletrec (unk unk) (("filtergt_help" "v7" Fun "v6" (Fun "v8" (Mat (Var (Short "v8")) (((Pcon (SOME (Short "Tip")) nil) Con (SOME (Short "Tip")) nil) ((Pcon (SOME (Short "Bin")) ("v5" "v4" "v3" "v2" "v1")) Mat (App Opapp ((App Opapp ((Var (Short "v7")) (Var (Short "v6")))) (Var (Short "v4")))) (((Pcon (SOME (Short "Less")) nil) App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "link")) (Var (Short "v4")))) (Var (Short "v3")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "filtergt_help")) (Var (Short "v7")))) (Var (Short "v6")))) (Var (Short "v2")))))) (Var (Short "v1")))) ((Pcon (SOME (Short "Equal")) nil) Var (Short "v1")) ((Pcon (SOME (Short "Greater")) nil) App Opapp ((App Opapp ((App Opapp ((Var (Short "filtergt_help")) (Var (Short "v7")))) (Var (Short "v6")))) (Var (Short "v1")))))))))))) (Dlet (unk unk) "filtergt" (Fun "v2" (Fun "v3" (Fun "v4" (Mat (Var (Short "v3")) (((Pcon (SOME (Short "None")) nil) Var (Short "v4")) ((Pcon (SOME (Short "Some")) ("v1")) App Opapp ((App Opapp ((App Opapp ((Var (Short "filtergt_help")) (Var (Short "v2")))) (Var (Short "v1")))) (Var (Short "v4")))))))))) (Dletrec (unk unk) (("insertr" "v6" Fun "v7" (Fun "v9" (Fun "v8" (Mat (Var (Short "v8")) (((Pcon (SOME (Short "Tip")) nil) App Opapp ((App Opapp ((Var (Short "singleton")) (Var (Short "v7")))) (Var (Short "v9")))) ((Pcon (SOME (Short "Bin")) ("v5" "v4" "v3" "v2" "v1")) Mat (App Opapp ((App Opapp ((Var (Short "v6")) (Var (Short "v7")))) (Var (Short "v4")))) (((Pcon (SOME (Short "Less")) nil) App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "balancel")) (Var (Short "v4")))) (Var (Short "v3")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "insertr")) (Var (Short "v6")))) (Var (Short "v7")))) (Var (Short "v9")))) (Var (Short "v2")))))) (Var (Short "v1")))) ((Pcon (SOME (Short "Equal")) nil) Con (SOME (Short "Bin")) ((Var (Short "v5")) (Var (Short "v4")) (Var (Short "v3")) (Var (Short "v2")) (Var (Short "v1")))) ((Pcon (SOME (Short "Greater")) nil) App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "balancer")) (Var (Short "v4")))) (Var (Short "v3")))) (Var (Short "v2")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "insertr")) (Var (Short "v6")))) (Var (Short "v7")))) (Var (Short "v9")))) (Var (Short "v1"))))))))))))))) (Dletrec (unk unk) (("hedgeunion" "v21" Fun "v22" (Fun "v23" (Fun "v24" (Fun "v25" (Mat (Var (Short "v25")) (((Pcon (SOME (Short "Tip")) nil) Var (Short "v24")) ((Pcon (SOME (Short "Bin")) ("v20" "v19" "v18" "v17" "v16")) Mat (Var (Short "v24")) (((Pcon (SOME (Short "Tip")) nil) App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "link")) (Var (Short "v19")))) (Var (Short "v18")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "filtergt")) (Var (Short "v21")))) (Var (Short "v22")))) (Var (Short "v17")))))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "filterlt")) (Var (Short "v21")))) (Var (Short "v23")))) (Var (Short "v16")))))) ((Pcon (SOME (Short "Bin")) ("v15" "v14" "v13" "v12" "v11")) Mat (Var (Short "v17")) (((Pcon (SOME (Short "Tip")) nil) Mat (Var (Short "v16")) (((Pcon (SOME (Short "Tip")) nil) App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "insertr")) (Var (Short "v21")))) (Var (Short "v19")))) (Var (Short "v18")))) (Con (SOME (Short "Bin")) ((Var (Short "v15")) (Var (Short "v14")) (Var (Short "v13")) (Var (Short "v12")) (Var (Short "v11")))))) ((Pcon (SOME (Short "Bin")) ("v5" "v4" "v3" "v2" "v1")) App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "link")) (Var (Short "v14")))) (Var (Short "v13")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "hedgeunion")) (Var (Short "v21")))) (Var (Short "v22")))) (Con (SOME (Short "Some")) ((Var (Short "v14")))))) (Var (Short "v12")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "trim")) (Var (Short "v21")))) (Var (Short "v22")))) (Con (SOME (Short "Some")) ((Var (Short "v14")))))) (Con (SOME (Short "Bin")) ((Var (Short "v20")) (Var (Short "v19")) (Var (Short "v18")) (Con (SOME (Short "Tip")) nil) (Con (SOME (Short "Bin")) ((Var (Short "v5")) (Var (Short "v4")) (Var (Short "v3")) (Var (Short "v2")) (Var (Short "v1")))))))))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "hedgeunion")) (Var (Short "v21")))) (Con (SOME (Short "Some")) ((Var (Short "v14")))))) (Var (Short "v23")))) (Var (Short "v11")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "trim")) (Var (Short "v21")))) (Con (SOME (Short "Some")) ((Var (Short "v14")))))) (Var (Short "v23")))) (Con (SOME (Short "Bin")) ((Var (Short "v20")) (Var (Short "v19")) (Var (Short "v18")) (Con (SOME (Short "Tip")) nil) (Con (SOME (Short "Bin")) ((Var (Short "v5")) (Var (Short "v4")) (Var (Short "v3")) (Var (Short "v2")) (Var (Short "v1")))))))))))))) ((Pcon (SOME (Short "Bin")) ("v10" "v9" "v8" "v7" "v6")) App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "link")) (Var (Short "v14")))) (Var (Short "v13")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "hedgeunion")) (Var (Short "v21")))) (Var (Short "v22")))) (Con (SOME (Short "Some")) ((Var (Short "v14")))))) (Var (Short "v12")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "trim")) (Var (Short "v21")))) (Var (Short "v22")))) (Con (SOME (Short "Some")) ((Var (Short "v14")))))) (Con (SOME (Short "Bin")) ((Var (Short "v20")) (Var (Short "v19")) (Var (Short "v18")) (Con (SOME (Short "Bin")) ((Var (Short "v10")) (Var (Short "v9")) (Var (Short "v8")) (Var (Short "v7")) (Var (Short "v6")))) (Var (Short "v16")))))))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "hedgeunion")) (Var (Short "v21")))) (Con (SOME (Short "Some")) ((Var (Short "v14")))))) (Var (Short "v23")))) (Var (Short "v11")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "trim")) (Var (Short "v21")))) (Con (SOME (Short "Some")) ((Var (Short "v14")))))) (Var (Short "v23")))) (Con (SOME (Short "Bin")) ((Var (Short "v20")) (Var (Short "v19")) (Var (Short "v18")) (Con (SOME (Short "Bin")) ((Var (Short "v10")) (Var (Short "v9")) (Var (Short "v8")) (Var (Short "v7")) (Var (Short "v6")))) (Var (Short "v16")))))))))))))))))))))) (Dletrec (unk unk) (("lookup" "v6" Fun "v7" (Fun "v8" (Mat (Var (Short "v8")) (((Pcon (SOME (Short "Tip")) nil) Con (SOME (Short "None")) nil) ((Pcon (SOME (Short "Bin")) ("v5" "v4" "v3" "v2" "v1")) Mat (App Opapp ((App Opapp ((Var (Short "v6")) (Var (Short "v7")))) (Var (Short "v4")))) (((Pcon (SOME (Short "Less")) nil) App Opapp ((App Opapp ((App Opapp ((Var (Short "lookup")) (Var (Short "v6")))) (Var (Short "v7")))) (Var (Short "v2")))) ((Pcon (SOME (Short "Equal")) nil) Con (SOME (Short "Some")) ((Var (Short "v3")))) ((Pcon (SOME (Short "Greater")) nil) App Opapp ((App Opapp ((App Opapp ((Var (Short "lookup")) (Var (Short "v6")))) (Var (Short "v7")))) (Var (Short "v1")))))))))))) (Dletrec (unk unk) (("hedgeunionwithkey" "v21" Fun "v22" (Fun "v23" (Fun "v24" (Fun "v25" (Fun "v26" (Mat (Con NONE ((Var (Short "v22")) (Con NONE ((Var (Short "v23")) (Con NONE ((Var (Short "v24")) (Con NONE ((Var (Short "v25")) (Var (Short "v26")))))))))) (((Pcon NONE ("v20" "v19")) Mat (Var (Short "v19")) (((Pcon NONE ("v18" "v17")) Mat (Var (Short "v17")) (((Pcon NONE ("v16" "v15")) Mat (Var (Short "v15")) (((Pcon NONE ("v14" "v13")) Mat (Var (Short "v13")) (((Pcon (SOME (Short "Tip")) nil) Var (Short "v14")) ((Pcon (SOME (Short "Bin")) ("v12" "v11" "v10" "v9" "v8")) Mat (Var (Short "v14")) (((Pcon (SOME (Short "Tip")) nil) App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "link")) (Var (Short "v11")))) (Var (Short "v10")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "filtergt")) (Var (Short "v21")))) (Var (Short "v18")))) (Var (Short "v9")))))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "filterlt")) (Var (Short "v21")))) (Var (Short "v16")))) (Var (Short "v8")))))) ((Pcon (SOME (Short "Bin")) ("v7" "v6" "v5" "v4" "v3")) Let (SOME "v1") (Mat (App Opapp ((App Opapp ((App Opapp ((Var (Short "lookup")) (Var (Short "v21")))) (Var (Short "v6")))) (Con (SOME (Short "Bin")) ((Var (Short "v12")) (Var (Short "v11")) (Var (Short "v10")) (Var (Short "v9")) (Var (Short "v8")))))) (((Pcon (SOME (Short "None")) nil) Var (Short "v5")) ((Pcon (SOME (Short "Some")) ("v2")) App Opapp ((App Opapp ((App Opapp ((Var (Short "v20")) (Var (Short "v6")))) (Var (Short "v5")))) (Var (Short "v2")))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "link")) (Var (Short "v6")))) (Var (Short "v1")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "hedgeunionwithkey")) (Var (Short "v21")))) (Var (Short "v20")))) (Var (Short "v18")))) (Con (SOME (Short "Some")) ((Var (Short "v6")))))) (Var (Short "v4")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "trim")) (Var (Short "v21")))) (Var (Short "v18")))) (Con (SOME (Short "Some")) ((Var (Short "v6")))))) (Con (SOME (Short "Bin")) ((Var (Short "v12")) (Var (Short "v11")) (Var (Short "v10")) (Var (Short "v9")) (Var (Short "v8")))))))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "hedgeunionwithkey")) (Var (Short "v21")))) (Var (Short "v20")))) (Con (SOME (Short "Some")) ((Var (Short "v6")))))) (Var (Short "v16")))) (Var (Short "v3")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "trim")) (Var (Short "v21")))) (Con (SOME (Short "Some")) ((Var (Short "v6")))))) (Var (Short "v16")))) (Con (SOME (Short "Bin")) ((Var (Short "v12")) (Var (Short "v11")) (Var (Short "v10")) (Var (Short "v9")) (Var (Short "v8")))))))))))))))))))))))))))))) (Dletrec (unk unk) (("splitlookup" "v18" Fun "v19" (Fun "v20" (Mat (Var (Short "v20")) (((Pcon (SOME (Short "Tip")) nil) Con NONE ((Con (SOME (Short "Tip")) nil) (Con NONE ((Con (SOME (Short "None")) nil) (Con (SOME (Short "Tip")) nil))))) ((Pcon (SOME (Short "Bin")) ("v17" "v16" "v15" "v14" "v13")) Mat (App Opapp ((App Opapp ((Var (Short "v18")) (Var (Short "v19")))) (Var (Short "v16")))) (((Pcon (SOME (Short "Less")) nil) Let (SOME "v6") (App Opapp ((App Opapp ((App Opapp ((Var (Short "splitlookup")) (Var (Short "v18")))) (Var (Short "v19")))) (Var (Short "v14")))) (Mat (Var (Short "v6")) (((Pcon NONE ("v5" "v4")) Mat (Var (Short "v4")) (((Pcon NONE ("v3" "v2")) Let (SOME "v1") (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "link")) (Var (Short "v16")))) (Var (Short "v15")))) (Var (Short "v2")))) (Var (Short "v13")))) (Con NONE ((Var (Short "v5")) (Con NONE ((Var (Short "v3")) (Var (Short "v1")))))))))))) ((Pcon (SOME (Short "Equal")) nil) Con NONE ((Var (Short "v14")) (Con NONE ((Con (SOME (Short "Some")) ((Var (Short "v15")))) (Var (Short "v13")))))) ((Pcon (SOME (Short "Greater")) nil) Let (SOME "v12") (App Opapp ((App Opapp ((App Opapp ((Var (Short "splitlookup")) (Var (Short "v18")))) (Var (Short "v19")))) (Var (Short "v13")))) (Mat (Var (Short "v12")) (((Pcon NONE ("v11" "v10")) Mat (Var (Short "v10")) (((Pcon NONE ("v9" "v8")) Let (SOME "v7") (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "link")) (Var (Short "v16")))) (Var (Short "v15")))) (Var (Short "v14")))) (Var (Short "v11")))) (Con NONE ((Var (Short "v7")) (Con NONE ((Var (Short "v9")) (Var (Short "v8")))))))))))))))))))) (Dletrec (unk unk) (("submap'" "v18" Fun "v19" (Fun "v20" (Fun "v21" (Mat (Con NONE ((Var (Short "v20")) (Var (Short "v21")))) (((Pcon NONE ("v17" "v16")) Mat (Var (Short "v17")) (((Pcon (SOME (Short "Tip")) nil) App OpbLeq ((Lit 0) (Lit 0))) ((Pcon (SOME (Short "Bin")) ("v15" "v14" "v13" "v12" "v11")) Mat (Var (Short "v16")) (((Pcon (SOME (Short "Tip")) nil) App OpbLt ((Lit 0) (Lit 0))) ((Pcon (SOME (Short "Bin")) ("v10" "v9" "v8" "v7" "v6")) Mat (App Opapp ((App Opapp ((App Opapp ((Var (Short "splitlookup")) (Var (Short "v18")))) (Var (Short "v14")))) (Con (SOME (Short "Bin")) ((Var (Short "v10")) (Var (Short "v9")) (Var (Short "v8")) (Var (Short "v7")) (Var (Short "v6")))))) (((Pcon NONE ("v5" "v4")) Mat (Var (Short "v4")) (((Pcon NONE ("v3" "v2")) Mat (Var (Short "v3")) (((Pcon (SOME (Short "None")) nil) App OpbLt ((Lit 0) (Lit 0))) ((Pcon (SOME (Short "Some")) ("v1")) Log And (Log And (App Opapp ((App Opapp ((Var (Short "v19")) (Var (Short "v13")))) (Var (Short "v1")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "submap'")) (Var (Short "v18")))) (Var (Short "v19")))) (Var (Short "v12")))) (Var (Short "v5"))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "submap'")) (Var (Short "v18")))) (Var (Short "v19")))) (Var (Short "v11")))) (Var (Short "v2")))))))))))))))))))))) (Dlet (unk unk) "null" (Fun "v6" (Mat (Var (Short "v6")) (((Pcon (SOME (Short "Tip")) nil) App OpbLeq ((Lit 0) (Lit 0))) ((Pcon (SOME (Short "Bin")) ("v5" "v4" "v3" "v2" "v1")) App OpbLt ((Lit 0) (Lit 0))))))) (Dletrec (unk unk) (("member" "v6" Fun "v7" (Fun "v8" (Mat (Var (Short "v8")) (((Pcon (SOME (Short "Tip")) nil) App OpbLt ((Lit 0) (Lit 0))) ((Pcon (SOME (Short "Bin")) ("v5" "v4" "v3" "v2" "v1")) Mat (App Opapp ((App Opapp ((Var (Short "v6")) (Var (Short "v7")))) (Var (Short "v4")))) (((Pcon (SOME (Short "Less")) nil) App Opapp ((App Opapp ((App Opapp ((Var (Short "member")) (Var (Short "v6")))) (Var (Short "v7")))) (Var (Short "v2")))) ((Pcon (SOME (Short "Equal")) nil) App OpbLeq ((Lit 0) (Lit 0))) ((Pcon (SOME (Short "Greater")) nil) App Opapp ((App Opapp ((App Opapp ((Var (Short "member")) (Var (Short "v6")))) (Var (Short "v7")))) (Var (Short "v1")))))))))))) (Dlet (unk unk) "empty" (Con (SOME (Short "Tip")) nil)) (Dletrec (unk unk) (("insert" "v6" Fun "v7" (Fun "v9" (Fun "v8" (Mat (Var (Short "v8")) (((Pcon (SOME (Short "Tip")) nil) App Opapp ((App Opapp ((Var (Short "singleton")) (Var (Short "v7")))) (Var (Short "v9")))) ((Pcon (SOME (Short "Bin")) ("v5" "v4" "v3" "v2" "v1")) Mat (App Opapp ((App Opapp ((Var (Short "v6")) (Var (Short "v7")))) (Var (Short "v4")))) (((Pcon (SOME (Short "Less")) nil) App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "balancel")) (Var (Short "v4")))) (Var (Short "v3")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "insert")) (Var (Short "v6")))) (Var (Short "v7")))) (Var (Short "v9")))) (Var (Short "v2")))))) (Var (Short "v1")))) ((Pcon (SOME (Short "Equal")) nil) Con (SOME (Short "Bin")) ((Var (Short "v5")) (Var (Short "v7")) (Var (Short "v9")) (Var (Short "v2")) (Var (Short "v1")))) ((Pcon (SOME (Short "Greater")) nil) App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "balancer")) (Var (Short "v4")))) (Var (Short "v3")))) (Var (Short "v2")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "insert")) (Var (Short "v6")))) (Var (Short "v7")))) (Var (Short "v9")))) (Var (Short "v1"))))))))))))))) (Dletrec (unk unk) (("delete" "v6" Fun "v7" (Fun "v8" (Mat (Var (Short "v8")) (((Pcon (SOME (Short "Tip")) nil) Con (SOME (Short "Tip")) nil) ((Pcon (SOME (Short "Bin")) ("v5" "v4" "v3" "v2" "v1")) Mat (App Opapp ((App Opapp ((Var (Short "v6")) (Var (Short "v7")))) (Var (Short "v4")))) (((Pcon (SOME (Short "Less")) nil) App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "balancer")) (Var (Short "v4")))) (Var (Short "v3")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "delete")) (Var (Short "v6")))) (Var (Short "v7")))) (Var (Short "v2")))))) (Var (Short "v1")))) ((Pcon (SOME (Short "Equal")) nil) App Opapp ((App Opapp ((Var (Short "glue")) (Var (Short "v2")))) (Var (Short "v1")))) ((Pcon (SOME (Short "Greater")) nil) App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "balancel")) (Var (Short "v4")))) (Var (Short "v3")))) (Var (Short "v2")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "delete")) (Var (Short "v6")))) (Var (Short "v7")))) (Var (Short "v1")))))))))))))) (Dlet (unk unk) "union" (Fun "v11" (Fun "v12" (Fun "v13" (Mat (Var (Short "v12")) (((Pcon (SOME (Short "Tip")) nil) Var (Short "v13")) ((Pcon (SOME (Short "Bin")) ("v10" "v9" "v8" "v7" "v6")) Mat (Var (Short "v13")) (((Pcon (SOME (Short "Tip")) nil) Con (SOME (Short "Bin")) ((Var (Short "v10")) (Var (Short "v9")) (Var (Short "v8")) (Var (Short "v7")) (Var (Short "v6")))) ((Pcon (SOME (Short "Bin")) ("v5" "v4" "v3" "v2" "v1")) App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "hedgeunion")) (Var (Short "v11")))) (Con (SOME (Short "None")) nil))) (Con (SOME (Short "None")) nil))) (Con (SOME (Short "Bin")) ((Var (Short "v10")) (Var (Short "v9")) (Var (Short "v8")) (Var (Short "v7")) (Var (Short "v6")))))) (Con (SOME (Short "Bin")) ((Var (Short "v5")) (Var (Short "v4")) (Var (Short "v3")) (Var (Short "v2")) (Var (Short "v1")))))))))))))) (Dlet (unk unk) "unionWithKey" (Fun "v15" (Fun "v16" (Fun "v17" (Fun "v18" (Mat (Con NONE ((Var (Short "v16")) (Con NONE ((Var (Short "v17")) (Var (Short "v18")))))) (((Pcon NONE ("v14" "v13")) Mat (Var (Short "v13")) (((Pcon NONE ("v12" "v11")) Mat (Var (Short "v12")) (((Pcon (SOME (Short "Tip")) nil) Var (Short "v11")) ((Pcon (SOME (Short "Bin")) ("v10" "v9" "v8" "v7" "v6")) Mat (Var (Short "v11")) (((Pcon (SOME (Short "Tip")) nil) Con (SOME (Short "Bin")) ((Var (Short "v10")) (Var (Short "v9")) (Var (Short "v8")) (Var (Short "v7")) (Var (Short "v6")))) ((Pcon (SOME (Short "Bin")) ("v5" "v4" "v3" "v2" "v1")) App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "hedgeunionwithkey")) (Var (Short "v15")))) (Var (Short "v14")))) (Con (SOME (Short "None")) nil))) (Con (SOME (Short "None")) nil))) (Con (SOME (Short "Bin")) ((Var (Short "v10")) (Var (Short "v9")) (Var (Short "v8")) (Var (Short "v7")) (Var (Short "v6")))))) (Con (SOME (Short "Bin")) ((Var (Short "v5")) (Var (Short "v4")) (Var (Short "v3")) (Var (Short "v2")) (Var (Short "v1"))))))))))))))))))) (Dlet (unk unk) "unionWith" (Fun "v4" (Fun "v5" (Fun "v6" (Fun "v7" (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "unionWithKey")) (Var (Short "v4")))) (Fun "v3" (Fun "v2" (Fun "v1" (App Opapp ((App Opapp ((Var (Short "v5")) (Var (Short "v2")))) (Var (Short "v1"))))))))) (Var (Short "v6")))) (Var (Short "v7"))))))))) (Dletrec (unk unk) (("foldrWithKey" "v6" Fun "v8" (Fun "v7" (Mat (Var (Short "v7")) (((Pcon (SOME (Short "Tip")) nil) Var (Short "v8")) ((Pcon (SOME (Short "Bin")) ("v5" "v4" "v3" "v2" "v1")) App Opapp ((App Opapp ((App Opapp ((Var (Short "foldrWithKey")) (Var (Short "v6")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "v6")) (Var (Short "v4")))) (Var (Short "v3")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "foldrWithKey")) (Var (Short "v6")))) (Var (Short "v8")))) (Var (Short "v1")))))))) (Var (Short "v2")))))))))) (Dlet (unk unk) "toAscList" (Fun "v4" (App Opapp ((App Opapp ((App Opapp ((Var (Short "foldrWithKey")) (Fun "v3" (Fun "v2" (Fun "v1" (Con (SOME (Short "::")) ((Con NONE ((Var (Short "v3")) (Var (Short "v2")))) (Var (Short "v1"))))))))) (Con (SOME (Short "[]")) nil))) (Var (Short "v4")))))) (Dlet (unk unk) "compare" (Fun "v1" (Fun "v2" (Fun "v3" (Fun "v4" (App Opapp ((App Opapp ((App Opapp ((Var (Long "List" (Short "compare"))) (App Opapp ((App Opapp ((Var (Long "Pair" (Short "compare"))) (Var (Short "v1")))) (Var (Short "v2")))))) (App Opapp ((Var (Short "toAscList")) (Var (Short "v3")))))) (App Opapp ((Var (Short "toAscList")) (Var (Short "v4"))))))))))) (Dletrec (unk unk) (("mapWithKey" "v6" Fun "v7" (Mat (Var (Short "v7")) (((Pcon (SOME (Short "Tip")) nil) Con (SOME (Short "Tip")) nil) ((Pcon (SOME (Short "Bin")) ("v5" "v4" "v3" "v2" "v1")) Con (SOME (Short "Bin")) ((Var (Short "v5")) (Var (Short "v4")) (App Opapp ((App Opapp ((Var (Short "v6")) (Var (Short "v4")))) (Var (Short "v3")))) (App Opapp ((App Opapp ((Var (Short "mapWithKey")) (Var (Short "v6")))) (Var (Short "v2")))) (App Opapp ((App Opapp ((Var (Short "mapWithKey")) (Var (Short "v6")))) (Var (Short "v1"))))))))))) (Dlet (unk unk) "map" (Fun "v3" (Fun "v4" (App Opapp ((App Opapp ((Var (Short "mapWithKey")) (Fun "v2" (Fun "v1" (App Opapp ((Var (Short "v3")) (Var (Short "v1")))))))) (Var (Short "v4"))))))) (Dlet (unk unk) "isSubmapOfBy" (Fun "v1" (Fun "v2" (Fun "v3" (Fun "v4" (Log And (App OpbLeq ((App Opapp ((Var (Short "size")) (Var (Short "v3")))) (App Opapp ((Var (Short "size")) (Var (Short "v4")))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "submap'")) (Var (Short "v1")))) (Var (Short "v2")))) (Var (Short "v3")))) (Var (Short "v4")))))))))) (Dlet (unk unk) "isSubmapOf" (Fun "v3" (Fun "v4" (Fun "v5" (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "isSubmapOfBy")) (Var (Short "v3")))) (Fun "v2" (Fun "v1" (App Equality ((Var (Short "v2")) (Var (Short "v1")))))))) (Var (Short "v4")))) (Var (Short "v5")))))))) (Dlet (unk unk) "fromList" (Fun "v5" (Fun "v6" (App Opapp ((App Opapp ((App Opapp ((Var (Long "List" (Short "foldr"))) (Fun "v4" (Mat (Var (Short "v4")) (((Pcon NONE ("v3" "v2")) Fun "v1" (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "insert")) (Var (Short "v5")))) (Var (Short "v3")))) (Var (Short "v2")))) (Var (Short "v1")))))))))) (Var (Short "empty")))) (Var (Short "v6"))))))) (Dletrec (unk unk) (("filterWithKey" "v8" Fun "v9" (Mat (Var (Short "v9")) (((Pcon (SOME (Short "Tip")) nil) Con (SOME (Short "Tip")) nil) ((Pcon (SOME (Short "Bin")) ("v7" "v6" "v5" "v4" "v3")) Let (SOME "v2") (App Opapp ((App Opapp ((Var (Short "filterWithKey")) (Var (Short "v8")))) (Var (Short "v4")))) (Let (SOME "v1") (App Opapp ((App Opapp ((Var (Short "filterWithKey")) (Var (Short "v8")))) (Var (Short "v3")))) (If (App Opapp ((App Opapp ((Var (Short "v8")) (Var (Short "v6")))) (Var (Short "v5")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "link")) (Var (Short "v6")))) (Var (Short "v5")))) (Var (Short "v2")))) (Var (Short "v1")))) (App Opapp ((App Opapp ((Var (Short "link2")) (Var (Short "v2")))) (Var (Short "v1")))))))))))) (Dlet (unk unk) "filter" (Fun "v3" (Fun "v4" (App Opapp ((App Opapp ((Var (Short "filterWithKey")) (Fun "v2" (Fun "v1" (App Opapp ((Var (Short "v3")) (Var (Short "v1")))))))) (Var (Short "v4"))))))) (Dletrec (unk unk) (("all" "v6" Fun "v7" (Mat (Var (Short "v7")) (((Pcon (SOME (Short "Tip")) nil) App OpbLeq ((Lit 0) (Lit 0))) ((Pcon (SOME (Short "Bin")) ("v5" "v4" "v3" "v2" "v1")) If (App Opapp ((App Opapp ((Var (Short "v6")) (Var (Short "v4")))) (Var (Short "v3")))) (If (App Opapp ((App Opapp ((Var (Short "all")) (Var (Short "v6")))) (Var (Short "v2")))) (If (App Opapp ((App Opapp ((Var (Short "all")) (Var (Short "v6")))) (Var (Short "v1")))) (App OpbLeq ((Lit 0) (Lit 0))) (App OpbLt ((Lit 0) (Lit 0)))) (App OpbLt ((Lit 0) (Lit 0)))) (App OpbLt ((Lit 0) (Lit 0))))))))) (Dletrec (unk unk) (("exists" "v6" Fun "v7" (Mat (Var (Short "v7")) (((Pcon (SOME (Short "Tip")) nil) App OpbLt ((Lit 0) (Lit 0))) ((Pcon (SOME (Short "Bin")) ("v5" "v4" "v3" "v2" "v1")) If (App Opapp ((App Opapp ((Var (Short "v6")) (Var (Short "v4")))) (Var (Short "v3")))) (App OpbLeq ((Lit 0) (Lit 0))) (If (App Opapp ((App Opapp ((Var (Short "exists")) (Var (Short "v6")))) (Var (Short "v2")))) (App OpbLeq ((Lit 0) (Lit 0))) (If (App Opapp ((App Opapp ((Var (Short "exists")) (Var (Short "v6")))) (Var (Short "v1")))) (App OpbLeq ((Lit 0) (Lit 0))) (App OpbLt ((Lit 0) (Lit 0)))))))))))) ((Dmod "Map" ((Dtabbrev (unk unk) ("'a" "'b") "map" (Atapp ((Atvar "'a") (Atvar "'b")) (Short "map"))) (Dlet (unk unk) "lookup" (Fun "v4" (Fun "v3" (Mat (Var (Short "v4")) (((Pcon (SOME (Short "Map")) ("v2" "v1")) App Opapp ((App Opapp ((App Opapp ((Var (Short "lookup")) (Var (Short "v2")))) (Var (Short "v3")))) (Var (Short "v1"))))))))) (Dlet (unk unk) "insert" (Fun "v5" (Fun "v3" (Fun "v4" (Mat (Var (Short "v5")) (((Pcon (SOME (Short "Map")) ("v2" "v1")) Con (SOME (Short "Map")) ((Var (Short "v2")) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "insert")) (Var (Short "v2")))) (Var (Short "v3")))) (Var (Short "v4")))) (Var (Short "v1")))))))))))) (Dlet (unk unk) "delete" (Fun "v4" (Fun "v3" (Mat (Var (Short "v4")) (((Pcon (SOME (Short "Map")) ("v2" "v1")) Con (SOME (Short "Map")) ((Var (Short "v2")) (App Opapp ((App Opapp ((App Opapp ((Var (Short "delete")) (Var (Short "v2")))) (Var (Short "v3")))) (Var (Short "v1"))))))))))) (Dlet (unk unk) "null" (Fun "v3" (Mat (Var (Short "v3")) (((Pcon (SOME (Short "Map")) ("v2" "v1")) App Opapp ((Var (Short "null")) (Var (Short "v1")))))))) (Dlet (unk unk) "size" (Fun "v3" (Mat (Var (Short "v3")) (((Pcon (SOME (Short "Map")) ("v2" "v1")) App Opapp ((Var (Short "size")) (Var (Short "v1")))))))) (Dlet (unk unk) "empty" (Fun "v1" (Con (SOME (Short "Map")) ((Var (Short "v1")) (Var (Short "empty")))))) (Dlet (unk unk) "union" (Fun "v6" (Fun "v5" (Mat (Var (Short "v6")) (((Pcon (SOME (Short "Map")) ("v4" "v3")) Mat (Var (Short "v5")) (((Pcon (SOME (Short "Map")) ("v2" "v1")) Con (SOME (Short "Map")) ((Var (Short "v4")) (App Opapp ((App Opapp ((App Opapp ((Var (Short "union")) (Var (Short "v4")))) (Var (Short "v3")))) (Var (Short "v1"))))))))))))) (Dlet (unk unk) "unionWith" (Fun "v5" (Fun "v7" (Fun "v6" (Mat (Var (Short "v7")) (((Pcon (SOME (Short "Map")) ("v4" "v3")) Mat (Var (Short "v6")) (((Pcon (SOME (Short "Map")) ("v2" "v1")) Con (SOME (Short "Map")) ((Var (Short "v4")) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "unionWith")) (Var (Short "v4")))) (Var (Short "v5")))) (Var (Short "v3")))) (Var (Short "v1")))))))))))))) (Dlet (unk unk) "unionWithKey" (Fun "v5" (Fun "v7" (Fun "v6" (Mat (Var (Short "v7")) (((Pcon (SOME (Short "Map")) ("v4" "v3")) Mat (Var (Short "v6")) (((Pcon (SOME (Short "Map")) ("v2" "v1")) Con (SOME (Short "Map")) ((Var (Short "v4")) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "unionWithKey")) (Var (Short "v4")))) (Var (Short "v5")))) (Var (Short "v3")))) (Var (Short "v1")))))))))))))) (Dlet (unk unk) "foldrWithKey" (Fun "v3" (Fun "v5" (Fun "v4" (Mat (Var (Short "v4")) (((Pcon (SOME (Short "Map")) ("v2" "v1")) App Opapp ((App Opapp ((App Opapp ((Var (Short "foldrWithKey")) (Var (Short "v3")))) (Var (Short "v5")))) (Var (Short "v1")))))))))) (Dlet (unk unk) "map" (Fun "v3" (Fun "v4" (Mat (Var (Short "v4")) (((Pcon (SOME (Short "Map")) ("v2" "v1")) Con (SOME (Short "Map")) ((Var (Short "v2")) (App Opapp ((App Opapp ((Var (Short "map")) (Var (Short "v3")))) (Var (Short "v1"))))))))))) (Dlet (unk unk) "mapWithKey" (Fun "v3" (Fun "v4" (Mat (Var (Short "v4")) (((Pcon (SOME (Short "Map")) ("v2" "v1")) Con (SOME (Short "Map")) ((Var (Short "v2")) (App Opapp ((App Opapp ((Var (Short "mapWithKey")) (Var (Short "v3")))) (Var (Short "v1"))))))))))) (Dlet (unk unk) "toAscList" (Fun "v3" (Mat (Var (Short "v3")) (((Pcon (SOME (Short "Map")) ("v2" "v1")) App Opapp ((Var (Short "toAscList")) (Var (Short "v1")))))))) (Dlet (unk unk) "fromList" (Fun "v1" (Fun "v2" (Con (SOME (Short "Map")) ((Var (Short "v1")) (App Opapp ((App Opapp ((Var (Short "fromList")) (Var (Short "v1")))) (Var (Short "v2"))))))))) (Dlet (unk unk) "isSubmapBy" (Fun "v5" (Fun "v7" (Fun "v6" (Mat (Var (Short "v7")) (((Pcon (SOME (Short "Map")) ("v4" "v3")) Mat (Var (Short "v6")) (((Pcon (SOME (Short "Map")) ("v2" "v1")) App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "isSubmapOfBy")) (Var (Short "v4")))) (Var (Short "v5")))) (Var (Short "v3")))) (Var (Short "v1")))))))))))) (Dlet (unk unk) "isSubmap" (Fun "v3" (Fun "v4" (App Opapp ((App Opapp ((App Opapp ((Var (Short "isSubmapBy")) (Fun "v2" (Fun "v1" (App Equality ((Var (Short "v2")) (Var (Short "v1")))))))) (Var (Short "v3")))) (Var (Short "v4"))))))) (Dlet (unk unk) "all" (Fun "v3" (Fun "v4" (Mat (Var (Short "v4")) (((Pcon (SOME (Short "Map")) ("v2" "v1")) App Opapp ((App Opapp ((Var (Short "all")) (Var (Short "v3")))) (Var (Short "v1"))))))))) (Dlet (unk unk) "exists" (Fun "v3" (Fun "v4" (Mat (Var (Short "v4")) (((Pcon (SOME (Short "Map")) ("v2" "v1")) App Opapp ((App Opapp ((Var (Short "exists")) (Var (Short "v3")))) (Var (Short "v1"))))))))) (Dlet (unk unk) "filterWithKey" (Fun "v3" (Fun "v4" (Mat (Var (Short "v4")) (((Pcon (SOME (Short "Map")) ("v2" "v1")) Con (SOME (Short "Map")) ((Var (Short "v2")) (App Opapp ((App Opapp ((Var (Short "filterWithKey")) (Var (Short "v3")))) (Var (Short "v1"))))))))))) (Dlet (unk unk) "filter" (Fun "v3" (Fun "v4" (Mat (Var (Short "v4")) (((Pcon (SOME (Short "Map")) ("v2" "v1")) Con (SOME (Short "Map")) ((Var (Short "v2")) (App Opapp ((App Opapp ((Var (Short "filter")) (Var (Short "v3")))) (Var (Short "v1"))))))))))))) (Dtabbrev (unk unk) ("'a" "'b") "map" (Atapp ((Atvar "'a") (Atvar "'b")) (Short "map"))))) (Dmod "Hashtable" ((Dlocal ((Dtype ((0 14) unk) ((("'k" "'v") "hashtable" ("Hashtable" (Atapp ((Atapp nil (Short "int"))) (Short "ref")) (Atapp ((Atapp ((Atapp ((Atvar "'k") (Atvar "'v")) (Long "Map" (Short "map")))) (Short "array"))) (Short "ref")) (Atfun (Atvar "'k") (Atapp nil (Short "int"))) (Atfun (Atvar "'k") (Atfun (Atvar "'k") (Atapp nil (Short "ordering"))))))))) ((Dtabbrev (unk unk) ("'a" "'b") "hashtable" (Atapp ((Atvar "'a") (Atvar "'b")) (Short "hashtable"))) (Dletrec ((0 14) (14 6)) (("delete" "ht" Fun "k" (Mat (Var (Short "ht")) (((Pcon (SOME (Short "Hashtable")) ("usedRef" "bucketsRef" "hf" (Pany))) Let (SOME "buckets") (App Opapp ((Var (Short "!")) (Var (Short "bucketsRef")))) (Let (SOME " v1") (App Opapp ((Var (Long "Array" (Short "length"))) (Var (Short "buckets")))) (Let (SOME " v0") (App Opapp ((Var (Short "hf")) (Var (Short "k")))) (Let (SOME "index") (App Opapp ((App Opapp ((Var (Short "mod")) (Var (Short " v0")))) (Var (Short " v1")))) (Let (SOME "bucket") (App Opapp ((App Opapp ((Var (Long "Array" (Short "sub"))) (Var (Short "buckets")))) (Var (Short "index")))) (Let (SOME "newBucket") (App Opapp ((App Opapp ((Var (Long "Map" (Short "delete"))) (Var (Short "bucket")))) (Var (Short "k")))) (Let NONE (App Opapp ((App Opapp ((App Opapp ((Var (Long "Array" (Short "update"))) (Var (Short "buckets")))) (Var (Short "index")))) (Var (Short "newBucket")))) (Let (SOME " v2") (App Opapp ((Var (Long "Map" (Short "null"))) (Var (Short "bucket")))) (Let (SOME " v3") (App Opapp ((Var (Short "not")) (Var (Short " v2")))) (Let (SOME " v5") (Log And (Var (Short " v3")) (App Opapp ((Var (Long "Map" (Short "null"))) (Var (Short "newBucket"))))) (Let (SOME " v9") (Log And (Var (Short " v5")) (Let (SOME " v8") (App Opapp ((Var (Short "!")) (Var (Short "usedRef")))) (App Opapp ((App Opapp ((Var (Short "<")) (Lit 0))) (Var (Short " v8")))))) (If (Var (Short " v9")) (Let (SOME " v10") (App Opapp ((Var (Short "!")) (Var (Short "usedRef")))) (Let (SOME " v11") (App Opapp ((App Opapp ((Var (Short "-")) (Var (Short " v10")))) (Lit 1))) (App Opapp ((App Opapp ((Var (Short ":=")) (Var (Short "usedRef")))) (Var (Short " v11")))))) (Con NONE nil)))))))))))))))))) (Dletrec ((0 14) (7 4)) (("lookup" "ht" Fun "k" (Mat (Var (Short "ht")) (((Pcon (SOME (Short "Hashtable")) ("usedRef" "bucketsRef" "hf" "cmp")) Let (SOME "buckets") (App Opapp ((Var (Short "!")) (Var (Short "bucketsRef")))) (Let (SOME " v1") (App Opapp ((Var (Long "Array" (Short "length"))) (Var (Short "buckets")))) (Let (SOME " v0") (App Opapp ((Var (Short "hf")) (Var (Short "k")))) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "mod")) (Var (Short " v0")))) (Var (Short " v1")))) (Let (SOME "bucket") (App Opapp ((App Opapp ((Var (Long "Array" (Short "sub"))) (Var (Short "buckets")))) (Var (Short " v2")))) (App Opapp ((App Opapp ((Var (Long "Map" (Short "lookup"))) (Var (Short "bucket")))) (Var (Short "k")))))))))))))) (Dletrec ((0 14) (2 70)) (("toAscList" "ht" Mat (Var (Short "ht")) (((Pcon (SOME (Short "Hashtable")) ((Pany) "bucketsRef" (Pany) "cmp")) Let (SOME " v1") (App Opapp ((Var (Short "!")) (Var (Short "bucketsRef")))) (Let (SOME " v0") (App Opapp ((Var (Long "Map" (Short "empty"))) (Var (Short "cmp")))) (Let (SOME " v2") (App Opapp ((App Opapp ((App Opapp ((Var (Long "Array" (Short "foldr"))) (Var (Long "Map" (Short "union"))))) (Var (Short " v0")))) (Var (Short " v1")))) (App Opapp ((Var (Long "Map" (Short "toAscList"))) (Var (Short " v2"))))))))))) (Dletrec ((0 14) (2 11)) (("size" "ht" Mat (Var (Short "ht")) (((Pcon (SOME (Short "Hashtable")) ("usedRef" "bucketsRef" "hf" "cmp")) App Opapp ((Var (Short "!")) (Var (Short "usedRef")))))))) (Dlocal ((Dletrec ((0 15) (0 67)) (("initBuckets" "n" Fun "cmp" (Let (SOME " v0") (App Opapp ((Var (Long "Map" (Short "empty"))) (Var (Short "cmp")))) (App Opapp ((App Opapp ((Var (Long "Array" (Short "array"))) (Var (Short "n")))) (Var (Short " v0"))))))))) ((Dletrec ((0 15) (6 2)) (("empty" "size" Fun "hf" (Fun "cmp" (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "<")) (Var (Short "size")))) (Lit 1))) (Let (SOME " v2") (If (Var (Short " v1")) (Lit 1) (Var (Short "size"))) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Short "initBuckets")) (Var (Short " v2")))) (Var (Short "cmp")))) (Let (SOME " v4") (App Opref ((Var (Short " v3")))) (Let (SOME " v0") (App Opref ((Lit 0))) (Con (SOME (Short "Hashtable")) ((Var (Short " v0")) (Var (Short " v4")) (Var (Short "hf")) (Var (Short "cmp"))))))))))))) (Dletrec ((0 15) (3 27)) (("clear" "ht" Mat (Var (Short "ht")) (((Pcon (SOME (Short "Hashtable")) ("usedRef" "bucketsRef" (Pany) "cmp")) Let (SOME " v0") (App Opapp ((Var (Short "!")) (Var (Short "bucketsRef")))) (Let (SOME " v1") (App Opapp ((Var (Long "Array" (Short "length"))) (Var (Short " v0")))) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "initBuckets")) (Var (Short " v1")))) (Var (Short "cmp")))) (Let NONE (App Opapp ((App Opapp ((Var (Short ":=")) (Var (Short "bucketsRef")))) (Var (Short " v2")))) (Let (SOME " v3") (App Opapp ((Var (Short "!")) (Var (Short "usedRef")))) (Let (SOME " v4") (App Opapp ((App Opapp ((Var (Short "*")) (Var (Short " v3")))) (Lit 0))) (App Opapp ((App Opapp ((Var (Short ":=")) (Var (Short "usedRef")))) (Var (Short " v4")))))))))))))) (Dlocal ((Dletrec ((0 15) (12 6)) (("staticInsert" "ht" Fun "k" (Fun "v" (Mat (Var (Short "ht")) (((Pcon (SOME (Short "Hashtable")) ("usedRef" "bucketsRef" "hf" "cmp")) Let (SOME "buckets") (App Opapp ((Var (Short "!")) (Var (Short "bucketsRef")))) (Let (SOME " v1") (App Opapp ((Var (Long "Array" (Short "length"))) (Var (Short "buckets")))) (Let (SOME " v0") (App Opapp ((Var (Short "hf")) (Var (Short "k")))) (Let (SOME "index") (App Opapp ((App Opapp ((Var (Short "mod")) (Var (Short " v0")))) (Var (Short " v1")))) (Let (SOME "bucket") (App Opapp ((App Opapp ((Var (Long "Array" (Short "sub"))) (Var (Short "buckets")))) (Var (Short "index")))) (Let (SOME " v2") (App Opapp ((App Opapp ((App Opapp ((Var (Long "Map" (Short "insert"))) (Var (Short "bucket")))) (Var (Short "k")))) (Var (Short "v")))) (Let NONE (App Opapp ((App Opapp ((App Opapp ((Var (Long "Array" (Short "update"))) (Var (Short "buckets")))) (Var (Short "index")))) (Var (Short " v2")))) (Let (SOME " v3") (App Opapp ((Var (Long "Map" (Short "null"))) (Var (Short "bucket")))) (If (Var (Short " v3")) (Let (SOME " v4") (App Opapp ((Var (Short "!")) (Var (Short "usedRef")))) (Let (SOME " v5") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short " v4")))) (Lit 1))) (App Opapp ((App Opapp ((Var (Short ":=")) (Var (Short "usedRef")))) (Var (Short " v5")))))) (Con NONE nil))))))))))))))))) ((Dlocal ((Dletrec ((0 15) (0 80)) (("insertList" "ht" Fun "l" (Let (SOME " v0") (Fun "" (Mat (Var (Short "")) (((Pcon NONE ("k" "v")) App Opapp ((App Opapp ((App Opapp ((Var (Short "staticInsert")) (Var (Short "ht")))) (Var (Short "k")))) (Var (Short "v"))))))) (App Opapp ((App Opapp ((Var (Long "List" (Short "app"))) (Var (Short " v0")))) (Var (Short "l")))))))) (Dletrec ((0 15) (10 6)) (("doubleCapacity" "ht" Mat (Var (Short "ht")) (((Pcon (SOME (Short "Hashtable")) ("usedRef" "bucketsRef" (Pany) "cmp")) Let (SOME "oldArr") (App Opapp ((Var (Short "!")) (Var (Short "bucketsRef")))) (Let (SOME " v0") (App Opapp ((Var (Long "Array" (Short "length"))) (Var (Short "oldArr")))) (Let (SOME "newLen") (App Opapp ((App Opapp ((Var (Short "*")) (Var (Short " v0")))) (Lit 2))) (Let (SOME "oldList") (App Opapp ((Var (Short "toAscList")) (Var (Short "ht")))) (Let NONE (App Opapp ((App Opapp ((Var (Short ":=")) (Var (Short "usedRef")))) (Lit 0))) (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "initBuckets")) (Var (Short "newLen")))) (Var (Short "cmp")))) (Let NONE (App Opapp ((App Opapp ((Var (Short ":=")) (Var (Short "bucketsRef")))) (Var (Short " v1")))) (App Opapp ((App Opapp ((Var (Short "insertList")) (Var (Short "ht")))) (Var (Short "oldList")))))))))))))))) ((Dletrec ((0 15) (4 48)) (("insert" "ht" Fun "k" (Fun "v" (Mat (Var (Short "ht")) (((Pcon (SOME (Short "Hashtable")) ("usedRef" "bucketsRef" (Pany) (Pany))) Let (SOME " v2") (App Opapp ((Var (Short "!")) (Var (Short "bucketsRef")))) (Let (SOME " v3") (App Opapp ((Var (Long "Array" (Short "length"))) (Var (Short " v2")))) (Let (SOME " v4") (App Opapp ((App Opapp ((Var (Short "*")) (Lit 3))) (Var (Short " v3")))) (Let (SOME " v0") (App Opapp ((Var (Short "!")) (Var (Short "usedRef")))) (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "*")) (Lit 4))) (Var (Short " v0")))) (Let (SOME " v5") (App Opapp ((App Opapp ((Var (Short "<")) (Var (Short " v1")))) (Var (Short " v4")))) (If (Var (Short " v5")) (App Opapp ((App Opapp ((App Opapp ((Var (Short "staticInsert")) (Var (Short "ht")))) (Var (Short "k")))) (Var (Short "v")))) (Let NONE (App Opapp ((Var (Short "doubleCapacity")) (Var (Short "ht")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "staticInsert")) (Var (Short "ht")))) (Var (Short "k")))) (Var (Short "v")))))))))))))))))))))))))))) (Dmod "CommandLine" ((Dlocal ((Dletrec ((1 2) (5 49)) (("read16bit" "a" Let (SOME "w0") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "sub"))) (Var (Short "a")))) (Lit 0))) (Let (SOME "w1") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "sub"))) (Var (Short "a")))) (Lit 1))) (Let (SOME " v1") (App Opapp ((Var (Long "Word8" (Short "toInt"))) (Var (Short "w1")))) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "*")) (Var (Short " v1")))) (Lit 256))) (Let (SOME " v0") (App Opapp ((Var (Long "Word8" (Short "toInt"))) (Var (Short "w0")))) (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short " v0")))) (Var (Short " v2"))))))))))) (Dletrec ((1 2) (3 54)) (("write16bit" "a" Fun "i" (Let (SOME " v0") (App Opapp ((Var (Long "Word8" (Short "fromInt"))) (Var (Short "i")))) (Let NONE (App Opapp ((App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "update"))) (Var (Short "a")))) (Lit 0))) (Var (Short " v0")))) (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "div")) (Var (Short "i")))) (Lit 256))) (Let (SOME " v2") (App Opapp ((Var (Long "Word8" (Short "fromInt"))) (Var (Short " v1")))) (App Opapp ((App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "update"))) (Var (Short "a")))) (Lit 1))) (Var (Short " v2"))))))))))) (Dletrec ((1 2) (12 34)) (("cloop" "a" Fun "n" (Fun "acc" (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "n")))) (Lit 0))) (If (Var (Short " v0")) (Var (Short "acc")) (Let (SOME "n") (App Opapp ((App Opapp ((Var (Short "-")) (Var (Short "n")))) (Lit 1))) (Let (SOME "u") (App Opapp ((App Opapp ((Var (Short "write16bit")) (Var (Short "a")))) (Var (Short "n")))) (Let (SOME "u") (App (FFI . "get_arg_length") ((Lit "") (Var (Short "a")))) (Let (SOME "l") (App Opapp ((Var (Short "read16bit")) (Var (Short "a")))) (Let (SOME " v2") (App Opapp ((Var (Long "Word8" (Short "fromInt"))) (Lit 0))) (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "max")) (Lit 2))) (Var (Short "l")))) (Let (SOME "tmp") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "array"))) (Var (Short " v1")))) (Var (Short " v2")))) (Let (SOME "u") (App Opapp ((App Opapp ((Var (Short "write16bit")) (Var (Short "tmp")))) (Var (Short "n")))) (Let (SOME "u") (App (FFI . "get_arg") ((Lit "") (Var (Short "tmp")))) (Let (SOME "arg") (App Opapp ((App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "substring"))) (Var (Short "tmp")))) (Lit 0))) (Var (Short "l")))) (Let (SOME " v3") (Con (SOME (Short "::")) ((Var (Short "arg")) (Var (Short "acc")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "cloop")) (Var (Short "a")))) (Var (Short "n")))) (Var (Short " v3")))))))))))))))))))))) ((Dletrec ((1 2) (7 22)) (("cline" "u" Mat (Var (Short "u")) (((Pcon NONE nil) Let (SOME " v0") (App Opapp ((Var (Long "Word8" (Short "fromInt"))) (Lit 0))) (Let (SOME "a") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "array"))) (Lit 2))) (Var (Short " v0")))) (Let (SOME "u") (App (FFI . "get_arg_count") ((Lit "") (Var (Short "a")))) (Let (SOME "n") (App Opapp ((Var (Short "read16bit")) (Var (Short "a")))) (Let (SOME " v1") (Con (SOME (Short "[]")) nil) (App Opapp ((App Opapp ((App Opapp ((Var (Short "cloop")) (Var (Short "a")))) (Var (Short "n")))) (Var (Short " v1"))))))))))))) (Dletrec ((0 15) (0 44)) (("name" "u" Let (SOME " v0") (App Opapp ((Var (Short "cline")) (Var (Short "u")))) (App Opapp ((Var (Long "List" (Short "hd"))) (Var (Short " v0"))))))) (Dletrec ((0 15) (0 49)) (("arguments" "u" Let (SOME " v0") (App Opapp ((Var (Short "cline")) (Var (Short "u")))) (App Opapp ((Var (Long "List" (Short "tl"))) (Var (Short " v0"))))))))))) (Dmod "Double" ((Dtabbrev (unk unk) nil "double" (Atapp nil (Short "word64"))) (Dlocal ((Dlet (unk unk) "replacemlneg" (Fun "v1" (If (App Equality ((Var (Short "v1")) (Lit (char "~")))) (Lit (char "-")) (Var (Short "v1"))))) (Dlet (unk unk) "preparestring" (Fun "v1" (App Opapp ((App Opapp ((Var (Long "String" (Short "translate"))) (Var (Short "replacemlneg")))) (Var (Short "v1"))))))) ((Dlet (unk unk) "fromWord" (Fun "v1" (App FpFromWord ((Var (Short "v1")))))) (Dlet (unk unk) "toWord" (Fun "v1" (App FpToWord ((Var (Short "v1")))))) (Dletrec ((0 14) (15 6)) (("fromString" "s" Let (SOME "sPrepped") (App Opapp ((Var (Short "preparestring")) (Var (Short "s")))) (Let (SOME " v0") (App Opapp ((Var (Long "Word8" (Short "fromInt"))) (Lit 0))) (Let (SOME "iobuff") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "array"))) (Lit 8))) (Var (Short " v0")))) (Let NONE (App (FFI . "double_fromString") ((Var (Short "sPrepped")) (Var (Short "iobuff")))) (Let (SOME "a") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "sub"))) (Var (Short "iobuff")))) (Lit 0))) (Let (SOME "b") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "sub"))) (Var (Short "iobuff")))) (Lit 1))) (Let (SOME "c") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "sub"))) (Var (Short "iobuff")))) (Lit 2))) (Let (SOME "d") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "sub"))) (Var (Short "iobuff")))) (Lit 3))) (Let (SOME "e") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "sub"))) (Var (Short "iobuff")))) (Lit 4))) (Let (SOME "f") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "sub"))) (Var (Short "iobuff")))) (Lit 5))) (Let (SOME "g") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "sub"))) (Var (Short "iobuff")))) (Lit 6))) (Let (SOME "h") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "sub"))) (Var (Short "iobuff")))) (Lit 7))) (Let (SOME " v1") (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Long "Word64" (Short "concatAll"))) (Var (Short "a")))) (Var (Short "b")))) (Var (Short "c")))) (Var (Short "d")))) (Var (Short "e")))) (Var (Short "f")))) (Var (Short "g")))) (Var (Short "h")))) (App Opapp ((Var (Short "fromWord")) (Var (Short " v1"))))))))))))))))))))) (Dlocal ((Dlet (unk unk) "byte_0" (Fun "v1" (App (Shift8Lsl . 0) ((App W8fromInt ((App W64toInt ((App (Shift64Lsr . 0) ((Var (Short "v1")))))))))))) (Dlet (unk unk) "byte_1" (Fun "v1" (App (Shift8Lsl . 0) ((App W8fromInt ((App W64toInt ((App (Shift64Lsr . 0) ((App (Shift64Lsr . 8) ((Var (Short "v1")))))))))))))) (Dlet (unk unk) "byte_2" (Fun "v1" (App (Shift8Lsl . 0) ((App W8fromInt ((App W64toInt ((App (Shift64Lsr . 0) ((App (Shift64Lsr . 16) ((Var (Short "v1")))))))))))))) (Dlet (unk unk) "byte_3" (Fun "v1" (App (Shift8Lsl . 0) ((App W8fromInt ((App W64toInt ((App (Shift64Lsr . 0) ((App (Shift64Lsr . 24) ((Var (Short "v1")))))))))))))) (Dlet (unk unk) "byte_4" (Fun "v1" (App (Shift8Lsl . 0) ((App W8fromInt ((App W64toInt ((App (Shift64Lsr . 0) ((App (Shift64Lsr . 32) ((Var (Short "v1")))))))))))))) (Dlet (unk unk) "byte_5" (Fun "v1" (App (Shift8Lsl . 0) ((App W8fromInt ((App W64toInt ((App (Shift64Lsr . 0) ((App (Shift64Lsr . 40) ((Var (Short "v1")))))))))))))) (Dlet (unk unk) "byte_6" (Fun "v1" (App (Shift8Lsl . 0) ((App W8fromInt ((App W64toInt ((App (Shift64Lsr . 0) ((App (Shift64Lsr . 48) ((Var (Short "v1")))))))))))))) (Dlet (unk unk) "byte_7" (Fun "v1" (App (Shift8Lsl . 0) ((App W8fromInt ((App W64toInt ((App (Shift64Lsr . 0) ((App (Shift64Lsr . 56) ((Var (Short "v1")))))))))))))) (Dlet (unk unk) "is_0_byte" (Fun "v1" (App Equality ((Var (Short "v1")) (Lit (word8 0))))))) ((Dletrec ((0 14) (16 6)) (("toString" "d" Let (SOME "w") (App Opapp ((Var (Short "toWord")) (Var (Short "d")))) (Let (SOME " v0") (App Opapp ((Var (Long "Word8" (Short "fromInt"))) (Lit 0))) (Let (SOME "iobuff") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "array"))) (Lit 256))) (Var (Short " v0")))) (Let (SOME " v1") (App Opapp ((Var (Short "byte_0")) (Var (Short "w")))) (Let NONE (App Opapp ((App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "update"))) (Var (Short "iobuff")))) (Lit 0))) (Var (Short " v1")))) (Let (SOME " v2") (App Opapp ((Var (Short "byte_1")) (Var (Short "w")))) (Let NONE (App Opapp ((App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "update"))) (Var (Short "iobuff")))) (Lit 1))) (Var (Short " v2")))) (Let (SOME " v3") (App Opapp ((Var (Short "byte_2")) (Var (Short "w")))) (Let NONE (App Opapp ((App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "update"))) (Var (Short "iobuff")))) (Lit 2))) (Var (Short " v3")))) (Let (SOME " v4") (App Opapp ((Var (Short "byte_3")) (Var (Short "w")))) (Let NONE (App Opapp ((App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "update"))) (Var (Short "iobuff")))) (Lit 3))) (Var (Short " v4")))) (Let (SOME " v5") (App Opapp ((Var (Short "byte_4")) (Var (Short "w")))) (Let NONE (App Opapp ((App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "update"))) (Var (Short "iobuff")))) (Lit 4))) (Var (Short " v5")))) (Let (SOME " v6") (App Opapp ((Var (Short "byte_5")) (Var (Short "w")))) (Let NONE (App Opapp ((App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "update"))) (Var (Short "iobuff")))) (Lit 5))) (Var (Short " v6")))) (Let (SOME " v7") (App Opapp ((Var (Short "byte_6")) (Var (Short "w")))) (Let NONE (App Opapp ((App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "update"))) (Var (Short "iobuff")))) (Lit 6))) (Var (Short " v7")))) (Let (SOME " v8") (App Opapp ((Var (Short "byte_7")) (Var (Short "w")))) (Let NONE (App Opapp ((App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "update"))) (Var (Short "iobuff")))) (Lit 7))) (Var (Short " v8")))) (Let NONE (App (FFI . "double_toString") ((Lit "") (Var (Short "iobuff")))) (Let (SOME " v9") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "findi"))) (Var (Short "is_0_byte")))) (Var (Short "iobuff")))) (Let (SOME " v10") (App Opapp ((Var (Long "Option" (Short "valOf"))) (Var (Short " v9")))) (Let (SOME "n") (App Opapp ((Var (Short "fst")) (Var (Short " v10")))) (App Opapp ((App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "substring"))) (Var (Short "iobuff")))) (Lit 0))) (Var (Short "n"))))))))))))))))))))))))))))))) (Dlet (unk unk) "fma" (Fun "v1" (Fun "v2" (Fun "v3" (FpOptimise NoOpt (App FPtopFPFma ((Var (Short "v3")) (Var (Short "v1")) (Var (Short "v2"))))))))) (Dlet (unk unk) "+" (Fun "v1" (Fun "v2" (FpOptimise NoOpt (App FPbopFPAdd ((Var (Short "v1")) (Var (Short "v2")))))))) (Dlet (unk unk) "-" (Fun "v1" (Fun "v2" (FpOptimise NoOpt (App FPbopFPSub ((Var (Short "v1")) (Var (Short "v2")))))))) (Dlet (unk unk) "*" (Fun "v1" (Fun "v2" (FpOptimise NoOpt (App FPbopFPMul ((Var (Short "v1")) (Var (Short "v2")))))))) (Dlet (unk unk) "/" (Fun "v1" (Fun "v2" (FpOptimise NoOpt (App FPbopFPDiv ((Var (Short "v1")) (Var (Short "v2")))))))) (Dlet (unk unk) "<" (Fun "v1" (Fun "v2" (FpOptimise NoOpt (App FPcmpFPLess ((Var (Short "v1")) (Var (Short "v2")))))))) (Dlet (unk unk) "<=" (Fun "v1" (Fun "v2" (FpOptimise NoOpt (App FPcmpFPLessEqual ((Var (Short "v1")) (Var (Short "v2")))))))) (Dlet (unk unk) ">" (Fun "v1" (Fun "v2" (FpOptimise NoOpt (App FPcmpFPGreater ((Var (Short "v1")) (Var (Short "v2")))))))) (Dlet (unk unk) ">=" (Fun "v1" (Fun "v2" (FpOptimise NoOpt (App FPcmpFPGreaterEqual ((Var (Short "v1")) (Var (Short "v2")))))))) (Dlet (unk unk) "=" (Fun "v1" (Fun "v2" (FpOptimise NoOpt (App FPcmpFPEqual ((Var (Short "v1")) (Var (Short "v2")))))))) (Dlet (unk unk) "abs" (Fun "v1" (FpOptimise NoOpt (App FPuopFPAbs ((Var (Short "v1"))))))) (Dlet (unk unk) "sqrt" (Fun "v1" (FpOptimise NoOpt (App FPuopFPSqrt ((Var (Short "v1"))))))) (Dlet (unk unk) "~" (Fun "v1" (FpOptimise NoOpt (App FPuopFPNeg ((Var (Short "v1"))))))))) (Dmod "Marshalling" ((Dletrec ((0 15) (3 10)) (("n2w2" "n" Fun "bytes" (Fun "off" (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Short "div")) (Var (Short "n")))) (Lit 256))) (Let (SOME " v1") (App Opapp ((Var (Long "Word8" (Short "fromInt"))) (Var (Short " v0")))) (Let (SOME "a") (App Opapp ((App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "update"))) (Var (Short "bytes")))) (Var (Short "off")))) (Var (Short " v1")))) (Let (SOME " v3") (App Opapp ((Var (Long "Word8" (Short "fromInt"))) (Var (Short "n")))) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "off")))) (Lit 1))) (Let (SOME "a") (App Opapp ((App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "update"))) (Var (Short "bytes")))) (Var (Short " v2")))) (Var (Short " v3")))) (Con NONE nil))))))))))) (Dletrec ((0 15) (3 45)) (("w22n" "bytes" Fun "off" (Let (SOME "b1") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "sub"))) (Var (Short "bytes")))) (Var (Short "off")))) (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "off")))) (Lit 1))) (Let (SOME "b0") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "sub"))) (Var (Short "bytes")))) (Var (Short " v0")))) (Let (SOME " v3") (App Opapp ((Var (Long "Word8" (Short "toInt"))) (Var (Short "b0")))) (Let (SOME " v1") (App Opapp ((Var (Long "Word8" (Short "toInt"))) (Var (Short "b1")))) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "*")) (Var (Short " v1")))) (Lit 256))) (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short " v2")))) (Var (Short " v3"))))))))))))))) (Dmod "TextIO" ((Dlocal ((Dtype (unk unk) ((nil "instream" ("Instream" (Atapp nil (Short "string")))))) (Dtype (unk unk) ((nil "outstream" ("Outstream" (Atapp nil (Short "string")))))) (Dtype ((0 14) unk) ((nil "instreambuffered" ("InstreamBuffered" (Atapp nil (Short "instream")) (Atapp ((Atapp nil (Short "int"))) (Short "ref")) (Atapp ((Atapp nil (Short "int"))) (Short "ref")) (Atapp nil (Short "byte_array")))))) (Dlet (unk unk) "get_out" (Fun "v2" (Mat (Var (Short "v2")) (((Pcon (SOME (Short "Outstream")) ("v1")) Var (Short "v1")))))) (Dlet (unk unk) "get_in" (Fun "v2" (Mat (Var (Short "v2")) (((Pcon (SOME (Short "Instream")) ("v1")) Var (Short "v1"))))))) ((Dtabbrev (unk unk) nil "instream" (Atapp nil (Short "instream"))) (Dtabbrev (unk unk) nil "outstream" (Atapp nil (Short "outstream"))) (Dtabbrev (unk unk) nil "b_instream" (Atapp nil (Short "instreambuffered"))) (Dexn ((1 2) unk) "BadFileName" nil) (Dexn ((2 2) unk) "InvalidFD" nil) (Dexn ((3 2) unk) "EndOfFile" nil) (Dexn ((4 2) unk) "IllegalArgument" nil) (Dlocal ((Dlet (unk unk) "iobuff" (App Aw8alloc ((Lit 2052) (Lit (word8 0)))))) ((Dlet (unk unk) "stdIn" (Con (SOME (Short "Instream")) ((Lit "\\00\\00\\00\\00\\00\\00\\00\\00")))) (Dlet (unk unk) "stdOut" (Con (SOME (Short "Outstream")) ((Lit "\\00\\00\\00\\00\\00\\00\\00\\01")))) (Dlet (unk unk) "stdErr" (Con (SOME (Short "Outstream")) ((Lit "\\00\\00\\00\\00\\00\\00\\00\\02")))) (Dlocal ((Dletrec ((0 16) (11 6)) (("writei" "fd" Fun "n" (Fun "i" (Let (SOME "a") (App Opapp ((App Opapp ((App Opapp ((Var (Long "Marshalling" (Short "n2w2"))) (Var (Short "n")))) (Var (Short "iobuff")))) (Lit 0))) (Let (SOME "a") (App Opapp ((App Opapp ((App Opapp ((Var (Long "Marshalling" (Short "n2w2"))) (Var (Short "i")))) (Var (Short "iobuff")))) (Lit 2))) (Let (SOME "a") (App (FFI . "write") ((Var (Short "fd")) (Var (Short "iobuff")))) (Let (SOME " v1") (App Opapp ((Var (Long "Word8" (Short "fromInt"))) (Lit 1))) (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "sub"))) (Var (Short "iobuff")))) (Lit 0))) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short " v0")))) (Var (Short " v1")))) (If (Var (Short " v2")) (Let (SOME " v3") (Con (SOME (Short "InvalidFD")) nil) (Raise (Var (Short " v3")))) (Let (SOME "nw") (App Opapp ((App Opapp ((Var (Long "Marshalling" (Short "w22n"))) (Var (Short "iobuff")))) (Lit 1))) (Let (SOME " v4") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "nw")))) (Lit 0))) (If (Var (Short " v4")) (App Opapp ((App Opapp ((App Opapp ((Var (Short "writei")) (Var (Short "fd")))) (Var (Short "n")))) (Var (Short "i")))) (Var (Short "nw")))))))))))))))) (Dletrec ((12 4) (15 58)) (("write" "fd" Fun "n" (Fun "i" (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "n")))) (Lit 0))) (If (Var (Short " v0")) (Con NONE nil) (Let (SOME "nw") (App Opapp ((App Opapp ((App Opapp ((Var (Short "writei")) (Var (Short "fd")))) (Var (Short "n")))) (Var (Short "i")))) (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "<")) (Var (Short "nw")))) (Var (Short "n")))) (If (Var (Short " v1")) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "i")))) (Var (Short "nw")))) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "-")) (Var (Short "n")))) (Var (Short "nw")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "write")) (Var (Short "fd")))) (Var (Short " v2")))) (Var (Short " v3")))))) (Con NONE nil))))))))))) ((Dletrec ((0 17) (1 87)) (("output1" "fd" Fun "c" (Let (SOME " v0") (App Opapp ((Var (Long "Char" (Short "ord"))) (Var (Short "c")))) (Let (SOME " v1") (App Opapp ((Var (Long "Word8" (Short "fromInt"))) (Var (Short " v0")))) (Let NONE (App Opapp ((App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "update"))) (Var (Short "iobuff")))) (Lit 4))) (Var (Short " v1")))) (Let (SOME " v2") (App Opapp ((Var (Short "get_out")) (Var (Short "fd")))) (Let NONE (App Opapp ((App Opapp ((App Opapp ((Var (Short "write")) (Var (Short " v2")))) (Lit 1))) (Lit 0))) (Con NONE nil))))))))) (Dletrec ((0 17) (7 4)) (("output" "fd" Fun "s" (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "s")))) (Lit ""))) (If (Var (Short " v0")) (Con NONE nil) (Let (SOME "z") (App Opapp ((Var (Long "String" (Short "size"))) (Var (Short "s")))) (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "<=")) (Var (Short "z")))) (Lit 2048))) (Let (SOME "n") (If (Var (Short " v1")) (Var (Short "z")) (Lit 2048)) (Let (SOME "fl") (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "copyVec"))) (Var (Short "s")))) (Lit 0))) (Var (Short "n")))) (Var (Short "iobuff")))) (Lit 4))) (Let (SOME " v2") (App Opapp ((Var (Short "get_out")) (Var (Short "fd")))) (Let (SOME "a") (App Opapp ((App Opapp ((App Opapp ((Var (Short "write")) (Var (Short " v2")))) (Var (Short "n")))) (Lit 0))) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Short "-")) (Var (Short "z")))) (Var (Short "n")))) (Let (SOME " v4") (App Opapp ((App Opapp ((App Opapp ((Var (Long "String" (Short "substring"))) (Var (Short "s")))) (Var (Short "n")))) (Var (Short " v3")))) (App Opapp ((App Opapp ((Var (Short "output")) (Var (Short "fd")))) (Var (Short " v4"))))))))))))))))) (Dletrec ((8 2) (8 30)) (("print" "s" App Opapp ((App Opapp ((Var (Short "output")) (Var (Short "stdOut")))) (Var (Short "s")))))) (Dletrec ((9 2) (9 34)) (("print_err" "s" App Opapp ((App Opapp ((Var (Short "output")) (Var (Short "stdErr")))) (Var (Short "s")))))) (Dletrec ((1 2) (2 60)) (("print_list" "ls" Mat (Var (Short "ls")) (((Pcon (SOME (Short "[]")) nil) Con NONE nil) ((Pcon (SOME (Short "::")) ("x" "xs")) Let NONE (App Opapp ((Var (Short "print")) (Var (Short "x")))) (App Opapp ((Var (Short "print_list")) (Var (Short "xs"))))))))) (Dletrec ((1 0) (7 4)) (("openIn" "fname" Let (SOME " v0") (App Opapp ((Var (Long "Word8" (Short "fromInt"))) (Lit 0))) (Let (SOME "b") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "array"))) (Lit 9))) (Var (Short " v0")))) (Let (SOME " v1") (App Opapp ((Var (Long "Char" (Short "chr"))) (Lit 0))) (Let (SOME " v2") (App Opapp ((Var (Long "String" (Short "str"))) (Var (Short " v1")))) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Short "^")) (Var (Short "fname")))) (Var (Short " v2")))) (Let (SOME "a") (App (FFI . "open_in") ((Var (Short " v3")) (Var (Short "b")))) (Let (SOME " v5") (App Opapp ((Var (Long "Word8" (Short "fromInt"))) (Lit 0))) (Let (SOME " v4") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "sub"))) (Var (Short "b")))) (Lit 0))) (Let (SOME " v6") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short " v4")))) (Var (Short " v5")))) (If (Var (Short " v6")) (Let (SOME " v7") (App Opapp ((App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "substring"))) (Var (Short "b")))) (Lit 1))) (Lit 8))) (Con (SOME (Short "Instream")) ((Var (Short " v7"))))) (Let (SOME " v8") (Con (SOME (Short "BadFileName")) nil) (Raise (Var (Short " v8")))))))))))))))) (Dletrec ((8 0) (14 4)) (("openOut" "fname" Let (SOME " v0") (App Opapp ((Var (Long "Word8" (Short "fromInt"))) (Lit 0))) (Let (SOME "b") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "array"))) (Lit 9))) (Var (Short " v0")))) (Let (SOME " v1") (App Opapp ((Var (Long "Char" (Short "chr"))) (Lit 0))) (Let (SOME " v2") (App Opapp ((Var (Long "String" (Short "str"))) (Var (Short " v1")))) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Short "^")) (Var (Short "fname")))) (Var (Short " v2")))) (Let (SOME "a") (App (FFI . "open_out") ((Var (Short " v3")) (Var (Short "b")))) (Let (SOME " v5") (App Opapp ((Var (Long "Word8" (Short "fromInt"))) (Lit 0))) (Let (SOME " v4") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "sub"))) (Var (Short "b")))) (Lit 0))) (Let (SOME " v6") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short " v4")))) (Var (Short " v5")))) (If (Var (Short " v6")) (Let (SOME " v7") (App Opapp ((App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "substring"))) (Var (Short "b")))) (Lit 1))) (Lit 8))) (Con (SOME (Short "Outstream")) ((Var (Short " v7"))))) (Let (SOME " v8") (Con (SOME (Short "BadFileName")) nil) (Raise (Var (Short " v8")))))))))))))))) (Dletrec ((2 0) (6 4)) (("closeOut" "fd" Let (SOME " v0") (App Opapp ((Var (Short "get_out")) (Var (Short "fd")))) (Let (SOME "a") (App (FFI . "close") ((Var (Short " v0")) (Var (Short "iobuff")))) (Let (SOME " v2") (App Opapp ((Var (Long "Word8" (Short "fromInt"))) (Lit 0))) (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "sub"))) (Var (Short "iobuff")))) (Lit 0))) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short " v1")))) (Var (Short " v2")))) (If (Var (Short " v3")) (Con NONE nil) (Let (SOME " v4") (Con (SOME (Short "InvalidFD")) nil) (Raise (Var (Short " v4")))))))))))) (Dletrec ((2 0) (6 4)) (("closeIn" "fd" Let (SOME " v0") (App Opapp ((Var (Short "get_in")) (Var (Short "fd")))) (Let (SOME "a") (App (FFI . "close") ((Var (Short " v0")) (Var (Short "iobuff")))) (Let (SOME " v2") (App Opapp ((Var (Long "Word8" (Short "fromInt"))) (Lit 0))) (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "sub"))) (Var (Short "iobuff")))) (Lit 0))) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short " v1")))) (Var (Short " v2")))) (If (Var (Short " v3")) (Con NONE nil) (Let (SOME " v4") (Con (SOME (Short "InvalidFD")) nil) (Raise (Var (Short " v4")))))))))))) (Dlocal ((Dletrec ((1 2) (7 6)) (("read" "fd" Fun "n" (Let (SOME "a") (App Opapp ((App Opapp ((App Opapp ((Var (Long "Marshalling" (Short "n2w2"))) (Var (Short "n")))) (Var (Short "iobuff")))) (Lit 0))) (Let NONE (App (FFI . "read") ((Var (Short "fd")) (Var (Short "iobuff")))) (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "sub"))) (Var (Short "iobuff")))) (Lit 0))) (Let (SOME " v1") (App Opapp ((Var (Long "Word8" (Short "toInt"))) (Var (Short " v0")))) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "<>")) (Var (Short " v1")))) (Lit 1))) (If (Var (Short " v2")) (App Opapp ((App Opapp ((Var (Long "Marshalling" (Short "w22n"))) (Var (Short "iobuff")))) (Lit 1))) (Let (SOME " v3") (Con (SOME (Short "InvalidFD")) nil) (Raise (Var (Short " v3"))))))))))))) (Dletrec ((1 0) (3 31)) (("read_byte" "fd" Let (SOME " v0") (App Opapp ((App Opapp ((Var (Short "read")) (Var (Short "fd")))) (Lit 1))) (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short " v0")))) (Lit 0))) (If (Var (Short " v1")) (Let (SOME " v2") (Con (SOME (Short "EndOfFile")) nil) (Raise (Var (Short " v2")))) (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "sub"))) (Var (Short "iobuff")))) (Lit 4)))))))) (Dletrec ((1 0) (8 22)) (("input" "fd" Fun "buff" (Fun "off" (Fun "len" (Letrec (("input0" "off" Fun "len" (Fun "count" (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "min")) (Var (Short "len")))) (Lit 2048))) (Let (SOME " v0") (App Opapp ((Var (Short "get_in")) (Var (Short "fd")))) (Let (SOME "nread") (App Opapp ((App Opapp ((Var (Short "read")) (Var (Short " v0")))) (Var (Short " v1")))) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "nread")))) (Lit 0))) (If (Var (Short " v2")) (Var (Short "count")) (Let NONE (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "copy"))) (Var (Short "iobuff")))) (Lit 4))) (Var (Short "nread")))) (Var (Short "buff")))) (Var (Short "off")))) (Let (SOME " v5") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "count")))) (Var (Short "nread")))) (Let (SOME " v4") (App Opapp ((App Opapp ((Var (Short "-")) (Var (Short "len")))) (Var (Short "nread")))) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "off")))) (Var (Short "nread")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "input0")) (Var (Short " v3")))) (Var (Short " v4")))) (Var (Short " v5")))))))))))))))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "input0")) (Var (Short "off")))) (Var (Short "len")))) (Lit 0)))))))))) ((Dletrec ((1 2) (1 89)) (("input1" "fd" Handle (Let (SOME " v0") (App Opapp ((Var (Short "get_in")) (Var (Short "fd")))) (Let (SOME " v1") (App Opapp ((Var (Short "read_byte")) (Var (Short " v0")))) (Let (SOME " v2") (App Opapp ((Var (Long "Char" (Short "fromByte"))) (Var (Short " v1")))) (App Opapp ((Var (Long "Char" (Short "some"))) (Var (Short " v2"))))))) (((Pcon (SOME (Short "EndOfFile")) nil) Con (SOME (Short "None")) nil))))) (Dlocal ((Dletrec ((1 2) (5 50)) (("extend_array" "arr" Let (SOME "len") (App Opapp ((Var (Long "Word8Array" (Short "length"))) (Var (Short "arr")))) (Let (SOME " v1") (App Opapp ((Var (Long "Word8" (Short "fromInt"))) (Lit 0))) (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Short "*")) (Lit 2))) (Var (Short "len")))) (Let (SOME "arr'") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "array"))) (Var (Short " v0")))) (Var (Short " v1")))) (Let NONE (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "copy"))) (Var (Short "arr")))) (Lit 0))) (Var (Short "len")))) (Var (Short "arr'")))) (Lit 0))) (Var (Short "arr'")))))))))) ((Dletrec ((1 2) (18 68)) (("inputLine" "fd" Let (SOME " v0") (App Opapp ((Var (Long "Char" (Short "ord"))) (Lit (char "\\0A")))) (Let (SOME "nl") (App Opapp ((Var (Long "Word8" (Short "fromInt"))) (Var (Short " v0")))) (Letrec (("inputLine_aux" "arr" Fun "i" (Let (SOME " v1") (App Opapp ((Var (Long "Word8Array" (Short "length"))) (Var (Short "arr")))) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "<")) (Var (Short "i")))) (Var (Short " v1")))) (If (Var (Short " v2")) (Handle (Let (SOME " v3") (App Opapp ((Var (Short "get_in")) (Var (Short "fd")))) (Let (SOME "c") (App Opapp ((Var (Short "read_byte")) (Var (Short " v3")))) (Let (SOME "u") (App Opapp ((App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "update"))) (Var (Short "arr")))) (Var (Short "i")))) (Var (Short "c")))) (Let (SOME " v4") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "c")))) (Var (Short "nl")))) (If (Var (Short " v4")) (Let (SOME " v5") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "i")))) (Lit 1))) (Let (SOME " v6") (App Opapp ((App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "substring"))) (Var (Short "arr")))) (Lit 0))) (Var (Short " v5")))) (Con (SOME (Short "Some")) ((Var (Short " v6")))))) (Let (SOME " v7") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "i")))) (Lit 1))) (App Opapp ((App Opapp ((Var (Short "inputLine_aux")) (Var (Short "arr")))) (Var (Short " v7")))))))))) (((Pcon (SOME (Short "EndOfFile")) nil) Let (SOME " v8") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "i")))) (Lit 0))) (If (Var (Short " v8")) (Con (SOME (Short "None")) nil) (Let NONE (App Opapp ((App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "update"))) (Var (Short "arr")))) (Var (Short "i")))) (Var (Short "nl")))) (Let (SOME " v9") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "i")))) (Lit 1))) (Let (SOME " v10") (App Opapp ((App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "substring"))) (Var (Short "arr")))) (Lit 0))) (Var (Short " v9")))) (Con (SOME (Short "Some")) ((Var (Short " v10"))))))))))) (Let (SOME " v11") (App Opapp ((Var (Short "extend_array")) (Var (Short "arr")))) (App Opapp ((App Opapp ((Var (Short "inputLine_aux")) (Var (Short " v11")))) (Var (Short "i")))))))))) (Let (SOME " v12") (App Opapp ((Var (Long "Word8" (Short "fromInt"))) (Lit 0))) (Let (SOME " v13") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "array"))) (Lit 127))) (Var (Short " v12")))) (App Opapp ((App Opapp ((Var (Short "inputLine_aux")) (Var (Short " v13")))) (Lit 0)))))))))) (Dletrec ((1 2) (4 33)) (("inputLines" "fd" Let (SOME " v0") (App Opapp ((Var (Short "inputLine")) (Var (Short "fd")))) (Mat (Var (Short " v0")) (((Pcon (SOME (Short "None")) nil) Con (SOME (Short "[]")) nil) ((Pcon (SOME (Short "Some")) ("l")) Let (SOME " v1") (App Opapp ((Var (Short "inputLines")) (Var (Short "fd")))) (Con (SOME (Short "::")) ((Var (Short "l")) (Var (Short " v1")))))))))) (Dletrec ((1 2) (7 33)) (("inputLinesFrom" "fname" Handle (Let (SOME "fd") (App Opapp ((Var (Short "openIn")) (Var (Short "fname")))) (Let (SOME "lines") (App Opapp ((Var (Short "inputLines")) (Var (Short "fd")))) (Let NONE (App Opapp ((Var (Short "closeIn")) (Var (Short "fd")))) (Con (SOME (Short "Some")) ((Var (Short "lines"))))))) (((Pcon (SOME (Short "BadFileName")) nil) Con (SOME (Short "None")) nil))))) (Dletrec ((1 2) (14 67)) (("inputAll" "fd" Letrec (("inputAll_aux" "arr" Fun "i" (Let (SOME "len") (App Opapp ((Var (Long "Word8Array" (Short "length"))) (Var (Short "arr")))) (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Short "<")) (Var (Short "i")))) (Var (Short "len")))) (If (Var (Short " v0")) (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "-")) (Var (Short "len")))) (Var (Short "i")))) (Let (SOME "n") (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "input")) (Var (Short "fd")))) (Var (Short "arr")))) (Var (Short "i")))) (Var (Short " v1")))) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "n")))) (Lit 0))) (If (Var (Short " v2")) (App Opapp ((App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "substring"))) (Var (Short "arr")))) (Lit 0))) (Var (Short "i")))) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "i")))) (Var (Short "n")))) (App Opapp ((App Opapp ((Var (Short "inputAll_aux")) (Var (Short "arr")))) (Var (Short " v3"))))))))) (Let (SOME " v4") (App Opapp ((Var (Short "extend_array")) (Var (Short "arr")))) (App Opapp ((App Opapp ((Var (Short "inputAll_aux")) (Var (Short " v4")))) (Var (Short "i")))))))))) (Let (SOME " v5") (App Opapp ((Var (Long "Word8" (Short "fromInt"))) (Lit 0))) (Let (SOME " v6") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "array"))) (Lit 127))) (Var (Short " v5")))) (App Opapp ((App Opapp ((Var (Short "inputAll_aux")) (Var (Short " v6")))) (Lit 0)))))))) (Dletrec ((1 4) (4 6)) (("copy" "inp" Fun "out" (Let (SOME " v0") (App Opapp ((Var (Short "get_in")) (Var (Short "inp")))) (Let (SOME "nr") (App Opapp ((App Opapp ((Var (Short "read")) (Var (Short " v0")))) (Lit 2048))) (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "nr")))) (Lit 0))) (If (Var (Short " v1")) (Con NONE nil) (Let (SOME " v2") (App Opapp ((Var (Short "get_out")) (Var (Short "out")))) (Let NONE (App Opapp ((App Opapp ((App Opapp ((Var (Short "write")) (Var (Short " v2")))) (Var (Short "nr")))) (Lit 0))) (App Opapp ((App Opapp ((Var (Short "copy")) (Var (Short "inp")))) (Var (Short "out"))))))))))))) (Dletrec ((1 0) (4 28)) (("b_openStdInSetBufferSize" "bsize" Let (SOME " v5") (App Opapp ((Var (Long "Word8" (Short "fromInt"))) (Lit 48))) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "bsize")))) (Lit 4))) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Short "max")) (Var (Short " v2")))) (Lit 1028))) (Let (SOME " v4") (App Opapp ((App Opapp ((Var (Short "min")) (Lit 65535))) (Var (Short " v3")))) (Let (SOME " v6") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "array"))) (Var (Short " v4")))) (Var (Short " v5")))) (Let (SOME " v1") (App Opref ((Lit 4))) (Let (SOME " v0") (App Opref ((Lit 4))) (Con (SOME (Short "InstreamBuffered")) ((Var (Short "stdIn")) (Var (Short " v0")) (Var (Short " v1")) (Var (Short " v6"))))))))))))) (Dletrec ((1 0) (1 49)) (("b_openStdIn" "" Mat (Var (Short "")) (((Pcon NONE nil) App Opapp ((Var (Short "b_openStdInSetBufferSize")) (Lit 4096))))))) (Dletrec ((1 0) (8 4)) (("b_openInSetBufferSize" "fname" Fun "bsize" (Let (SOME "is") (App Opapp ((Var (Short "openIn")) (Var (Short "fname")))) (Let (SOME " v5") (App Opapp ((Var (Long "Word8" (Short "fromInt"))) (Lit 48))) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "bsize")))) (Lit 4))) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Short "max")) (Var (Short " v2")))) (Lit 1028))) (Let (SOME " v4") (App Opapp ((App Opapp ((Var (Short "min")) (Lit 65535))) (Var (Short " v3")))) (Let (SOME " v6") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "array"))) (Var (Short " v4")))) (Var (Short " v5")))) (Let (SOME " v1") (App Opref ((Lit 4))) (Let (SOME " v0") (App Opref ((Lit 4))) (Con (SOME (Short "InstreamBuffered")) ((Var (Short "is")) (Var (Short " v0")) (Var (Short " v1")) (Var (Short " v6"))))))))))))))) (Dletrec ((1 0) (1 52)) (("b_openIn" "fname" App Opapp ((App Opapp ((Var (Short "b_openInSetBufferSize")) (Var (Short "fname")))) (Lit 4096))))) (Dletrec ((1 2) (3 15)) (("b_closeIn" "is" Mat (Var (Short "is")) (((Pcon (SOME (Short "InstreamBuffered")) ("fd" "rref" "wref" "surplus")) App Opapp ((Var (Short "closeIn")) (Var (Short "fd")))))))) (Dlocal ((Dletrec ((1 2) (9 8)) (("b_input_aux" "is" Fun "buff" (Fun "off" (Fun "len" (Mat (Var (Short "is")) (((Pcon (SOME (Short "InstreamBuffered")) ("fd" "rref" "wref" "surplus")) Let (SOME "readat") (App Opapp ((Var (Short "!")) (Var (Short "rref")))) (Let NONE (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "copy"))) (Var (Short "surplus")))) (Var (Short "readat")))) (Var (Short "len")))) (Var (Short "buff")))) (Var (Short "off")))) (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "readat")))) (Var (Short "len")))) (Let NONE (App Opapp ((App Opapp ((Var (Short ":=")) (Var (Short "rref")))) (Var (Short " v0")))) (Var (Short "len")))))))))))))) ((Dletrec ((1 1) (22 7)) (("b_input" "is" Fun "buff" (Fun "off" (Fun "len" (Mat (Var (Short "is")) (((Pcon (SOME (Short "InstreamBuffered")) ("fd" "rref" "wref" "surplus")) Let (SOME " v1") (App Opapp ((Var (Short "!")) (Var (Short "rref")))) (Let (SOME " v0") (App Opapp ((Var (Short "!")) (Var (Short "wref")))) (Let (SOME "nBuffered") (App Opapp ((App Opapp ((Var (Short "-")) (Var (Short " v0")))) (Var (Short " v1")))) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "len")))) (Var (Short "off")))) (Let (SOME " v2") (App Opapp ((Var (Long "Word8Array" (Short "length"))) (Var (Short "buff")))) (Let (SOME " v4") (App Opapp ((App Opapp ((Var (Short "<")) (Var (Short " v2")))) (Var (Short " v3")))) (If (Var (Short " v4")) (Let (SOME " v5") (Con (SOME (Short "IllegalArgument")) nil) (Raise (Var (Short " v5")))) (Let (SOME " v6") (App Opapp ((Var (Long "Word8Array" (Short "length"))) (Var (Short "surplus")))) (Let (SOME " v7") (App Opapp ((App Opapp ((Var (Short "-")) (Var (Short " v6")))) (Lit 4))) (Let (SOME " v8") (App Opapp ((App Opapp ((Var (Short "<")) (Var (Short " v7")))) (Var (Short "len")))) (If (Var (Short " v8")) (Let NONE (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "b_input_aux")) (Var (Short "is")))) (Var (Short "buff")))) (Var (Short "off")))) (Var (Short "nBuffered")))) (Let (SOME " v10") (App Opapp ((App Opapp ((Var (Short "-")) (Var (Short "len")))) (Var (Short "nBuffered")))) (Let (SOME " v9") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "off")))) (Var (Short "nBuffered")))) (Let (SOME " v11") (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "input")) (Var (Short "fd")))) (Var (Short "buff")))) (Var (Short " v9")))) (Var (Short " v10")))) (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short " v11")))) (Var (Short "nBuffered")))))))) (Let (SOME " v12") (App Opapp ((App Opapp ((Var (Short ">")) (Var (Short "len")))) (Var (Short "nBuffered")))) (If (Var (Short " v12")) (Let NONE (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "b_input_aux")) (Var (Short "is")))) (Var (Short "buff")))) (Var (Short "off")))) (Var (Short "nBuffered")))) (Let (SOME " v13") (App Opapp ((Var (Long "Word8Array" (Short "length"))) (Var (Short "surplus")))) (Let (SOME " v14") (App Opapp ((App Opapp ((Var (Short "-")) (Var (Short " v13")))) (Lit 4))) (Let (SOME " v15") (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "input")) (Var (Short "fd")))) (Var (Short "surplus")))) (Lit 4))) (Var (Short " v14")))) (Let (SOME " v16") (App Opapp ((App Opapp ((Var (Short "+")) (Lit 4))) (Var (Short " v15")))) (Let NONE (App Opapp ((App Opapp ((Var (Short ":=")) (Var (Short "wref")))) (Var (Short " v16")))) (Let NONE (App Opapp ((App Opapp ((Var (Short ":=")) (Var (Short "rref")))) (Lit 4))) (Let (SOME " v20") (App Opapp ((App Opapp ((Var (Short "-")) (Var (Short "len")))) (Var (Short "nBuffered")))) (Let (SOME " v18") (App Opapp ((Var (Short "!")) (Var (Short "wref")))) (Let (SOME " v19") (App Opapp ((App Opapp ((Var (Short "-")) (Var (Short " v18")))) (Lit 4))) (Let (SOME " v21") (App Opapp ((App Opapp ((Var (Short "min")) (Var (Short " v19")))) (Var (Short " v20")))) (Let (SOME " v17") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "off")))) (Var (Short "nBuffered")))) (Let (SOME " v22") (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "b_input_aux")) (Var (Short "is")))) (Var (Short "buff")))) (Var (Short " v17")))) (Var (Short " v21")))) (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short " v22")))) (Var (Short "nBuffered"))))))))))))))))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "b_input_aux")) (Var (Short "is")))) (Var (Short "buff")))) (Var (Short "off")))) (Var (Short "len")))))))))))))))))))))))) (Dlocal ((Dletrec ((1 2) (7 6)) (("read_into" "fd" Fun "buff" (Fun "n" (Let (SOME "a") (App Opapp ((App Opapp ((App Opapp ((Var (Long "Marshalling" (Short "n2w2"))) (Var (Short "n")))) (Var (Short "buff")))) (Lit 0))) (Let NONE (App (FFI . "read") ((Var (Short "fd")) (Var (Short "buff")))) (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "sub"))) (Var (Short "buff")))) (Lit 0))) (Let (SOME " v1") (App Opapp ((Var (Long "Word8" (Short "toInt"))) (Var (Short " v0")))) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "<>")) (Var (Short " v1")))) (Lit 1))) (If (Var (Short " v2")) (App Opapp ((App Opapp ((Var (Long "Marshalling" (Short "w22n"))) (Var (Short "buff")))) (Lit 1))) (Let (SOME " v3") (Con (SOME (Short "InvalidFD")) nil) (Raise (Var (Short " v3"))))))))))))))) ((Dlocal ((Dletrec ((1 1) (5 18)) (("b_refillBuffer_with_read" "is" Mat (Var (Short "is")) (((Pcon (SOME (Short "InstreamBuffered")) ("fd" "rref" "wref" "surplus")) Let (SOME " v1") (App Opapp ((Var (Long "Word8Array" (Short "length"))) (Var (Short "surplus")))) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "-")) (Var (Short " v1")))) (Lit 4))) (Let (SOME " v0") (App Opapp ((Var (Short "get_in")) (Var (Short "fd")))) (Let (SOME " v3") (App Opapp ((App Opapp ((App Opapp ((Var (Short "read_into")) (Var (Short " v0")))) (Var (Short "surplus")))) (Var (Short " v2")))) (Let (SOME " v4") (App Opapp ((App Opapp ((Var (Short "+")) (Lit 4))) (Var (Short " v3")))) (Let NONE (App Opapp ((App Opapp ((Var (Short ":=")) (Var (Short "wref")))) (Var (Short " v4")))) (Let NONE (App Opapp ((App Opapp ((Var (Short ":=")) (Var (Short "rref")))) (Lit 4))) (Let (SOME " v5") (App Opapp ((Var (Short "!")) (Var (Short "wref")))) (App Opapp ((App Opapp ((Var (Short "-")) (Var (Short " v5")))) (Lit 4))))))))))))))) (Dletrec ((1 1) (7 14)) (("b_peekChar_aux" "is" Mat (Var (Short "is")) (((Pcon (SOME (Short "InstreamBuffered")) ("fd" "rref" "wref" "surplus")) Let (SOME " v1") (App Opapp ((Var (Short "!")) (Var (Short "rref")))) (Let (SOME " v0") (App Opapp ((Var (Short "!")) (Var (Short "wref")))) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short " v0")))) (Var (Short " v1")))) (If (Var (Short " v2")) (Con (SOME (Short "None")) nil) (Let (SOME "readat") (App Opapp ((Var (Short "!")) (Var (Short "rref")))) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "sub"))) (Var (Short "surplus")))) (Var (Short "readat")))) (Let (SOME " v4") (App Opapp ((Var (Long "Char" (Short "fromByte"))) (Var (Short " v3")))) (App Opapp ((Var (Long "Char" (Short "some"))) (Var (Short " v4"))))))))))))))) (Dletrec ((1 1) (8 12)) (("b_input1_aux" "is" Mat (Var (Short "is")) (((Pcon (SOME (Short "InstreamBuffered")) ("fd" "rref" "wref" "surplus")) Let (SOME "readat") (App Opapp ((Var (Short "!")) (Var (Short "rref")))) (Let (SOME " v0") (App Opapp ((Var (Short "!")) (Var (Short "wref")))) (Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short " v0")))) (Var (Short "readat")))) (If (Var (Short " v1")) (Con (SOME (Short "None")) nil) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "+")) (Var (Short "readat")))) (Lit 1))) (Let NONE (App Opapp ((App Opapp ((Var (Short ":=")) (Var (Short "rref")))) (Var (Short " v2")))) (Let (SOME " v3") (App Opapp ((App Opapp ((Var (Long "Word8Array" (Short "sub"))) (Var (Short "surplus")))) (Var (Short "readat")))) (Let (SOME " v4") (App Opapp ((Var (Long "Char" (Short "fromByte"))) (Var (Short " v3")))) (App Opapp ((Var (Long "Char" (Short "some"))) (Var (Short " v4"))))))))))))))))) ((Dletrec ((1 2) (5 29)) (("b_peekChar" "is" Mat (Var (Short "is")) (((Pcon (SOME (Short "InstreamBuffered")) ("fd" "rref" "wref" "surplus")) Let (SOME " v1") (App Opapp ((Var (Short "!")) (Var (Short "rref")))) (Let (SOME " v0") (App Opapp ((Var (Short "!")) (Var (Short "wref")))) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short " v0")))) (Var (Short " v1")))) (If (Var (Short " v2")) (Let NONE (App Opapp ((Var (Short "b_refillBuffer_with_read")) (Var (Short "is")))) (App Opapp ((Var (Short "b_peekChar_aux")) (Var (Short "is"))))) (App Opapp ((Var (Short "b_peekChar_aux")) (Var (Short "is")))))))))))) (Dletrec ((1 2) (5 27)) (("b_input1" "is" Mat (Var (Short "is")) (((Pcon (SOME (Short "InstreamBuffered")) ("fd" "rref" "wref" "surplus")) Let (SOME " v1") (App Opapp ((Var (Short "!")) (Var (Short "rref")))) (Let (SOME " v0") (App Opapp ((Var (Short "!")) (Var (Short "wref")))) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short " v0")))) (Var (Short " v1")))) (If (Var (Short " v2")) (Let NONE (App Opapp ((Var (Short "b_refillBuffer_with_read")) (Var (Short "is")))) (App Opapp ((Var (Short "b_input1_aux")) (Var (Short "is"))))) (App Opapp ((Var (Short "b_input1_aux")) (Var (Short "is")))))))))))) (Dlocal ((Dletrec ((1 2) (4 15)) (("b_inputUntil_aux" "is" Fun "" (Mat (Var (Short "")) (("chr" Let (SOME " v0") (App Opapp ((Var (Short "b_input1")) (Var (Short "is")))) (Mat (Var (Short " v0")) (((Pcon (SOME (Short "Some")) ("c")) Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "<>")) (Var (Short "c")))) (Var (Short "chr")))) (If (Var (Short " v1")) (Let (SOME " v2") (App Opapp ((App Opapp ((Var (Short "b_inputUntil_aux")) (Var (Short "is")))) (Var (Short "chr")))) (Con (SOME (Short "::")) ((Var (Short "c")) (Var (Short " v2"))))) (Let (SOME " v3") (Con (SOME (Short "[]")) nil) (Con (SOME (Short "::")) ((Var (Short "c")) (Var (Short " v3"))))))) ((Pcon (SOME (Short "None")) nil) Con (SOME (Short "[]")) nil))))))))) (Dlet (unk unk) "compress" (Fun "v1" (App Implode ((App Opapp ((Var (Long "List" (Short "rev"))) (Var (Short "v1")))))))) (Dletrec ((1 2) (12 56)) (("b_inputLine_aux" "is" Fun "k" (Fun "chrs" (Fun "strs" (Let (SOME " v0") (App Opapp ((Var (Short "b_input1")) (Var (Short "is")))) (Mat (Var (Short " v0")) (((Pcon (SOME (Short "None")) nil) Let (SOME " v1") (App Opapp ((Var (Long "List" (Short "null"))) (Var (Short "chrs")))) (Let (SOME " v3") (Log And (Var (Short " v1")) (App Opapp ((Var (Long "List" (Short "null"))) (Var (Short "strs"))))) (If (Var (Short " v3")) (Con (SOME (Short "None")) nil) (Let (SOME " v4") (Con (SOME (Short "::")) ((Lit (char "\\0A")) (Var (Short "chrs")))) (Let (SOME " v5") (App Opapp ((Var (Short "compress")) (Var (Short " v4")))) (Let (SOME " v6") (Con (SOME (Short "::")) ((Var (Short " v5")) (Var (Short "strs")))) (Let (SOME " v7") (App Opapp ((Var (Long "List" (Short "rev"))) (Var (Short " v6")))) (Let (SOME " v8") (App Opapp ((Var (Long "String" (Short "concat"))) (Var (Short " v7")))) (Con (SOME (Short "Some")) ((Var (Short " v8")))))))))))) ((Pcon (SOME (Short "Some")) ("c")) Let (SOME " v9") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "c")))) (Lit (char "\\0A")))) (If (Var (Short " v9")) (Let (SOME " v10") (Con (SOME (Short "::")) ((Var (Short "c")) (Var (Short "chrs")))) (Let (SOME " v11") (App Opapp ((Var (Short "compress")) (Var (Short " v10")))) (Let (SOME " v12") (Con (SOME (Short "::")) ((Var (Short " v11")) (Var (Short "strs")))) (Let (SOME " v13") (App Opapp ((Var (Long "List" (Short "rev"))) (Var (Short " v12")))) (Let (SOME " v14") (App Opapp ((Var (Long "String" (Short "concat"))) (Var (Short " v13")))) (Con (SOME (Short "Some")) ((Var (Short " v14"))))))))) (Let (SOME " v15") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "k")))) (Lit 0))) (If (Var (Short " v15")) (Let (SOME " v17") (Con (SOME (Short "::")) ((Var (Short "c")) (Var (Short "chrs")))) (Let (SOME " v18") (App Opapp ((Var (Short "compress")) (Var (Short " v17")))) (Let (SOME " v19") (Con (SOME (Short "::")) ((Var (Short " v18")) (Var (Short "strs")))) (Let (SOME " v16") (Con (SOME (Short "[]")) nil) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "b_inputLine_aux")) (Var (Short "is")))) (Lit 500))) (Var (Short " v16")))) (Var (Short " v19")))))))) (Let (SOME " v21") (Con (SOME (Short "::")) ((Var (Short "c")) (Var (Short "chrs")))) (Let (SOME " v20") (App Opapp ((App Opapp ((Var (Short "-")) (Var (Short "k")))) (Lit 1))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "b_inputLine_aux")) (Var (Short "is")))) (Var (Short " v20")))) (Var (Short " v21")))) (Var (Short "strs")))))))))))))))))) (Dlet (unk unk) "some_compress" (Fun "v3" (Fun "v4" (Fun "v2" (Fun "v1" (If (Var (Short "v4")) (Con (SOME (Short "None")) nil) (Con (SOME (Short "Some")) ((App Opapp ((Var (Long "List" (Short "rev"))) (If (App Opapp ((Var (Long "List" (Short "null"))) (Var (Short "v2")))) (Var (Short "v1")) (Con (SOME (Short "::")) ((App Opapp ((Var (Short "v3")) (App Opapp ((Var (Short "compress")) (Var (Short "v2")))))) (Var (Short "v1"))))))))))))))) (Dletrec ((1 2) (11 65)) (("b_inputLineTokens_aux" "is" Fun "f" (Fun "g" (Fun "is_emp" (Fun "chrs" (Fun "acc" (Let (SOME " v0") (App Opapp ((Var (Short "b_input1")) (Var (Short "is")))) (Mat (Var (Short " v0")) (((Pcon (SOME (Short "None")) nil) App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "some_compress")) (Var (Short "g")))) (Var (Short "is_emp")))) (Var (Short "chrs")))) (Var (Short "acc")))) ((Pcon (SOME (Short "Some")) ("c")) Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "=")) (Var (Short "c")))) (Lit (char "\\0A")))) (If (Var (Short " v1")) (Let (SOME " v2") (Con (SOME (Short "False")) nil) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "some_compress")) (Var (Short "g")))) (Var (Short " v2")))) (Var (Short "chrs")))) (Var (Short "acc"))))) (Let (SOME " v3") (App Opapp ((Var (Short "f")) (Var (Short "c")))) (If (Var (Short " v3")) (Let (SOME " v4") (App Opapp ((Var (Long "List" (Short "null"))) (Var (Short "chrs")))) (If (Var (Short " v4")) (Let (SOME " v6") (Con (SOME (Short "[]")) nil) (Let (SOME " v5") (Con (SOME (Short "False")) nil) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "b_inputLineTokens_aux")) (Var (Short "is")))) (Var (Short "f")))) (Var (Short "g")))) (Var (Short " v5")))) (Var (Short " v6")))) (Var (Short "acc")))))) (Let (SOME " v9") (App Opapp ((Var (Short "compress")) (Var (Short "chrs")))) (Let (SOME " v10") (App Opapp ((Var (Short "g")) (Var (Short " v9")))) (Let (SOME " v11") (Con (SOME (Short "::")) ((Var (Short " v10")) (Var (Short "acc")))) (Let (SOME " v8") (Con (SOME (Short "[]")) nil) (Let (SOME " v7") (Con (SOME (Short "False")) nil) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "b_inputLineTokens_aux")) (Var (Short "is")))) (Var (Short "f")))) (Var (Short "g")))) (Var (Short " v7")))) (Var (Short " v8")))) (Var (Short " v11"))))))))))) (Let (SOME " v13") (Con (SOME (Short "::")) ((Var (Short "c")) (Var (Short "chrs")))) (Let (SOME " v12") (Con (SOME (Short "False")) nil) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "b_inputLineTokens_aux")) (Var (Short "is")))) (Var (Short "f")))) (Var (Short "g")))) (Var (Short " v12")))) (Var (Short " v13")))) (Var (Short "acc"))))))))))))))))))))) ((Dletrec ((1 2) (1 67)) (("b_inputUntil" "is" Fun "chr" (Let (SOME " v0") (App Opapp ((App Opapp ((Var (Short "b_inputUntil_aux")) (Var (Short "is")))) (Var (Short "chr")))) (App Opapp ((Var (Long "String" (Short "implode"))) (Var (Short " v0")))))))) (Dletrec ((1 2) (1 50)) (("b_inputLine" "is" Let (SOME " v1") (Con (SOME (Short "[]")) nil) (Let (SOME " v0") (Con (SOME (Short "[]")) nil) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "b_inputLine_aux")) (Var (Short "is")))) (Lit 500))) (Var (Short " v0")))) (Var (Short " v1")))))))) (Dletrec ((1 2) (1 71)) (("b_inputLineTokens" "is" Fun "f" (Fun "g" (Let (SOME " v2") (Con (SOME (Short "[]")) nil) (Let (SOME " v1") (Con (SOME (Short "[]")) nil) (Let (SOME " v0") (Con (SOME (Short "True")) nil) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "b_inputLineTokens_aux")) (Var (Short "is")))) (Var (Short "f")))) (Var (Short "g")))) (Var (Short " v0")))) (Var (Short " v1")))) (Var (Short " v2"))))))))))) (Dlocal ((Dletrec ((1 2) (4 44)) (("b_inputLines_aux" "is" Fun "acc" (Let (SOME " v0") (App Opapp ((Var (Short "b_inputLine")) (Var (Short "is")))) (Mat (Var (Short " v0")) (((Pcon (SOME (Short "None")) nil) App Opapp ((Var (Long "List" (Short "rev"))) (Var (Short "acc")))) ((Pcon (SOME (Short "Some")) ("l")) Let (SOME " v1") (Con (SOME (Short "::")) ((Var (Short "l")) (Var (Short "acc")))) (App Opapp ((App Opapp ((Var (Short "b_inputLines_aux")) (Var (Short "is")))) (Var (Short " v1"))))))))))) (Dletrec ((1 2) (4 52)) (("b_inputAllTokens_aux" "is" Fun "f" (Fun "g" (Fun "acc" (Let (SOME " v0") (App Opapp ((App Opapp ((App Opapp ((Var (Short "b_inputLineTokens")) (Var (Short "is")))) (Var (Short "f")))) (Var (Short "g")))) (Mat (Var (Short " v0")) (((Pcon (SOME (Short "None")) nil) App Opapp ((Var (Long "List" (Short "rev"))) (Var (Short "acc")))) ((Pcon (SOME (Short "Some")) ("l")) Let (SOME " v1") (Con (SOME (Short "::")) ((Var (Short "l")) (Var (Short "acc")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "b_inputAllTokens_aux")) (Var (Short "is")))) (Var (Short "f")))) (Var (Short "g")))) (Var (Short " v1"))))))))))))) (Dletrec ((1 2) (4 32)) (("b_consume_rest" "is" Let (SOME " v0") (App Opapp ((Var (Short "b_input1")) (Var (Short "is")))) (Mat (Var (Short " v0")) (((Pcon (SOME (Short "None")) nil) Con NONE nil) ((Pcon (SOME (Short "Some")) ("c")) App Opapp ((Var (Short "b_consume_rest")) (Var (Short "is"))))))))) (Dletrec ((1 2) (10 47)) (("b_open_option" "stdin_or_fname" Mat (Var (Short "stdin_or_fname")) (((Pcon (SOME (Short "None")) nil) Let (SOME " v0") (Con NONE nil) (Let (SOME "is") (App Opapp ((Var (Short "b_openStdIn")) (Var (Short " v0")))) (Let (SOME " v1") (Fun "" (Mat (Var (Short "")) (((Pcon NONE nil) App Opapp ((Var (Short "b_consume_rest")) (Var (Short "is"))))))) (Let (SOME " v2") (Con NONE ((Var (Short "is")) (Var (Short " v1")))) (Con (SOME (Short "Some")) ((Var (Short " v2")))))))) ((Pcon (SOME (Short "Some")) ("fname")) Handle (Let (SOME "is") (App Opapp ((Var (Short "b_openIn")) (Var (Short "fname")))) (Let (SOME " v3") (Fun "" (Mat (Var (Short "")) (((Pcon NONE nil) App Opapp ((Var (Short "b_closeIn")) (Var (Short "is"))))))) (Let (SOME " v4") (Con NONE ((Var (Short "is")) (Var (Short " v3")))) (Con (SOME (Short "Some")) ((Var (Short " v4"))))))) (((Pcon (SOME (Short "BadFileName")) nil) Con (SOME (Short "None")) nil))))))) (Dletrec ((1 2) (4 43)) (("fold_chars_loop" "f" Fun "is" (Fun "y" (Let (SOME " v0") (App Opapp ((Var (Short "b_input1")) (Var (Short "is")))) (Mat (Var (Short " v0")) (((Pcon (SOME (Short "None")) nil) Var (Short "y")) ((Pcon (SOME (Short "Some")) ("c")) Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "f")) (Var (Short "c")))) (Var (Short "y")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "fold_chars_loop")) (Var (Short "f")))) (Var (Short "is")))) (Var (Short " v1")))))))))))) (Dletrec ((5 2) (8 43)) (("fold_lines_loop" "f" Fun "is" (Fun "y" (Let (SOME " v0") (App Opapp ((Var (Short "b_inputLine")) (Var (Short "is")))) (Mat (Var (Short " v0")) (((Pcon (SOME (Short "None")) nil) Var (Short "y")) ((Pcon (SOME (Short "Some")) ("c")) Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "f")) (Var (Short "c")))) (Var (Short "y")))) (App Opapp ((App Opapp ((App Opapp ((Var (Short "fold_lines_loop")) (Var (Short "f")))) (Var (Short "is")))) (Var (Short " v1")))))))))))) (Dletrec ((9 2) (12 48)) (("fold_tokens_loop" "g" Fun "h" (Fun "f" (Fun "is" (Fun "y" (Let (SOME " v0") (App Opapp ((App Opapp ((App Opapp ((Var (Short "b_inputLineTokens")) (Var (Short "is")))) (Var (Short "g")))) (Var (Short "h")))) (Mat (Var (Short " v0")) (((Pcon (SOME (Short "None")) nil) Var (Short "y")) ((Pcon (SOME (Short "Some")) ("c")) Let (SOME " v1") (App Opapp ((App Opapp ((Var (Short "f")) (Var (Short "c")))) (Var (Short "y")))) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "fold_tokens_loop")) (Var (Short "g")))) (Var (Short "h")))) (Var (Short "f")))) (Var (Short "is")))) (Var (Short " v1"))))))))))))))) ((Dletrec ((1 2) (2 25)) (("b_inputLines" "is" Let (SOME " v0") (Con (SOME (Short "[]")) nil) (App Opapp ((App Opapp ((Var (Short "b_inputLines_aux")) (Var (Short "is")))) (Var (Short " v0"))))))) (Dletrec ((1 2) (7 33)) (("b_inputLinesFrom" "fname" Handle (Let (SOME "is") (App Opapp ((Var (Short "b_openIn")) (Var (Short "fname")))) (Let (SOME "lines") (App Opapp ((Var (Short "b_inputLines")) (Var (Short "is")))) (Let NONE (App Opapp ((Var (Short "b_closeIn")) (Var (Short "is")))) (Con (SOME (Short "Some")) ((Var (Short "lines"))))))) (((Pcon (SOME (Short "BadFileName")) nil) Con (SOME (Short "None")) nil))))) (Dletrec ((1 2) (6 6)) (("b_inputLinesStdIn" "" Mat (Var (Short "")) (((Pcon NONE nil) Let (SOME " v0") (Con NONE nil) (Let (SOME "is") (App Opapp ((Var (Short "b_openStdIn")) (Var (Short " v0")))) (App Opapp ((Var (Short "b_inputLines")) (Var (Short "is")))))))))) (Dletrec ((1 2) (2 33)) (("b_inputAllTokens" "is" Fun "f" (Fun "g" (Let (SOME " v0") (Con (SOME (Short "[]")) nil) (App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "b_inputAllTokens_aux")) (Var (Short "is")))) (Var (Short "f")))) (Var (Short "g")))) (Var (Short " v0"))))))))) (Dletrec ((1 2) (7 33)) (("b_inputAllTokensFrom" "fname" Fun "f" (Fun "g" (Handle (Let (SOME "is") (App Opapp ((Var (Short "b_openIn")) (Var (Short "fname")))) (Let (SOME "lines") (App Opapp ((App Opapp ((App Opapp ((Var (Short "b_inputAllTokens")) (Var (Short "is")))) (Var (Short "f")))) (Var (Short "g")))) (Let NONE (App Opapp ((Var (Short "b_closeIn")) (Var (Short "is")))) (Con (SOME (Short "Some")) ((Var (Short "lines"))))))) (((Pcon (SOME (Short "BadFileName")) nil) Con (SOME (Short "None")) nil))))))) (Dletrec ((1 2) (7 6)) (("b_inputAllTokensStdIn" "f" Fun "g" (Let (SOME " v0") (Con NONE nil) (Let (SOME "is") (App Opapp ((Var (Short "b_openStdIn")) (Var (Short " v0")))) (Let (SOME "lines") (App Opapp ((App Opapp ((App Opapp ((Var (Short "b_inputAllTokens")) (Var (Short "is")))) (Var (Short "f")))) (Var (Short "g")))) (Con (SOME (Short "Some")) ((Var (Short "lines")))))))))) (Dletrec ((1 2) (9 38)) (("foldChars" "f" Fun "x" (Fun "stdin_or_fname" (Let (SOME " v0") (App Opapp ((Var (Short "b_open_option")) (Var (Short "stdin_or_fname")))) (Mat (Var (Short " v0")) (((Pcon (SOME (Short "None")) nil) Con (SOME (Short "None")) nil) ((Pcon (SOME (Short "Some")) ((Pcon NONE ("is" "close")))) Handle (Let (SOME "res") (App Opapp ((App Opapp ((App Opapp ((Var (Short "fold_chars_loop")) (Var (Short "f")))) (Var (Short "is")))) (Var (Short "x")))) (Let (SOME " v1") (Con NONE nil) (Let NONE (App Opapp ((Var (Short "close")) (Var (Short " v1")))) (Con (SOME (Short "Some")) ((Var (Short "res"))))))) (("e" Let (SOME " v2") (Con NONE nil) (Let NONE (App Opapp ((Var (Short "close")) (Var (Short " v2")))) (Raise (Var (Short "e")))))))))))))) (Dletrec ((1 2) (9 38)) (("foldLines" "f" Fun "x" (Fun "stdin_or_fname" (Let (SOME " v0") (App Opapp ((Var (Short "b_open_option")) (Var (Short "stdin_or_fname")))) (Mat (Var (Short " v0")) (((Pcon (SOME (Short "None")) nil) Con (SOME (Short "None")) nil) ((Pcon (SOME (Short "Some")) ((Pcon NONE ("is" "close")))) Handle (Let (SOME "res") (App Opapp ((App Opapp ((App Opapp ((Var (Short "fold_lines_loop")) (Var (Short "f")))) (Var (Short "is")))) (Var (Short "x")))) (Let (SOME " v1") (Con NONE nil) (Let NONE (App Opapp ((Var (Short "close")) (Var (Short " v1")))) (Con (SOME (Short "Some")) ((Var (Short "res"))))))) (("e" Let (SOME " v2") (Con NONE nil) (Let NONE (App Opapp ((Var (Short "close")) (Var (Short " v2")))) (Raise (Var (Short "e")))))))))))))) (Dletrec ((1 2) (9 38)) (("foldTokens" "g" Fun "h" (Fun "f" (Fun "x" (Fun "stdin_or_fname" (Let (SOME " v0") (App Opapp ((Var (Short "b_open_option")) (Var (Short "stdin_or_fname")))) (Mat (Var (Short " v0")) (((Pcon (SOME (Short "None")) nil) Con (SOME (Short "None")) nil) ((Pcon (SOME (Short "Some")) ((Pcon NONE ("is" "close")))) Handle (Let (SOME "res") (App Opapp ((App Opapp ((App Opapp ((App Opapp ((App Opapp ((Var (Short "fold_tokens_loop")) (Var (Short "g")))) (Var (Short "h")))) (Var (Short "f")))) (Var (Short "is")))) (Var (Short "x")))) (Let (SOME " v1") (Con NONE nil) (Let NONE (App Opapp ((Var (Short "close")) (Var (Short " v1")))) (Con (SOME (Short "Some")) ((Var (Short "res"))))))) (("e" Let (SOME " v2") (Con NONE nil) (Let NONE (App Opapp ((Var (Short "close")) (Var (Short " v2")))) (Raise (Var (Short "e")))))))))))))))))))))))))))))))))))))) (Dlet (unk unk) "print" (Var (Long "TextIO" (Short "print")))) (Dlocal ((Dletrec (unk unk) (("sum_sizes" "v4" Fun "v3" (Mat (Var (Short "v4")) (((Pcon (SOME (Short "[]")) nil) Var (Short "v3")) ((Pcon (SOME (Short "::")) ("v2" "v1")) App Opapp ((App Opapp ((Var (Short "sum_sizes")) (Var (Short "v1")))) (App OpnPlus ((App Strlen ((Var (Short "v2")))) (Var (Short "v3"))))))))))) (Dtype (unk unk) ((("'a") "app_list_ann" ("Small" (Atapp ((Atvar "'a")) (Short "app_list"))) ("Bigappend" (Atapp ((Atvar "'a")) (Short "app_list_ann")) (Atapp ((Atvar "'a")) (Short "app_list_ann"))) ("Biglist" (Atapp ((Atvar "'a")) (Short "list")))))) (Dletrec (unk unk) (("make_app_list_ann" "v12" Mat (Var (Short "v12")) (((Pcon (SOME (Short "List")) ("v2")) Let (SOME "v1") (App Opapp ((App Opapp ((Var (Short "sum_sizes")) (Var (Short "v2")))) (Lit 0))) (If (App OpbLt ((Var (Short "v1")) (Lit 2048))) (Con NONE ((Con (SOME (Short "Small")) ((Var (Short "v12")))) (Var (Short "v1")))) (Con NONE ((Con (SOME (Short "Biglist")) ((Var (Short "v2")))) (Var (Short "v1")))))) ((Pcon (SOME (Short "Append")) ("v11" "v10")) Let (SOME "v9") (App Opapp ((Var (Short "make_app_list_ann")) (Var (Short "v11")))) (Mat (Var (Short "v9")) (((Pcon NONE ("v8" "v7")) Let (SOME "v6") (App Opapp ((Var (Short "make_app_list_ann")) (Var (Short "v10")))) (Mat (Var (Short "v6")) (((Pcon NONE ("v5" "v4")) Let (SOME "v3") (App OpnPlus ((Var (Short "v7")) (Var (Short "v4")))) (If (App OpbLt ((Var (Short "v3")) (Lit 2048))) (Con NONE ((Con (SOME (Short "Small")) ((Var (Short "v12")))) (Var (Short "v3")))) (Con NONE ((Con (SOME (Short "Bigappend")) ((Var (Short "v8")) (Var (Short "v5")))) (Var (Short "v3")))))))))))) ((Pcon (SOME (Short "Nil")) nil) Con NONE ((Con (SOME (Short "Small")) ((Var (Short "v12")))) (Lit 0))))))) (Dletrec (unk unk) (("shrink" "v5" Mat (Var (Short "v5")) (((Pcon (SOME (Short "Biglist")) ("v1")) Con (SOME (Short "List")) ((Var (Short "v1")))) ((Pcon (SOME (Short "Bigappend")) ("v3" "v2")) Con (SOME (Short "Append")) ((App Opapp ((Var (Short "shrink")) (Var (Short "v3")))) (App Opapp ((Var (Short "shrink")) (Var (Short "v2")))))) ((Pcon (SOME (Short "Small")) ("v4")) Con (SOME (Short "List")) ((Con (SOME (Short "::")) ((App Strcat ((App Opapp ((Var (Short "append")) (Var (Short "v4")))))) (Con (SOME (Short "[]")) nil))))))))) (Dlet (unk unk) "str_app_list_opt" (Fun "v4" (Let (SOME "v3") (App Opapp ((Var (Short "make_app_list_ann")) (Var (Short "v4")))) (Mat (Var (Short "v3")) (((Pcon NONE ("v2" "v1")) App Opapp ((Var (Short "shrink")) (Var (Short "v2"))))))))) (Dletrec ((1 2) (5 69)) (("print_app_list_aux" "ls" Mat (Var (Short "ls")) (((Pcon (SOME (Short "Nil")) nil) Con NONE nil) ((Pcon (SOME (Short "List")) ("ls")) App Opapp ((Var (Long "TextIO" (Short "print_list"))) (Var (Short "ls")))) ((Pcon (SOME (Short "Append")) ("l1" "l2")) Let NONE (App Opapp ((Var (Short "print_app_list_aux")) (Var (Short "l1")))) (App Opapp ((Var (Short "print_app_list_aux")) (Var (Short "l2")))))))))) ((Dletrec ((1 2) (1 65)) (("print_app_list" "ls" Let (SOME " v0") (App Opapp ((Var (Short "str_app_list_opt")) (Var (Short "ls")))) (App Opapp ((Var (Short "print_app_list_aux")) (Var (Short " v0"))))))))) (Dletrec ((0 14) (0 60)) (("print_int" "i" Let (SOME " v0") (App Opapp ((Var (Long "Int" (Short "toString"))) (Var (Short "i")))) (App Opapp ((Var (Long "TextIO" (Short "print"))) (Var (Short " v0"))))))) (Dletrec ((0 15) (0 75)) (("print_pp" "pp" Let (SOME " v0") (App Opapp ((Var (Long "PrettyPrinter" (Short "toAppList"))) (Var (Short "pp")))) (App Opapp ((Var (Short "print_app_list")) (Var (Short " v0"))))))) (Dletrec ((1 0) (1 39)) (("print_ln" "s" Lannot (App Opapp ((Lannot (Var (Long "TextIO" (Short "print"))) ((1 17) (1 28))) (Lannot (App Opapp ((App Opapp ((Var (Short "^")) (Lannot (Var (Short "s")) ((1 31) (1 31))))) (Lannot (Lit "\\0A") ((1 35) (1 38))))) ((1 31) (1 38))))) ((1 17) (1 39))))) (Dmod "Set" ((Dtype ((5 4) unk) ((("'a") "set" ("Set" (Atapp ((Atvar "'a") (Atapp nil (Short "unit"))) (Short "map")))))) (Dletrec ((7 4) (7 46)) (("empty" "compare" Lannot (Con (SOME (Short "Set")) ((App Opapp ((Lannot (Var (Long "Map" (Short "empty"))) ((7 29) (7 37))) (Lannot (Var (Short "compare")) ((7 39) (7 45))))))) ((7 24) (7 45))))) (Dletrec ((9 4) (9 55)) (("insert" "" Mat (Var (Short "")) (((Pcon (SOME (Short "Set")) ("map")) Fun "el" (Lannot (Con (SOME (Short "Set")) ((App Opapp ((Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Map" (Short "insert"))) ((9 35) (9 44))) (Lannot (Var (Short "map")) ((9 46) (9 48))))) ((9 35) (9 48))) (Lannot (Var (Short "el")) ((9 50) (9 51))))) ((9 35) (9 51))) (Lannot (Con NONE nil) ((9 53) (9 54))))))) ((9 30) (9 54)))))))) (Dletrec ((11 4) (11 52)) (("delete" "" Mat (Var (Short "")) (((Pcon (SOME (Short "Set")) ("map")) Fun "el" (Lannot (Con (SOME (Short "Set")) ((App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Map" (Short "delete"))) ((11 35) (11 44))) (Lannot (Var (Short "map")) ((11 46) (11 48))))) ((11 35) (11 48))) (Lannot (Var (Short "el")) ((11 50) (11 51))))))) ((11 30) (11 51)))))))) (Dletrec ((13 4) (15 19)) (("mem" "" Mat (Var (Short "")) (((Pcon (SOME (Short "Set")) ("map")) Fun "el" (Lannot (Mat (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Map" (Short "lookup"))) ((13 33) (13 42))) (Lannot (Var (Short "map")) ((13 44) (13 46))))) ((13 33) (13 46))) (Lannot (Var (Short "el")) ((13 48) (13 49))))) ((13 33) (13 49))) (((Pcon (SOME (Short "None")) nil) Lannot (Con (SOME (Short "False")) nil) ((14 14) (14 18))) ((Pcon (SOME (Short "Some")) ((Pany))) Lannot (Con (SOME (Short "True")) nil) ((15 16) (15 19))))) ((13 27) (15 19)))))))) (Dletrec ((17 4) (17 71)) (("toList" "" Mat (Var (Short "")) (((Pcon (SOME (Short "Set")) ("map")) Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "List" (Short "map"))) ((17 27) (17 34))) (Lannot (Fun "" (Mat (Var (Short "")) (((Pcon NONE ("k" (Pany))) Lannot (Var (Short "k")) ((17 50) (17 50)))))) ((17 37) (17 50))))) ((17 27) (17 51))) (Lannot (App Opapp ((Lannot (Var (Long "Map" (Short "toAscList"))) ((17 54) (17 66))) (Lannot (Var (Short "map")) ((17 68) (17 70))))) ((17 54) (17 70))))) ((17 27) (17 71))))))) (Dletrec ((19 4) (19 91)) (("fromList" "compare" Fun "list" (Lannot (Con (SOME (Short "Set")) ((App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Map" (Short "fromList"))) ((19 37) (19 48))) (Lannot (Var (Short "compare")) ((19 50) (19 56))))) ((19 37) (19 56))) (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "List" (Short "map"))) ((19 59) (19 66))) (Lannot (Fun "k" (Lannot (Con NONE ((Lannot (Var (Short "k")) ((19 78) (19 78))) (Lannot (Con NONE nil) ((19 81) (19 82))))) ((19 77) (19 83)))) ((19 69) (19 83))))) ((19 59) (19 84))) (Lannot (Var (Short "list")) ((19 86) (19 89))))) ((19 59) (19 89))))))) ((19 32) (19 90)))))))) (Dmod "Promise" ((Dtype ((24 4) unk) ((("'a") "state" ("Pending" (Atapp ((Atfun (Atvar "'a") (Atapp nil (Short "unit")))) (Short "list"))) ("Resolved" (Atvar "'a"))))) (Dtabbrev ((25 4) (25 27)) ("'a") "t" (Atapp ((Atapp ((Atvar "'a")) (Short "state"))) (Short "ref"))) (Dtabbrev ((26 4) (26 25)) ("'a") "u" (Atfun (Atvar "'a") (Atapp nil (Short "unit")))) (Dletrec ((28 4) (28 42)) (("return" "value" Lannot (App Opref ((Lannot (Con (SOME (Short "Resolved")) ((Var (Short "value")))) ((28 28) (28 41))))) ((28 23) (28 42))))) (Dletrec ((30 4) (32 55)) (("upon" "t" Fun "f" (Lannot (Mat (Lannot (App Opapp ((Lannot (Var (Short "!")) ((30 24) (30 24))) (Lannot (Var (Short "t")) ((30 25) (30 25))))) ((30 24) (30 25))) (((Pcon (SOME (Short "Resolved")) ("value")) Lannot (App Opapp ((Lannot (Var (Short "f")) ((31 24) (31 24))) (Lannot (Var (Short "value")) ((31 26) (31 30))))) ((31 24) (31 30))) ((Pcon (SOME (Short "Pending")) ("callbacks")) Lannot (App Opapp ((App Opapp ((Var (Short ":=")) (Lannot (Var (Short "t")) ((32 27) (32 27))))) (Lannot (Con (SOME (Short "Pending")) ((Con (SOME (Short "::")) ((Lannot (Var (Short "f")) ((32 41) (32 41))) (Lannot (Var (Short "callbacks")) ((32 46) (32 54))))))) ((32 32) (32 54))))) ((32 27) (32 55))))) ((30 19) (32 55)))))) (Dletrec ((34 4) (36 22)) (("poll" "t" Lannot (Mat (Lannot (App Opapp ((Lannot (Var (Short "!")) ((34 22) (34 22))) (Lannot (Var (Short "t")) ((34 23) (34 23))))) ((34 22) (34 23))) (((Pcon (SOME (Short "Resolved")) ("v")) Lannot (Con (SOME (Short "Some")) ((Var (Short "v")))) ((35 20) (35 25))) ((Pcon (SOME (Short "Pending")) ((Pany))) Lannot (Con (SOME (Short "None")) nil) ((36 19) (36 22))))) ((34 17) (36 22))))) (Dlocal ((Dexn ((39 6) unk) "Resolve" ((Atapp nil (Short "string")))) (Dletrec ((41 6) (46 8)) (("resolve" "t" Fun "value" (Lannot (Mat (Lannot (App Opapp ((Lannot (Var (Short "!")) ((41 33) (41 33))) (Lannot (Var (Short "t")) ((41 34) (41 34))))) ((41 33) (41 34))) (((Pcon (SOME (Short "Resolved")) ((Pany))) Lannot (Raise (Lannot (Con (SOME (Short "Resolve")) ((Lit "Promise.resolve: already resolved"))) ((42 28) (42 70)))) ((42 22) (42 70))) ((Pcon (SOME (Short "Pending")) ("callbacks")) Lannot (Let NONE (Lannot (App Opapp ((App Opapp ((Var (Short ":=")) (Lannot (Var (Short "t")) ((44 10) (44 10))))) (Lannot (Con (SOME (Short "Resolved")) ((Var (Short "value")))) ((44 15) (44 28))))) ((44 10) (44 28))) (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "List" (Short "app"))) ((45 10) (45 17))) (Lannot (Fun "f" (Lannot (App Opapp ((Lannot (Var (Short "f")) ((45 28) (45 28))) (Lannot (Var (Short "value")) ((45 30) (45 34))))) ((45 28) (45 34)))) ((45 20) (45 34))))) ((45 10) (45 35))) (Lannot (Var (Short "callbacks")) ((45 37) (45 45))))) ((45 10) (45 45)))) ((43 29) (46 8))))) ((41 28) (46 8)))))) (Dletrec ((48 6) (48 41)) (("chain" "t" Fun "t'" (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Short "upon")) ((48 23) (48 26))) (Lannot (Var (Short "t")) ((48 28) (48 28))))) ((48 23) (48 28))) (Lannot (App Opapp ((Lannot (Var (Short "resolve")) ((48 31) (48 37))) (Lannot (Var (Short "t'")) ((48 39) (48 40))))) ((48 31) (48 40))))) ((48 23) (48 41))))))) ((Dletrec ((50 6) (56 10)) (("wait" "" Mat (Var (Short "")) (((Pcon NONE nil) Lannot (Let (SOME "t") (Lannot (App Opref ((Lannot (Con (SOME (Short "Pending")) ((Con (SOME (Short "[]")) nil))) ((52 23) (52 32))))) ((52 18) (52 33))) (Let (SOME "u") (Lannot (App Opapp ((Lannot (Var (Short "resolve")) ((53 18) (53 24))) (Lannot (Var (Short "t")) ((53 26) (53 26))))) ((53 18) (53 26))) (Lannot (Con NONE ((Lannot (Var (Short "t")) ((55 11) (55 11))) (Lannot (Var (Short "u")) ((55 14) (55 14))))) ((55 10) (55 15))))) ((51 8) (56 10))))))) (Dletrec ((58 6) (68 8)) (("bind" "t" Fun "f" (Lannot (Mat (Lannot (App Opapp ((Lannot (Var (Short "!")) ((58 26) (58 26))) (Lannot (Var (Short "t")) ((58 27) (58 27))))) ((58 26) (58 27))) (((Pcon (SOME (Short "Resolved")) ("v")) Lannot (App Opapp ((Lannot (Var (Short "f")) ((59 22) (59 22))) (Lannot (Var (Short "v")) ((59 24) (59 24))))) ((59 22) (59 24))) ((Pcon (SOME (Short "Pending")) ("callbacks")) Lannot (Let (SOME "t'") (Lannot (App Opref ((Lannot (Con (SOME (Short "Pending")) ((Con (SOME (Short "[]")) nil))) ((62 26) (62 35))))) ((62 21) (62 36))) (Letrec (("callback" "v" Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Short "chain")) ((63 29) (63 33))) (Lannot (App Opapp ((Lannot (Var (Short "f")) ((63 36) (63 36))) (Lannot (Var (Short "v")) ((63 38) (63 38))))) ((63 36) (63 38))))) ((63 29) (63 39))) (Lannot (Var (Short "t'")) ((63 41) (63 42))))) ((63 29) (63 42)))) (Let NONE (Lannot (App Opapp ((App Opapp ((Var (Short ":=")) (Lannot (Var (Short "t")) ((65 12) (65 12))))) (Lannot (Con (SOME (Short "Pending")) ((Con (SOME (Short "::")) ((Lannot (Var (Short "callback")) ((65 26) (65 33))) (Lannot (Var (Short "callbacks")) ((65 38) (65 46))))))) ((65 17) (65 46))))) ((65 12) (65 47))) (Lannot (Var (Short "t'")) ((66 12) (66 13)))))) ((61 10) (67 12))))) ((58 21) (68 8)))))) (Dletrec ((70 6) (70 48)) (("map" "t" Fun "f" (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Short "bind")) ((70 20) (70 23))) (Lannot (Var (Short "t")) ((70 25) (70 25))))) ((70 20) (70 25))) (Lannot (Fun "v" (Lannot (App Opapp ((Lannot (Var (Short "return")) ((70 36) (70 41))) (Lannot (App Opapp ((Lannot (Var (Short "f")) ((70 44) (70 44))) (Lannot (Var (Short "v")) ((70 46) (70 46))))) ((70 44) (70 46))))) ((70 36) (70 47)))) ((70 28) (70 47))))) ((70 20) (70 48)))))) (Dletrec ((72 6) (78 10)) (("both" "t1" Fun "t2" (Lannot (Mat (Lannot (App Opapp ((Lannot (Var (Short "wait")) ((74 23) (74 26))) (Lannot (Con NONE nil) ((74 28) (74 29))))) ((74 23) (74 29))) (((Pcon NONE ("t" "u")) Let NONE (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Short "upon")) ((75 18) (75 21))) (Lannot (Var (Short "t1")) ((75 23) (75 24))))) ((75 18) (75 24))) (Lannot (Fun "v1" (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Short "upon")) ((75 36) (75 39))) (Lannot (Var (Short "t2")) ((75 41) (75 42))))) ((75 36) (75 42))) (Lannot (Fun "v2" (Lannot (App Opapp ((Lannot (Var (Short "u")) ((75 54) (75 54))) (Lannot (Con NONE ((Lannot (Var (Short "v1")) ((75 57) (75 58))) (Lannot (Var (Short "v2")) ((75 61) (75 62))))) ((75 56) (75 63))))) ((75 54) (75 63)))) ((75 45) (75 63))))) ((75 36) (75 64)))) ((75 27) (75 64))))) ((75 18) (75 65))) (Lannot (Var (Short "t")) ((77 10) (77 10)))))) ((73 8) (78 10)))))))))) (Dmod "ByteHelper" ((Dletrec ((84 4) (97 8)) (("w82n" "w8Array" Fun "offset" (Lannot (Let (SOME "w64") (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (App Opapp ((Lannot (App Opapp ((Lannot (App Opapp ((Lannot (App Opapp ((Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word64" (Short "concatAll"))) ((86 18) (86 33))) (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8Array" (Short "sub"))) ((87 11) (87 24))) (Lannot (Var (Short "w8Array")) ((87 26) (87 32))))) ((87 11) (87 32))) (Lannot (App Opapp ((App Opapp ((Var (Short "+")) (Lannot (Var (Short "offset")) ((87 35) (87 40))))) (Lannot (Lit 7) ((87 44) (87 44))))) ((87 35) (87 44))))) ((87 11) (87 45))))) ((86 18) (87 46))) (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8Array" (Short "sub"))) ((88 11) (88 24))) (Lannot (Var (Short "w8Array")) ((88 26) (88 32))))) ((88 11) (88 32))) (Lannot (App Opapp ((App Opapp ((Var (Short "+")) (Lannot (Var (Short "offset")) ((88 35) (88 40))))) (Lannot (Lit 6) ((88 44) (88 44))))) ((88 35) (88 44))))) ((88 11) (88 45))))) ((86 18) (88 46))) (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8Array" (Short "sub"))) ((89 11) (89 24))) (Lannot (Var (Short "w8Array")) ((89 26) (89 32))))) ((89 11) (89 32))) (Lannot (App Opapp ((App Opapp ((Var (Short "+")) (Lannot (Var (Short "offset")) ((89 35) (89 40))))) (Lannot (Lit 5) ((89 44) (89 44))))) ((89 35) (89 44))))) ((89 11) (89 45))))) ((86 18) (89 46))) (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8Array" (Short "sub"))) ((90 11) (90 24))) (Lannot (Var (Short "w8Array")) ((90 26) (90 32))))) ((90 11) (90 32))) (Lannot (App Opapp ((App Opapp ((Var (Short "+")) (Lannot (Var (Short "offset")) ((90 35) (90 40))))) (Lannot (Lit 4) ((90 44) (90 44))))) ((90 35) (90 44))))) ((90 11) (90 45))))) ((86 18) (90 46))) (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8Array" (Short "sub"))) ((91 11) (91 24))) (Lannot (Var (Short "w8Array")) ((91 26) (91 32))))) ((91 11) (91 32))) (Lannot (App Opapp ((App Opapp ((Var (Short "+")) (Lannot (Var (Short "offset")) ((91 35) (91 40))))) (Lannot (Lit 3) ((91 44) (91 44))))) ((91 35) (91 44))))) ((91 11) (91 45))))) ((86 18) (91 46))) (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8Array" (Short "sub"))) ((92 11) (92 24))) (Lannot (Var (Short "w8Array")) ((92 26) (92 32))))) ((92 11) (92 32))) (Lannot (App Opapp ((App Opapp ((Var (Short "+")) (Lannot (Var (Short "offset")) ((92 35) (92 40))))) (Lannot (Lit 2) ((92 44) (92 44))))) ((92 35) (92 44))))) ((92 11) (92 45))))) ((86 18) (92 46))) (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8Array" (Short "sub"))) ((93 11) (93 24))) (Lannot (Var (Short "w8Array")) ((93 26) (93 32))))) ((93 11) (93 32))) (Lannot (App Opapp ((App Opapp ((Var (Short "+")) (Lannot (Var (Short "offset")) ((93 35) (93 40))))) (Lannot (Lit 1) ((93 44) (93 44))))) ((93 35) (93 44))))) ((93 11) (93 45))))) ((86 18) (93 46))) (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8Array" (Short "sub"))) ((94 11) (94 24))) (Lannot (Var (Short "w8Array")) ((94 26) (94 32))))) ((94 11) (94 32))) (Lannot (Var (Short "offset")) ((94 34) (94 39))))) ((94 11) (94 39))))) ((86 18) (94 40))) (Lannot (App Opapp ((Lannot (Var (Long "Word64" (Short "toInt"))) ((96 8) (96 19))) (Lannot (Var (Short "w64")) ((96 21) (96 23))))) ((96 8) (96 23)))) ((85 6) (97 8)))))) (Dletrec ((99 4) (113 8)) (("n2w8" "n" Fun "word8Array" (Fun "offset" (Lannot (Letrec (("getByte" "w64" Fun "i" (Lannot (App Opapp ((Lannot (Var (Long "Word8" (Short "fromInt"))) ((101 28) (101 40))) (Lannot (App Opapp ((Lannot (Var (Long "Word64" (Short "toInt"))) ((101 43) (101 54))) (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word64" (Short ">>"))) ((101 57) (101 65))) (Lannot (Var (Short "w64")) ((101 67) (101 69))))) ((101 57) (101 69))) (Lannot (App Opapp ((App Opapp ((Var (Short "*")) (Lannot (Var (Short "i")) ((101 72) (101 72))))) (Lannot (Lit 8) ((101 76) (101 76))))) ((101 72) (101 76))))) ((101 57) (101 77))))) ((101 43) (101 78))))) ((101 28) (101 79))))) (Let (SOME "w64") (Lannot (App Opapp ((Lannot (Var (Long "Word64" (Short "fromInt"))) ((102 18) (102 31))) (Lannot (Var (Short "n")) ((102 33) (102 33))))) ((102 18) (102 33))) (Let NONE (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8Array" (Short "update"))) ((103 16) (103 32))) (Lannot (Var (Short "word8Array")) ((103 34) (103 43))))) ((103 16) (103 43))) (Lannot (Var (Short "offset")) ((103 45) (103 50))))) ((103 16) (103 50))) (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Short "getByte")) ((103 53) (103 59))) (Lannot (Var (Short "w64")) ((103 61) (103 63))))) ((103 53) (103 63))) (Lannot (Lit 7) ((103 65) (103 65))))) ((103 53) (103 65))))) ((103 16) (103 66))) (Let NONE (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8Array" (Short "update"))) ((104 16) (104 32))) (Lannot (Var (Short "word8Array")) ((104 34) (104 43))))) ((104 16) (104 43))) (Lannot (App Opapp ((App Opapp ((Var (Short "+")) (Lannot (Var (Short "offset")) ((104 46) (104 51))))) (Lannot (Lit 1) ((104 55) (104 55))))) ((104 46) (104 55))))) ((104 16) (104 56))) (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Short "getByte")) ((104 59) (104 65))) (Lannot (Var (Short "w64")) ((104 67) (104 69))))) ((104 59) (104 69))) (Lannot (Lit 6) ((104 71) (104 71))))) ((104 59) (104 71))))) ((104 16) (104 72))) (Let NONE (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8Array" (Short "update"))) ((105 16) (105 32))) (Lannot (Var (Short "word8Array")) ((105 34) (105 43))))) ((105 16) (105 43))) (Lannot (App Opapp ((App Opapp ((Var (Short "+")) (Lannot (Var (Short "offset")) ((105 46) (105 51))))) (Lannot (Lit 2) ((105 55) (105 55))))) ((105 46) (105 55))))) ((105 16) (105 56))) (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Short "getByte")) ((105 59) (105 65))) (Lannot (Var (Short "w64")) ((105 67) (105 69))))) ((105 59) (105 69))) (Lannot (Lit 5) ((105 71) (105 71))))) ((105 59) (105 71))))) ((105 16) (105 72))) (Let NONE (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8Array" (Short "update"))) ((106 16) (106 32))) (Lannot (Var (Short "word8Array")) ((106 34) (106 43))))) ((106 16) (106 43))) (Lannot (App Opapp ((App Opapp ((Var (Short "+")) (Lannot (Var (Short "offset")) ((106 46) (106 51))))) (Lannot (Lit 3) ((106 55) (106 55))))) ((106 46) (106 55))))) ((106 16) (106 56))) (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Short "getByte")) ((106 59) (106 65))) (Lannot (Var (Short "w64")) ((106 67) (106 69))))) ((106 59) (106 69))) (Lannot (Lit 4) ((106 71) (106 71))))) ((106 59) (106 71))))) ((106 16) (106 72))) (Let NONE (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8Array" (Short "update"))) ((107 16) (107 32))) (Lannot (Var (Short "word8Array")) ((107 34) (107 43))))) ((107 16) (107 43))) (Lannot (App Opapp ((App Opapp ((Var (Short "+")) (Lannot (Var (Short "offset")) ((107 46) (107 51))))) (Lannot (Lit 4) ((107 55) (107 55))))) ((107 46) (107 55))))) ((107 16) (107 56))) (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Short "getByte")) ((107 59) (107 65))) (Lannot (Var (Short "w64")) ((107 67) (107 69))))) ((107 59) (107 69))) (Lannot (Lit 3) ((107 71) (107 71))))) ((107 59) (107 71))))) ((107 16) (107 72))) (Let NONE (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8Array" (Short "update"))) ((108 16) (108 32))) (Lannot (Var (Short "word8Array")) ((108 34) (108 43))))) ((108 16) (108 43))) (Lannot (App Opapp ((App Opapp ((Var (Short "+")) (Lannot (Var (Short "offset")) ((108 46) (108 51))))) (Lannot (Lit 5) ((108 55) (108 55))))) ((108 46) (108 55))))) ((108 16) (108 56))) (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Short "getByte")) ((108 59) (108 65))) (Lannot (Var (Short "w64")) ((108 67) (108 69))))) ((108 59) (108 69))) (Lannot (Lit 2) ((108 71) (108 71))))) ((108 59) (108 71))))) ((108 16) (108 72))) (Let NONE (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8Array" (Short "update"))) ((109 16) (109 32))) (Lannot (Var (Short "word8Array")) ((109 34) (109 43))))) ((109 16) (109 43))) (Lannot (App Opapp ((App Opapp ((Var (Short "+")) (Lannot (Var (Short "offset")) ((109 46) (109 51))))) (Lannot (Lit 6) ((109 55) (109 55))))) ((109 46) (109 55))))) ((109 16) (109 56))) (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Short "getByte")) ((109 59) (109 65))) (Lannot (Var (Short "w64")) ((109 67) (109 69))))) ((109 59) (109 69))) (Lannot (Lit 1) ((109 71) (109 71))))) ((109 59) (109 71))))) ((109 16) (109 72))) (Let NONE (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8Array" (Short "update"))) ((110 16) (110 32))) (Lannot (Var (Short "word8Array")) ((110 34) (110 43))))) ((110 16) (110 43))) (Lannot (App Opapp ((App Opapp ((Var (Short "+")) (Lannot (Var (Short "offset")) ((110 46) (110 51))))) (Lannot (Lit 7) ((110 55) (110 55))))) ((110 46) (110 55))))) ((110 16) (110 56))) (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Short "getByte")) ((110 59) (110 65))) (Lannot (Var (Short "w64")) ((110 67) (110 69))))) ((110 59) (110 69))) (Lannot (Lit 0) ((110 71) (110 71))))) ((110 59) (110 71))))) ((110 16) (110 72))) (Lannot (Con NONE nil) ((112 8) (112 9))))))))))))) ((100 6) (113 8))))))) (Dletrec ((115 4) (115 78)) (("toString" "bytes" Lannot (App Opapp ((Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8Array" (Short "substring"))) ((115 25) (115 44))) (Lannot (Var (Short "bytes")) ((115 46) (115 50))))) ((115 25) (115 50))) (Lannot (Lit 0) ((115 52) (115 52))))) ((115 25) (115 52))) (Lannot (App Opapp ((Lannot (Var (Long "Word8Array" (Short "length"))) ((115 55) (115 71))) (Lannot (Var (Short "bytes")) ((115 73) (115 77))))) ((115 55) (115 77))))) ((115 25) (115 78))))) (Dletrec ((117 4) (128 8)) (("editBit" "bytes" Fun "i" (Fun "value" (Lannot (Let (SOME "byteIndex") (Lannot (App Opapp ((App Opapp ((Var (Short "div")) (Lannot (Var (Short "i")) ((119 24) (119 24))))) (Lannot (Lit 8) ((119 30) (119 30))))) ((119 24) (119 30))) (Let (SOME "bitIndex") (Lannot (App Opapp ((App Opapp ((Var (Short "mod")) (Lannot (Var (Short "i")) ((120 23) (120 23))))) (Lannot (Lit 8) ((120 29) (120 29))))) ((120 23) (120 29))) (Let (SOME "byte") (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8Array" (Short "sub"))) ((121 19) (121 32))) (Lannot (Var (Short "bytes")) ((121 34) (121 38))))) ((121 19) (121 38))) (Lannot (Var (Short "byteIndex")) ((121 40) (121 48))))) ((121 19) (121 48))) (Let (SOME "newByte") (Lannot (If (Lannot (Var (Short "value")) ((122 25) (122 29))) (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8" (Short "orb"))) ((123 10) (123 18))) (Lannot (Var (Short "byte")) ((123 20) (123 23))))) ((123 10) (123 23))) (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8" (Short "<<"))) ((123 26) (123 33))) (Lannot (App Opapp ((Lannot (Var (Long "Word8" (Short "fromInt"))) ((123 36) (123 48))) (Lannot (Lit 1) ((123 50) (123 50))))) ((123 36) (123 50))))) ((123 26) (123 51))) (Lannot (Var (Short "bitIndex")) ((123 53) (123 60))))) ((123 26) (123 60))))) ((123 10) (123 61))) (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8" (Short "andb"))) ((125 10) (125 19))) (Lannot (Var (Short "byte")) ((125 21) (125 24))))) ((125 10) (125 24))) (Lannot (App Opapp ((Lannot (Var (Long "Word8" (Short "notb"))) ((125 27) (125 36))) (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8" (Short "<<"))) ((125 39) (125 46))) (Lannot (App Opapp ((Lannot (Var (Long "Word8" (Short "fromInt"))) ((125 49) (125 61))) (Lannot (Lit 1) ((125 63) (125 63))))) ((125 49) (125 63))))) ((125 39) (125 64))) (Lannot (Var (Short "bitIndex")) ((125 66) (125 73))))) ((125 39) (125 73))))) ((125 27) (125 74))))) ((125 10) (125 75)))) ((122 22) (125 75))) (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8Array" (Short "update"))) ((127 8) (127 24))) (Lannot (Var (Short "bytes")) ((127 26) (127 30))))) ((127 8) (127 30))) (Lannot (Var (Short "byteIndex")) ((127 32) (127 40))))) ((127 8) (127 40))) (Lannot (Var (Short "newByte")) ((127 42) (127 48))))) ((127 8) (127 48))))))) ((118 6) (128 8))))))) (Dletrec ((130 4) (137 8)) (("readBit" "bytes" Fun "i" (Lannot (Let (SOME "byteIndex") (Lannot (App Opapp ((App Opapp ((Var (Short "div")) (Lannot (Var (Short "i")) ((132 24) (132 24))))) (Lannot (Lit 8) ((132 30) (132 30))))) ((132 24) (132 30))) (Let (SOME "bitIndex") (Lannot (App Opapp ((App Opapp ((Var (Short "mod")) (Lannot (Var (Short "i")) ((133 23) (133 23))))) (Lannot (Lit 8) ((133 29) (133 29))))) ((133 23) (133 29))) (Let (SOME "byte") (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8Array" (Short "sub"))) ((134 19) (134 32))) (Lannot (Var (Short "bytes")) ((134 34) (134 38))))) ((134 19) (134 38))) (Lannot (Var (Short "byteIndex")) ((134 40) (134 48))))) ((134 19) (134 48))) (Lannot (App Opapp ((App Opapp ((Var (Short "<>")) (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8" (Short "andb"))) ((136 9) (136 18))) (Lannot (Var (Short "byte")) ((136 20) (136 23))))) ((136 9) (136 23))) (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8" (Short "<<"))) ((136 26) (136 33))) (Lannot (App Opapp ((Lannot (Var (Long "Word8" (Short "fromInt"))) ((136 36) (136 48))) (Lannot (Lit 1) ((136 50) (136 50))))) ((136 36) (136 50))))) ((136 26) (136 51))) (Lannot (Var (Short "bitIndex")) ((136 53) (136 60))))) ((136 26) (136 60))))) ((136 9) (136 61))))) (Lannot (App Opapp ((Lannot (Var (Long "Word8" (Short "fromInt"))) ((136 68) (136 80))) (Lannot (Lit 0) ((136 82) (136 82))))) ((136 68) (136 82))))) ((136 8) (136 83)))))) ((131 6) (137 8)))))))) (Dmod "FdSet" ((Dtype ((142 4) unk) ((nil "t" ("FdSet" (Atapp ((Atapp nil (Short "int"))) (Long "Set" (Short "set"))))))) (Dlet ((144 4) (150 8)) "maxSize" (Lannot (Let (SOME "iobuff") (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8Array" (Short "array"))) ((146 21) (146 36))) (Lannot (Lit 8) ((146 38) (146 38))))) ((146 21) (146 38))) (Lannot (App Opapp ((Lannot (Var (Long "Word8" (Short "fromInt"))) ((146 41) (146 53))) (Lannot (Lit 0) ((146 55) (146 55))))) ((146 41) (146 55))))) ((146 21) (146 56))) (Let NONE (Lannot (App (FFI . "get_fd_set_size") ((Lannot (Lit "") ((147 37) (147 38))) (Lannot (Var (Short "iobuff")) ((147 40) (147 45))))) ((147 16) (147 45))) (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "ByteHelper" (Short "w82n"))) ((149 8) (149 22))) (Lannot (Var (Short "iobuff")) ((149 24) (149 29))))) ((149 8) (149 29))) (Lannot (Lit 0) ((149 31) (149 31))))) ((149 8) (149 31))))) ((145 6) (150 8)))) (Dlet ((152 4) (152 31)) "byteSize" (Lannot (App Opapp ((App Opapp ((Var (Short "div")) (Lannot (Var (Short "maxSize")) ((152 19) (152 25))))) (Lannot (Lit 8) ((152 31) (152 31))))) ((152 19) (152 31)))) (Dlet ((154 4) (154 44)) "empty" (Lannot (Con (SOME (Short "FdSet")) ((App Opapp ((Lannot (Var (Long "Set" (Short "empty"))) ((154 23) (154 31))) (Lannot (Var (Long "Int" (Short "compare"))) ((154 33) (154 43))))))) ((154 16) (154 43)))) (Dletrec ((156 4) (156 56)) (("insert" "" Mat (Var (Short "")) (((Pcon (SOME (Short "FdSet")) ("set")) Fun "fd" (Lannot (Con (SOME (Short "FdSet")) ((App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Set" (Short "insert"))) ((156 39) (156 48))) (Lannot (Var (Short "set")) ((156 50) (156 52))))) ((156 39) (156 52))) (Lannot (Var (Short "fd")) ((156 54) (156 55))))))) ((156 32) (156 55)))))))) (Dletrec ((158 4) (158 42)) (("mem" "" Mat (Var (Short "")) (((Pcon (SOME (Short "FdSet")) ("set")) Fun "fd" (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Set" (Short "mem"))) ((158 29) (158 35))) (Lannot (Var (Short "set")) ((158 37) (158 39))))) ((158 29) (158 39))) (Lannot (Var (Short "fd")) ((158 41) (158 42))))) ((158 29) (158 42)))))))) (Dletrec ((160 4) (160 56)) (("delete" "" Mat (Var (Short "")) (((Pcon (SOME (Short "FdSet")) ("set")) Fun "fd" (Lannot (Con (SOME (Short "FdSet")) ((App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Set" (Short "delete"))) ((160 39) (160 48))) (Lannot (Var (Short "set")) ((160 50) (160 52))))) ((160 39) (160 52))) (Lannot (Var (Short "fd")) ((160 54) (160 55))))))) ((160 32) (160 55)))))))) (Dletrec ((162 4) (162 60)) (("fromList" "list" Lannot (Con (SOME (Short "FdSet")) ((App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Set" (Short "fromList"))) ((162 31) (162 42))) (Lannot (Var (Long "Int" (Short "compare"))) ((162 44) (162 54))))) ((162 31) (162 54))) (Lannot (Var (Short "list")) ((162 56) (162 59))))))) ((162 24) (162 59))))) (Dletrec ((164 4) (164 42)) (("toList" "" Mat (Var (Short "")) (((Pcon (SOME (Short "FdSet")) ("set")) Lannot (App Opapp ((Lannot (Var (Long "Set" (Short "toList"))) ((164 29) (164 38))) (Lannot (Var (Short "set")) ((164 40) (164 42))))) ((164 29) (164 42))))))) (Dletrec ((166 4) (172 8)) (("toBytes" "" Mat (Var (Short "")) (((Pcon (SOME (Short "FdSet")) ("set")) Lannot (Let (SOME "bytes") (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8Array" (Short "array"))) ((168 20) (168 35))) (Lannot (Var (Short "byteSize")) ((168 37) (168 44))))) ((168 20) (168 44))) (Lannot (App Opapp ((Lannot (Var (Long "Word8" (Short "fromInt"))) ((168 47) (168 59))) (Lannot (Lit 0) ((168 61) (168 61))))) ((168 47) (168 61))))) ((168 20) (168 62))) (Let NONE (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "List" (Short "app"))) ((169 16) (169 23))) (Lannot (Fun "fd" (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "ByteHelper" (Short "editBit"))) ((169 35) (169 52))) (Lannot (Var (Short "bytes")) ((169 54) (169 58))))) ((169 35) (169 58))) (Lannot (Var (Short "fd")) ((169 60) (169 61))))) ((169 35) (169 61))) (Lannot (Con (SOME (Short "True")) nil) ((169 63) (169 66))))) ((169 35) (169 66)))) ((169 26) (169 66))))) ((169 16) (169 67))) (Lannot (App Opapp ((Lannot (Var (Long "Set" (Short "toList"))) ((169 70) (169 79))) (Lannot (Var (Short "set")) ((169 81) (169 83))))) ((169 70) (169 83))))) ((169 16) (169 84))) (Lannot (Var (Short "bytes")) ((171 8) (171 12))))) ((167 6) (172 8))))))) (Dletrec ((174 4) (180 8)) (("fromBytes" "bytes" Lannot (Let (SOME "allFds") (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "List" (Short "genlist"))) ((176 21) (176 32))) (Lannot (Fun "i" (Lannot (Var (Short "i")) ((176 43) (176 43)))) ((176 35) (176 43))))) ((176 21) (176 44))) (Lannot (Var (Short "maxSize")) ((176 46) (176 52))))) ((176 21) (176 52))) (Letrec (("isSet" "fd" Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "ByteHelper" (Short "readBit"))) ((177 23) (177 40))) (Lannot (Var (Short "bytes")) ((177 42) (177 46))))) ((177 23) (177 46))) (Lannot (Var (Short "fd")) ((177 48) (177 49))))) ((177 23) (177 49)))) (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "List" (Short "foldl"))) ((179 8) (179 17))) (Lannot (Fun "fd" (Lannot (Fun "set" (Lannot (If (Lannot (App Opapp ((Lannot (Var (Short "isSet")) ((179 42) (179 46))) (Lannot (Var (Short "fd")) ((179 48) (179 49))))) ((179 42) (179 49))) (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Short "insert")) ((179 56) (179 61))) (Lannot (Var (Short "set")) ((179 63) (179 65))))) ((179 56) (179 65))) (Lannot (Var (Short "fd")) ((179 67) (179 68))))) ((179 56) (179 68))) (Lannot (Var (Short "set")) ((179 75) (179 77)))) ((179 39) (179 77)))) ((179 29) (179 77)))) ((179 20) (179 77))))) ((179 8) (179 78))) (Lannot (Var (Short "empty")) ((179 80) (179 84))))) ((179 8) (179 84))) (Lannot (Var (Short "allFds")) ((179 86) (179 91))))) ((179 8) (179 91))))) ((175 6) (180 8))))))) (Dmod "Time" ((Dtabbrev ((185 4) (185 26)) nil "milliseconds" (Atapp nil (Short "int"))) (Dexn ((187 4) unk) "GetTimeFailed" nil) (Dletrec ((189 4) (196 8)) (("nowMilliseconds" "" Mat (Var (Short "")) (((Pcon NONE nil) Lannot (Let (SOME "outputBuff") (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8Array" (Short "array"))) ((190 27) (190 42))) (Lannot (Lit 9) ((190 44) (190 44))))) ((190 27) (190 44))) (Lannot (App Opapp ((Lannot (Var (Long "Word8" (Short "fromInt"))) ((190 47) (190 59))) (Lannot (Lit 0) ((190 61) (190 61))))) ((190 47) (190 61))))) ((190 27) (190 62))) (Let NONE (Lannot (App (FFI . "now") ((Lannot (Lit "") ((191 27) (191 28))) (Lannot (Var (Short "outputBuff")) ((191 30) (191 39))))) ((191 18) (191 39))) (Lannot (If (Lannot (App Opapp ((App Opapp ((Var (Short "=")) (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8Array" (Short "sub"))) ((193 11) (193 24))) (Lannot (Var (Short "outputBuff")) ((193 26) (193 35))))) ((193 11) (193 35))) (Lannot (Lit 0) ((193 37) (193 37))))) ((193 11) (193 37))))) (Lannot (App Opapp ((Lannot (Var (Long "Word8" (Short "fromInt"))) ((193 41) (193 53))) (Lannot (Lit 1) ((193 55) (193 55))))) ((193 41) (193 55))))) ((193 11) (193 55))) (Lannot (Raise (Lannot (Con (SOME (Short "GetTimeFailed")) nil) ((194 19) (194 31)))) ((194 13) (194 31))) (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "ByteHelper" (Short "w82n"))) ((195 13) (195 27))) (Lannot (Var (Short "outputBuff")) ((195 29) (195 38))))) ((195 13) (195 38))) (Lannot (Lit 1) ((195 40) (195 40))))) ((195 13) (195 40)))) ((193 8) (195 40))))) ((190 6) (196 8))))))))) (Dmod "Unix" ((Dexn ((201 4) unk) "FFIError" ((Atapp nil (Short "string")))) (Dletrec ((203 4) (226 8)) (("select" "readFds" Fun "writeFds" (Fun "exceptFds" (Fun "timeout" (Lannot (Let (SOME "readBytes") (Lannot (App Opapp ((Lannot (Var (Long "FdSet" (Short "toBytes"))) ((205 24) (205 36))) (Lannot (Var (Short "readFds")) ((205 38) (205 44))))) ((205 24) (205 44))) (Let (SOME "writeBytes") (Lannot (App Opapp ((Lannot (Var (Long "FdSet" (Short "toBytes"))) ((206 25) (206 37))) (Lannot (Var (Short "writeFds")) ((206 39) (206 46))))) ((206 25) (206 46))) (Let (SOME "exceptBytes") (Lannot (App Opapp ((Lannot (Var (Long "FdSet" (Short "toBytes"))) ((207 26) (207 38))) (Lannot (Var (Short "exceptFds")) ((207 40) (207 48))))) ((207 26) (207 48))) (Let (SOME "inputBuff") (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8Array" (Short "array"))) ((208 24) (208 39))) (Lannot (App Opapp ((App Opapp ((Var (Short "+")) (Lannot (App Opapp ((App Opapp ((Var (Short "*")) (Lannot (Lit 3) ((208 42) (208 42))))) (Lannot (Var (Long "FdSet" (Short "byteSize"))) ((208 46) (208 59))))) ((208 42) (208 59))))) (Lannot (Lit 8) ((208 63) (208 63))))) ((208 42) (208 63))))) ((208 24) (208 64))) (Lannot (App Opapp ((Lannot (Var (Long "Word8" (Short "fromInt"))) ((208 67) (208 79))) (Lannot (Lit 0) ((208 81) (208 81))))) ((208 67) (208 81))))) ((208 24) (208 82))) (Let NONE (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "ByteHelper" (Short "n2w8"))) ((209 16) (209 30))) (Lannot (Var (Short "timeout")) ((209 32) (209 38))))) ((209 16) (209 38))) (Lannot (Var (Short "inputBuff")) ((209 40) (209 48))))) ((209 16) (209 48))) (Lannot (Lit 0) ((209 50) (209 50))))) ((209 16) (209 50))) (Let NONE (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (App Opapp ((Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8Array" (Short "copy"))) ((210 16) (210 30))) (Lannot (Var (Short "readBytes")) ((210 32) (210 40))))) ((210 16) (210 40))) (Lannot (Lit 0) ((210 42) (210 42))))) ((210 16) (210 42))) (Lannot (Var (Long "FdSet" (Short "byteSize"))) ((210 44) (210 57))))) ((210 16) (210 57))) (Lannot (Var (Short "inputBuff")) ((210 59) (210 67))))) ((210 16) (210 67))) (Lannot (App Opapp ((App Opapp ((Var (Short "+")) (Lannot (Lit 8) ((210 70) (210 70))))) (Lannot (App Opapp ((App Opapp ((Var (Short "*")) (Lannot (Lit 0) ((210 74) (210 74))))) (Lannot (Var (Long "FdSet" (Short "byteSize"))) ((210 78) (210 91))))) ((210 74) (210 91))))) ((210 70) (210 91))))) ((210 16) (210 92))) (Let NONE (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (App Opapp ((Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8Array" (Short "copy"))) ((211 16) (211 30))) (Lannot (Var (Short "writeBytes")) ((211 32) (211 41))))) ((211 16) (211 41))) (Lannot (Lit 0) ((211 43) (211 43))))) ((211 16) (211 43))) (Lannot (Var (Long "FdSet" (Short "byteSize"))) ((211 45) (211 58))))) ((211 16) (211 58))) (Lannot (Var (Short "inputBuff")) ((211 60) (211 68))))) ((211 16) (211 68))) (Lannot (App Opapp ((App Opapp ((Var (Short "+")) (Lannot (Lit 8) ((211 71) (211 71))))) (Lannot (App Opapp ((App Opapp ((Var (Short "*")) (Lannot (Lit 1) ((211 75) (211 75))))) (Lannot (Var (Long "FdSet" (Short "byteSize"))) ((211 79) (211 92))))) ((211 75) (211 92))))) ((211 71) (211 92))))) ((211 16) (211 93))) (Let NONE (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (App Opapp ((Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8Array" (Short "copy"))) ((212 16) (212 30))) (Lannot (Var (Short "exceptBytes")) ((212 32) (212 42))))) ((212 16) (212 42))) (Lannot (Lit 0) ((212 44) (212 44))))) ((212 16) (212 44))) (Lannot (Var (Long "FdSet" (Short "byteSize"))) ((212 46) (212 59))))) ((212 16) (212 59))) (Lannot (Var (Short "inputBuff")) ((212 61) (212 69))))) ((212 16) (212 69))) (Lannot (App Opapp ((App Opapp ((Var (Short "+")) (Lannot (Lit 8) ((212 72) (212 72))))) (Lannot (App Opapp ((App Opapp ((Var (Short "*")) (Lannot (Lit 2) ((212 76) (212 76))))) (Lannot (Var (Long "FdSet" (Short "byteSize"))) ((212 80) (212 93))))) ((212 76) (212 93))))) ((212 72) (212 93))))) ((212 16) (212 94))) (Let (SOME "outputBuff") (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8Array" (Short "array"))) ((213 25) (213 40))) (Lannot (App Opapp ((App Opapp ((Var (Short "+")) (Lannot (App Opapp ((App Opapp ((Var (Short "*")) (Lannot (Var (Long "FdSet" (Short "byteSize"))) ((213 43) (213 56))))) (Lannot (Lit 3) ((213 60) (213 60))))) ((213 43) (213 60))))) (Lannot (Lit 1) ((213 64) (213 64))))) ((213 43) (213 64))))) ((213 25) (213 65))) (Lannot (App Opapp ((Lannot (Var (Long "Word8" (Short "fromInt"))) ((213 68) (213 80))) (Lannot (Lit 0) ((213 82) (213 82))))) ((213 68) (213 82))))) ((213 25) (213 83))) (Let NONE (Lannot (App (FFI . "select") ((Lannot (App Opapp ((Lannot (Var (Long "ByteHelper" (Short "toString"))) ((214 29) (214 47))) (Lannot (Var (Short "inputBuff")) ((214 49) (214 57))))) ((214 29) (214 57))) (Lannot (Var (Short "outputBuff")) ((214 60) (214 69))))) ((214 16) (214 69))) (Lannot (If (Lannot (App Opapp ((App Opapp ((Var (Short "=")) (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8Array" (Short "sub"))) ((216 11) (216 24))) (Lannot (Var (Short "outputBuff")) ((216 26) (216 35))))) ((216 11) (216 35))) (Lannot (Lit 0) ((216 37) (216 37))))) ((216 11) (216 37))))) (Lannot (App Opapp ((Lannot (Var (Long "Word8" (Short "fromInt"))) ((216 41) (216 53))) (Lannot (Lit 1) ((216 55) (216 55))))) ((216 41) (216 55))))) ((216 11) (216 55))) (Lannot (Raise (Lannot (Con (SOME (Short "FFIError")) ((Lit "select failed"))) ((217 19) (217 42)))) ((217 13) (217 42))) (Lannot (Let NONE (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (App Opapp ((Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8Array" (Short "copy"))) ((220 20) (220 34))) (Lannot (Var (Short "outputBuff")) ((220 36) (220 45))))) ((220 20) (220 45))) (Lannot (App Opapp ((App Opapp ((Var (Short "+")) (Lannot (Lit 1) ((220 48) (220 48))))) (Lannot (App Opapp ((App Opapp ((Var (Short "*")) (Lannot (Lit 0) ((220 52) (220 52))))) (Lannot (Var (Long "FdSet" (Short "byteSize"))) ((220 56) (220 69))))) ((220 52) (220 69))))) ((220 48) (220 69))))) ((220 20) (220 70))) (Lannot (Var (Long "FdSet" (Short "byteSize"))) ((220 72) (220 85))))) ((220 20) (220 85))) (Lannot (Var (Short "readBytes")) ((220 87) (220 95))))) ((220 20) (220 95))) (Lannot (Lit 0) ((220 97) (220 97))))) ((220 20) (220 97))) (Let NONE (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (App Opapp ((Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8Array" (Short "copy"))) ((221 20) (221 34))) (Lannot (Var (Short "outputBuff")) ((221 36) (221 45))))) ((221 20) (221 45))) (Lannot (App Opapp ((App Opapp ((Var (Short "+")) (Lannot (Lit 1) ((221 48) (221 48))))) (Lannot (App Opapp ((App Opapp ((Var (Short "*")) (Lannot (Lit 1) ((221 52) (221 52))))) (Lannot (Var (Long "FdSet" (Short "byteSize"))) ((221 56) (221 69))))) ((221 52) (221 69))))) ((221 48) (221 69))))) ((221 20) (221 70))) (Lannot (Var (Long "FdSet" (Short "byteSize"))) ((221 72) (221 85))))) ((221 20) (221 85))) (Lannot (Var (Short "writeBytes")) ((221 87) (221 96))))) ((221 20) (221 96))) (Lannot (Lit 0) ((221 98) (221 98))))) ((221 20) (221 98))) (Let NONE (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (App Opapp ((Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8Array" (Short "copy"))) ((222 20) (222 34))) (Lannot (Var (Short "outputBuff")) ((222 36) (222 45))))) ((222 20) (222 45))) (Lannot (App Opapp ((App Opapp ((Var (Short "+")) (Lannot (Lit 1) ((222 48) (222 48))))) (Lannot (App Opapp ((App Opapp ((Var (Short "*")) (Lannot (Lit 2) ((222 52) (222 52))))) (Lannot (Var (Long "FdSet" (Short "byteSize"))) ((222 56) (222 69))))) ((222 52) (222 69))))) ((222 48) (222 69))))) ((222 20) (222 70))) (Lannot (Var (Long "FdSet" (Short "byteSize"))) ((222 72) (222 85))))) ((222 20) (222 85))) (Lannot (Var (Short "exceptBytes")) ((222 87) (222 97))))) ((222 20) (222 97))) (Lannot (Lit 0) ((222 99) (222 99))))) ((222 20) (222 99))) (Lannot (Con NONE ((Lannot (App Opapp ((Lannot (Var (Long "FdSet" (Short "fromBytes"))) ((224 13) (224 27))) (Lannot (Var (Short "readBytes")) ((224 29) (224 37))))) ((224 13) (224 37))) (Lannot (App Opapp ((Lannot (Var (Long "FdSet" (Short "fromBytes"))) ((224 40) (224 54))) (Lannot (Var (Short "writeBytes")) ((224 56) (224 65))))) ((224 40) (224 65))) (Lannot (App Opapp ((Lannot (Var (Long "FdSet" (Short "fromBytes"))) ((224 68) (224 82))) (Lannot (Var (Short "exceptBytes")) ((224 84) (224 94))))) ((224 68) (224 94))))) ((224 12) (224 95)))))) ((219 10) (225 12)))) ((216 8) (225 12))))))))))))) ((204 6) (226 8)))))))) (Dletrec ((228 4) (235 8)) (("openListenFd" "port" Lannot (Let (SOME "outputBuff") (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8Array" (Short "array"))) ((229 27) (229 42))) (Lannot (Lit 9) ((229 44) (229 44))))) ((229 27) (229 44))) (Lannot (App Opapp ((Lannot (Var (Long "Word8" (Short "fromInt"))) ((229 47) (229 59))) (Lannot (Lit 0) ((229 61) (229 61))))) ((229 47) (229 61))))) ((229 27) (229 62))) (Let NONE (Lannot (App (FFI . "open_listenfd") ((Lannot (App Opapp ((Lannot (Var (Long "Int" (Short "toString"))) ((230 38) (230 49))) (Lannot (Var (Short "port")) ((230 51) (230 54))))) ((230 38) (230 54))) (Lannot (Var (Short "outputBuff")) ((230 57) (230 66))))) ((230 18) (230 66))) (Lannot (If (Lannot (App Opapp ((App Opapp ((Var (Short "=")) (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8Array" (Short "sub"))) ((232 11) (232 24))) (Lannot (Var (Short "outputBuff")) ((232 26) (232 35))))) ((232 11) (232 35))) (Lannot (Lit 0) ((232 37) (232 37))))) ((232 11) (232 37))))) (Lannot (App Opapp ((Lannot (Var (Long "Word8" (Short "fromInt"))) ((232 41) (232 53))) (Lannot (Lit 1) ((232 55) (232 55))))) ((232 41) (232 55))))) ((232 11) (232 55))) (Lannot (Raise (Lannot (Con (SOME (Short "FFIError")) ((Lit "open_listenfd failed"))) ((233 20) (233 50)))) ((233 13) (233 51))) (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "ByteHelper" (Short "w82n"))) ((234 13) (234 27))) (Lannot (Var (Short "outputBuff")) ((234 29) (234 38))))) ((234 13) (234 38))) (Lannot (Lit 1) ((234 40) (234 40))))) ((234 13) (234 40)))) ((232 8) (234 40))))) ((229 6) (235 8))))) (Dletrec ((237 4) (246 8)) (("accept" "listenFd" Lannot (Let (SOME "inputBuff") (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8Array" (Short "array"))) ((238 26) (238 41))) (Lannot (Lit 8) ((238 43) (238 43))))) ((238 26) (238 43))) (Lannot (App Opapp ((Lannot (Var (Long "Word8" (Short "fromInt"))) ((238 46) (238 58))) (Lannot (Lit 0) ((238 60) (238 60))))) ((238 46) (238 60))))) ((238 26) (238 61))) (Let NONE (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "ByteHelper" (Short "n2w8"))) ((239 18) (239 32))) (Lannot (Var (Short "listenFd")) ((239 34) (239 41))))) ((239 18) (239 41))) (Lannot (Var (Short "inputBuff")) ((239 43) (239 51))))) ((239 18) (239 51))) (Lannot (Lit 0) ((239 53) (239 53))))) ((239 18) (239 53))) (Let (SOME "outputBuff") (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8Array" (Short "array"))) ((240 27) (240 42))) (Lannot (Lit 9) ((240 44) (240 44))))) ((240 27) (240 44))) (Lannot (App Opapp ((Lannot (Var (Long "Word8" (Short "fromInt"))) ((240 47) (240 59))) (Lannot (Lit 0) ((240 61) (240 61))))) ((240 47) (240 61))))) ((240 27) (240 62))) (Let NONE (Lannot (App (FFI . "accept") ((Lannot (App Opapp ((Lannot (Var (Long "ByteHelper" (Short "toString"))) ((241 31) (241 49))) (Lannot (Var (Short "inputBuff")) ((241 51) (241 59))))) ((241 31) (241 59))) (Lannot (Var (Short "outputBuff")) ((241 62) (241 71))))) ((241 18) (241 71))) (Lannot (If (Lannot (App Opapp ((App Opapp ((Var (Short "=")) (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8Array" (Short "sub"))) ((243 11) (243 24))) (Lannot (Var (Short "outputBuff")) ((243 26) (243 35))))) ((243 11) (243 35))) (Lannot (Lit 0) ((243 37) (243 37))))) ((243 11) (243 37))))) (Lannot (App Opapp ((Lannot (Var (Long "Word8" (Short "fromInt"))) ((243 41) (243 53))) (Lannot (Lit 1) ((243 55) (243 55))))) ((243 41) (243 55))))) ((243 11) (243 55))) (Lannot (Raise (Lannot (Con (SOME (Short "FFIError")) ((Lit "accept failed"))) ((244 20) (244 43)))) ((244 13) (244 44))) (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "ByteHelper" (Short "w82n"))) ((245 13) (245 27))) (Lannot (Var (Short "outputBuff")) ((245 29) (245 38))))) ((245 13) (245 38))) (Lannot (Lit 1) ((245 40) (245 40))))) ((245 13) (245 40)))) ((243 8) (245 40))))))) ((238 6) (246 8))))) (Dletrec ((248 4) (257 8)) (("close" "fd" Lannot (Let (SOME "inputBuff") (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8Array" (Short "array"))) ((249 26) (249 41))) (Lannot (Lit 8) ((249 43) (249 43))))) ((249 26) (249 43))) (Lannot (App Opapp ((Lannot (Var (Long "Word8" (Short "fromInt"))) ((249 46) (249 58))) (Lannot (Lit 0) ((249 60) (249 60))))) ((249 46) (249 60))))) ((249 26) (249 61))) (Let NONE (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "ByteHelper" (Short "n2w8"))) ((250 18) (250 32))) (Lannot (Var (Short "fd")) ((250 34) (250 35))))) ((250 18) (250 35))) (Lannot (Var (Short "inputBuff")) ((250 37) (250 45))))) ((250 18) (250 45))) (Lannot (Lit 0) ((250 47) (250 47))))) ((250 18) (250 47))) (Let (SOME "outputBuff") (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8Array" (Short "array"))) ((251 27) (251 42))) (Lannot (Lit 1) ((251 44) (251 44))))) ((251 27) (251 44))) (Lannot (App Opapp ((Lannot (Var (Long "Word8" (Short "fromInt"))) ((251 47) (251 59))) (Lannot (Lit 0) ((251 61) (251 61))))) ((251 47) (251 61))))) ((251 27) (251 62))) (Let NONE (Lannot (App (FFI . "close") ((Lannot (App Opapp ((Lannot (Var (Long "ByteHelper" (Short "toString"))) ((252 30) (252 48))) (Lannot (Var (Short "inputBuff")) ((252 50) (252 58))))) ((252 30) (252 58))) (Lannot (Var (Short "outputBuff")) ((252 61) (252 70))))) ((252 18) (252 70))) (Lannot (If (Lannot (App Opapp ((App Opapp ((Var (Short "=")) (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8Array" (Short "sub"))) ((254 11) (254 24))) (Lannot (Var (Short "outputBuff")) ((254 26) (254 35))))) ((254 11) (254 35))) (Lannot (Lit 0) ((254 37) (254 37))))) ((254 11) (254 37))))) (Lannot (App Opapp ((Lannot (Var (Long "Word8" (Short "fromInt"))) ((254 41) (254 53))) (Lannot (Lit 1) ((254 55) (254 55))))) ((254 41) (254 55))))) ((254 11) (254 55))) (Lannot (Raise (Lannot (Con (SOME (Short "FFIError")) ((Lit "close failed"))) ((255 20) (255 42)))) ((255 13) (255 43))) (Lannot (Con NONE nil) ((256 13) (256 14)))) ((254 8) (256 14))))))) ((249 6) (257 8))))) (Dexn ((259 4) unk) "EndOfFile" nil) (Dexn ((260 4) unk) "InvalidFD" nil) (Dlet ((262 4) (262 55)) "iobuff" (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8Array" (Short "array"))) ((262 17) (262 32))) (Lannot (Lit 2052) ((262 34) (262 37))))) ((262 17) (262 37))) (Lannot (App Opapp ((Lannot (Var (Long "Word8" (Short "fromInt"))) ((262 40) (262 52))) (Lannot (Lit 0) ((262 54) (262 54))))) ((262 40) (262 54))))) ((262 17) (262 55)))) (Dletrec ((264 4) (273 8)) (("read" "fd" Fun "n" (Lannot (Let (SOME "a") (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Marshalling" (Short "n2w2"))) ((265 18) (265 33))) (Lannot (Var (Short "n")) ((265 35) (265 35))))) ((265 18) (265 35))) (Lannot (Var (Short "iobuff")) ((265 37) (265 42))))) ((265 18) (265 42))) (Lannot (Lit 0) ((265 44) (265 44))))) ((265 18) (265 44))) (Let (SOME "inputBuff") (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8Array" (Short "array"))) ((266 26) (266 41))) (Lannot (Lit 8) ((266 43) (266 43))))) ((266 26) (266 43))) (Lannot (App Opapp ((Lannot (Var (Long "Word8" (Short "fromInt"))) ((266 46) (266 58))) (Lannot (Lit 0) ((266 60) (266 60))))) ((266 46) (266 60))))) ((266 26) (266 61))) (Let NONE (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "ByteHelper" (Short "n2w8"))) ((267 18) (267 32))) (Lannot (Var (Short "fd")) ((267 34) (267 35))))) ((267 18) (267 35))) (Lannot (Var (Short "inputBuff")) ((267 37) (267 45))))) ((267 18) (267 45))) (Lannot (Lit 0) ((267 47) (267 47))))) ((267 18) (267 47))) (Let NONE (Lannot (App (FFI . "read") ((Lannot (App Opapp ((Lannot (Var (Long "ByteHelper" (Short "toString"))) ((269 19) (269 37))) (Lannot (Var (Short "inputBuff")) ((269 39) (269 47))))) ((269 19) (269 47))) (Lannot (Var (Short "iobuff")) ((269 50) (269 55))))) ((269 8) (269 55))) (Lannot (If (Lannot (App Opapp ((App Opapp ((Var (Short "<>")) (Lannot (App Opapp ((Lannot (Var (Long "Word8" (Short "toInt"))) ((270 11) (270 21))) (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8Array" (Short "sub"))) ((270 24) (270 37))) (Lannot (Var (Short "iobuff")) ((270 39) (270 44))))) ((270 24) (270 44))) (Lannot (Lit 0) ((270 46) (270 46))))) ((270 24) (270 46))))) ((270 11) (270 47))))) (Lannot (Lit 1) ((270 52) (270 52))))) ((270 11) (270 52))) (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Marshalling" (Short "w22n"))) ((271 13) (271 28))) (Lannot (Var (Short "iobuff")) ((271 30) (271 35))))) ((271 13) (271 35))) (Lannot (Lit 1) ((271 37) (271 37))))) ((271 13) (271 37))) (Lannot (Raise (Lannot (Con (SOME (Short "InvalidFD")) nil) ((272 19) (272 27)))) ((272 13) (272 27)))) ((270 8) (272 27))))))) ((265 6) (273 8)))))) (Dletrec ((275 4) (277 33)) (("read_byte" "fd" Lannot (If (Lannot (App Opapp ((App Opapp ((Var (Short "=")) (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Short "read")) ((276 9) (276 12))) (Lannot (Var (Short "fd")) ((276 14) (276 15))))) ((276 9) (276 15))) (Lannot (Lit 1) ((276 17) (276 17))))) ((276 9) (276 17))))) (Lannot (Lit 0) ((276 21) (276 21))))) ((276 9) (276 21))) (Lannot (Raise (Lannot (Con (SOME (Short "EndOfFile")) nil) ((276 34) (276 42)))) ((276 28) (276 42))) (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8Array" (Short "sub"))) ((277 11) (277 24))) (Lannot (Var (Short "iobuff")) ((277 26) (277 31))))) ((277 11) (277 31))) (Lannot (Lit 4) ((277 33) (277 33))))) ((277 11) (277 33)))) ((276 6) (277 33))))) (Dlocal ((Dletrec ((280 6) (286 10)) (("extend_array" "arr" Lannot (Let (SOME "len") (Lannot (App Opapp ((Lannot (Var (Long "Word8Array" (Short "length"))) ((282 20) (282 36))) (Lannot (Var (Short "arr")) ((282 38) (282 40))))) ((282 20) (282 40))) (Let (SOME "arr'") (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8Array" (Short "array"))) ((283 21) (283 36))) (Lannot (App Opapp ((App Opapp ((Var (Short "*")) (Lannot (Lit 2) ((283 39) (283 39))))) (Lannot (Var (Short "len")) ((283 41) (283 43))))) ((283 39) (283 43))))) ((283 21) (283 44))) (Lannot (App Opapp ((Lannot (Var (Long "Word8" (Short "fromInt"))) ((283 47) (283 59))) (Lannot (Lit 0) ((283 61) (283 61))))) ((283 47) (283 61))))) ((283 21) (283 62))) (Let NONE (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (App Opapp ((Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8Array" (Short "copy"))) ((285 10) (285 24))) (Lannot (Var (Short "arr")) ((285 26) (285 28))))) ((285 10) (285 28))) (Lannot (Lit 0) ((285 30) (285 30))))) ((285 10) (285 30))) (Lannot (Var (Short "len")) ((285 32) (285 34))))) ((285 10) (285 34))) (Lannot (Var (Short "arr'")) ((285 36) (285 39))))) ((285 10) (285 39))) (Lannot (Lit 0) ((285 41) (285 41))))) ((285 10) (285 41))) (Lannot (Var (Short "arr'")) ((285 44) (285 47)))))) ((281 8) (286 10)))))) ((Dletrec ((288 6) (307 10)) (("inputLine" "fd" Lannot (Let (SOME "nl") (Lannot (App Opapp ((Lannot (Var (Long "Word8" (Short "fromInt"))) ((290 19) (290 31))) (Lannot (App Opapp ((Lannot (Var (Long "Char" (Short "ord"))) ((290 34) (290 41))) (Lannot (Lit (char "\\0A")) ((290 43) (290 47))))) ((290 34) (290 47))))) ((290 19) (290 48))) (Letrec (("inputLine_aux" "arr" Fun "i" (Lannot (If (Lannot (App Opapp ((App Opapp ((Var (Short "<")) (Lannot (Var (Short "i")) ((292 15) (292 15))))) (Lannot (App Opapp ((Lannot (Var (Long "Word8Array" (Short "length"))) ((292 19) (292 35))) (Lannot (Var (Short "arr")) ((292 37) (292 39))))) ((292 19) (292 39))))) ((292 15) (292 39))) (Lannot (Handle (Lannot (Let (SOME "c") (Lannot (App Opapp ((Lannot (Var (Short "read_byte")) ((294 24) (294 32))) (Lannot (Var (Short "fd")) ((294 35) (294 36))))) ((294 24) (294 37))) (Let (SOME "u") (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8Array" (Short "update"))) ((295 24) (295 40))) (Lannot (Var (Short "arr")) ((295 42) (295 44))))) ((295 24) (295 44))) (Lannot (Var (Short "i")) ((295 46) (295 46))))) ((295 24) (295 46))) (Lannot (Var (Short "c")) ((295 48) (295 48))))) ((295 24) (295 48))) (Lannot (If (Lannot (App Opapp ((App Opapp ((Var (Short "=")) (Lannot (Var (Short "c")) ((297 19) (297 19))))) (Lannot (Var (Short "nl")) ((297 23) (297 24))))) ((297 19) (297 24))) (Lannot (Con (SOME (Short "Some")) ((App Opapp ((Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8Array" (Short "substring"))) ((297 37) (297 56))) (Lannot (Var (Short "arr")) ((297 58) (297 60))))) ((297 37) (297 60))) (Lannot (Lit 0) ((297 62) (297 62))))) ((297 37) (297 62))) (Lannot (App Opapp ((App Opapp ((Var (Short "+")) (Lannot (Var (Short "i")) ((297 65) (297 65))))) (Lannot (Lit 1) ((297 67) (297 67))))) ((297 65) (297 67))))))) ((297 31) (297 68))) (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Short "inputLine_aux")) ((298 21) (298 33))) (Lannot (Var (Short "arr")) ((298 35) (298 37))))) ((298 21) (298 37))) (Lannot (App Opapp ((App Opapp ((Var (Short "+")) (Lannot (Var (Short "i")) ((298 40) (298 40))))) (Lannot (Lit 1) ((298 42) (298 42))))) ((298 40) (298 42))))) ((298 21) (298 43)))) ((297 16) (298 43))))) ((293 14) (299 16))) (((Pcon (SOME (Short "EndOfFile")) nil) Lannot (If (Lannot (App Opapp ((App Opapp ((Var (Short "=")) (Lannot (Var (Short "i")) ((301 19) (301 19))))) (Lannot (Lit 0) ((301 23) (301 23))))) ((301 19) (301 23))) (Lannot (Con (SOME (Short "None")) nil) ((301 30) (301 33))) (Lannot (Let NONE (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8Array" (Short "update"))) ((302 22) (302 38))) (Lannot (Var (Short "arr")) ((302 40) (302 42))))) ((302 22) (302 42))) (Lannot (Var (Short "i")) ((302 44) (302 44))))) ((302 22) (302 44))) (Lannot (Var (Short "nl")) ((302 46) (302 47))))) ((302 22) (302 47))) (Lannot (Con (SOME (Short "Some")) ((App Opapp ((Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8Array" (Short "substring"))) ((303 28) (303 47))) (Lannot (Var (Short "arr")) ((303 49) (303 51))))) ((303 28) (303 51))) (Lannot (Lit 0) ((303 53) (303 53))))) ((303 28) (303 53))) (Lannot (App Opapp ((App Opapp ((Var (Short "+")) (Lannot (Var (Short "i")) ((303 56) (303 56))))) (Lannot (Lit 1) ((303 58) (303 58))))) ((303 56) (303 58))))))) ((303 22) (303 59)))) ((302 21) (303 61)))) ((301 16) (303 61))))) ((293 14) (303 61))) (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Short "inputLine_aux")) ((304 17) (304 29))) (Lannot (App Opapp ((Lannot (Var (Short "extend_array")) ((304 32) (304 43))) (Lannot (Var (Short "arr")) ((304 45) (304 47))))) ((304 32) (304 47))))) ((304 17) (304 48))) (Lannot (Var (Short "i")) ((304 50) (304 50))))) ((304 17) (304 50)))) ((292 12) (304 50))))) (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Short "inputLine_aux")) ((306 10) (306 22))) (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Word8Array" (Short "array"))) ((306 25) (306 40))) (Lannot (Lit 127) ((306 42) (306 44))))) ((306 25) (306 44))) (Lannot (App Opapp ((Lannot (Var (Long "Word8" (Short "fromInt"))) ((306 47) (306 59))) (Lannot (Lit 0) ((306 61) (306 61))))) ((306 47) (306 61))))) ((306 25) (306 62))))) ((306 10) (306 63))) (Lannot (Lit 0) ((306 65) (306 65))))) ((306 10) (306 65))))) ((289 8) (307 10))))))))) (Dmod "Scheduler" ((Dlocal ((Dlet ((314 6) (314 81)) "readables" (Lannot (App Opref ((Lannot (Tannot (Lannot (App Opapp ((Lannot (Var (Long "Map" (Short "empty"))) ((314 27) (314 35))) (Lannot (Var (Long "Int" (Short "compare"))) ((314 37) (314 47))))) ((314 27) (314 47))) (Atapp ((Atapp nil (Short "int")) (Atapp ((Atfun (Atapp nil (Short "unit")) (Atapp nil (Short "unit")))) (Short "list"))) (Short "map"))) ((314 27) (314 80))))) ((314 22) (314 81)))) (Dlet ((315 6) (315 82)) "writeables" (Lannot (App Opref ((Lannot (Tannot (Lannot (App Opapp ((Lannot (Var (Long "Map" (Short "empty"))) ((315 28) (315 36))) (Lannot (Var (Long "Int" (Short "compare"))) ((315 38) (315 48))))) ((315 28) (315 48))) (Atapp ((Atapp nil (Short "int")) (Atapp ((Atfun (Atapp nil (Short "unit")) (Atapp nil (Short "unit")))) (Short "list"))) (Short "map"))) ((315 28) (315 81))))) ((315 23) (315 82)))) (Dlet ((317 6) (317 70)) "timers" (Lannot (App Opref ((Lannot (Tannot (Lannot (Con (SOME (Short "[]")) nil) ((317 24) (317 25))) (Atapp ((Attup ((Atapp nil (Long "Time" (Short "milliseconds"))) (Atfun (Atapp nil (Short "unit")) (Atapp nil (Short "unit")))))) (Short "list"))) ((317 24) (317 69))))) ((317 19) (317 70)))) (Dletrec ((319 6) (319 97)) (("length" "" Mat (Var (Short "")) (((Pcon NONE nil) Lannot (App Opapp ((App Opapp ((Var (Short "+")) (Lannot (App Opapp ((App Opapp ((Var (Short "+")) (Lannot (App Opapp ((Lannot (Var (Long "Map" (Short "size"))) ((319 23) (319 30))) (Lannot (App Opapp ((Lannot (Var (Short "!")) ((319 33) (319 33))) (Lannot (Var (Short "readables")) ((319 34) (319 42))))) ((319 33) (319 42))))) ((319 23) (319 43))))) (Lannot (App Opapp ((Lannot (Var (Long "Map" (Short "size"))) ((319 49) (319 56))) (Lannot (App Opapp ((Lannot (Var (Short "!")) ((319 59) (319 59))) (Lannot (Var (Short "writeables")) ((319 60) (319 69))))) ((319 59) (319 69))))) ((319 49) (319 70))))) ((319 22) (319 71))))) (Lannot (App Opapp ((Lannot (Var (Long "List" (Short "length"))) ((319 76) (319 86))) (Lannot (App Opapp ((Lannot (Var (Short "!")) ((319 89) (319 89))) (Lannot (Var (Short "timers")) ((319 90) (319 95))))) ((319 89) (319 95))))) ((319 76) (319 96))))) ((319 22) (319 97))))))) (Dexn ((321 6) unk) "FdAlreadyRemoved" nil) (Dletrec ((323 6) (342 10)) (("loop" "" Mat (Var (Short "")) (((Pcon NONE nil) Lannot (Letrec (("toFdSet" "fd_map" Lannot (App Opapp ((Lannot (Var (Long "FdSet" (Short "fromList"))) ((325 31) (325 44))) (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "List" (Short "map"))) ((325 47) (325 54))) (Lannot (Var (Short "fst")) ((325 56) (325 58))))) ((325 47) (325 58))) (Lannot (App Opapp ((Lannot (Var (Long "Map" (Short "toAscList"))) ((325 61) (325 73))) (Lannot (Var (Short "fd_map")) ((325 75) (325 80))))) ((325 61) (325 80))))) ((325 47) (325 81))))) ((325 31) (325 82)))) (Let (SOME "readFdSet") (Lannot (App Opapp ((Lannot (Var (Short "toFdSet")) ((326 26) (326 32))) (Lannot (App Opapp ((Lannot (Var (Short "!")) ((326 35) (326 35))) (Lannot (Var (Short "readables")) ((326 36) (326 44))))) ((326 35) (326 44))))) ((326 26) (326 45))) (Let (SOME "writeFdSet") (Lannot (App Opapp ((Lannot (Var (Short "toFdSet")) ((327 27) (327 33))) (Lannot (App Opapp ((Lannot (Var (Short "!")) ((327 36) (327 36))) (Lannot (Var (Short "writeables")) ((327 37) (327 46))))) ((327 36) (327 46))))) ((327 27) (327 47))) (Let (SOME "exceptFdSet") (Lannot (Var (Long "FdSet" (Short "empty"))) ((328 28) (328 38))) (Mat (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Unix" (Short "select"))) ((329 43) (329 53))) (Lannot (Var (Short "readFdSet")) ((329 55) (329 63))))) ((329 43) (329 63))) (Lannot (Var (Short "writeFdSet")) ((329 65) (329 74))))) ((329 43) (329 74))) (Lannot (Var (Short "exceptFdSet")) ((329 76) (329 86))))) ((329 43) (329 86))) (Lannot (Lit 0) ((329 88) (329 88))))) ((329 43) (329 88))) (((Pcon NONE ("readyRead" "readyWrite" (Pany))) Mat (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "List" (Short "partition"))) ((330 47) (330 60))) (Lannot (Fun "" (Mat (Var (Short "")) (((Pcon NONE ("time" (Pany))) Lannot (App Opapp ((App Opapp ((Var (Short "<=")) (Lannot (Var (Short "time")) ((330 79) (330 82))))) (Lannot (App Opapp ((Lannot (Var (Long "Time" (Short "nowMilliseconds"))) ((330 87) (330 106))) (Lannot (Con NONE nil) ((330 108) (330 109))))) ((330 87) (330 109))))) ((330 79) (330 109)))))) ((330 63) (330 109))))) ((330 47) (330 110))) (Lannot (App Opapp ((Lannot (Var (Short "!")) ((330 113) (330 113))) (Lannot (Var (Short "timers")) ((330 114) (330 119))))) ((330 113) (330 119))))) ((330 47) (330 120))) (((Pcon NONE ("timersReady" "remainingTimers")) Let NONE (Lannot (App Opapp ((App Opapp ((Var (Short ":=")) (Lannot (Var (Short "timers")) ((331 18) (331 23))))) (Lannot (Var (Short "remainingTimers")) ((331 28) (331 42))))) ((331 18) (331 42))) (Letrec (("invokeActions" "fd_map" Fun "fd" (Lannot (Mat (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Map" (Short "lookup"))) ((332 46) (332 55))) (Lannot (App Opapp ((Lannot (Var (Short "!")) ((332 58) (332 58))) (Lannot (Var (Short "fd_map")) ((332 59) (332 64))))) ((332 58) (332 64))))) ((332 46) (332 65))) (Lannot (Var (Short "fd")) ((332 67) (332 68))))) ((332 46) (332 68))) (((Pcon (SOME (Short "None")) nil) Lannot (Raise (Lannot (Con (SOME (Short "FdAlreadyRemoved")) nil) ((333 26) (333 41)))) ((333 20) (333 41))) ((Pcon (SOME (Short "Some")) ("actions")) Lannot (Let NONE (Lannot (App Opapp ((App Opapp ((Var (Short ":=")) (Lannot (Var (Short "fd_map")) ((335 14) (335 19))))) (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Map" (Short "delete"))) ((335 24) (335 33))) (Lannot (App Opapp ((Lannot (Var (Short "!")) ((335 36) (335 36))) (Lannot (Var (Short "fd_map")) ((335 37) (335 42))))) ((335 36) (335 42))))) ((335 24) (335 43))) (Lannot (Var (Short "fd")) ((335 45) (335 46))))) ((335 24) (335 46))))) ((335 14) (335 46))) (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "List" (Short "app"))) ((336 14) (336 21))) (Lannot (Fun "f" (Lannot (App Opapp ((Lannot (Var (Short "f")) ((336 32) (336 32))) (Lannot (Con NONE nil) ((336 34) (336 35))))) ((336 32) (336 35)))) ((336 24) (336 35))))) ((336 14) (336 36))) (Lannot (Var (Short "actions")) ((336 38) (336 44))))) ((336 14) (336 44)))) ((334 28) (337 12))))) ((332 40) (337 12))))) (Let NONE (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "List" (Short "app"))) ((339 10) (339 17))) (Lannot (App Opapp ((Lannot (Var (Short "invokeActions")) ((339 20) (339 32))) (Lannot (Var (Short "readables")) ((339 34) (339 42))))) ((339 20) (339 42))))) ((339 10) (339 43))) (Lannot (App Opapp ((Lannot (Var (Long "FdSet" (Short "toList"))) ((339 46) (339 57))) (Lannot (Var (Short "readyRead")) ((339 59) (339 67))))) ((339 46) (339 67))))) ((339 10) (339 68))) (Let NONE (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "List" (Short "app"))) ((340 10) (340 17))) (Lannot (App Opapp ((Lannot (Var (Short "invokeActions")) ((340 20) (340 32))) (Lannot (Var (Short "writeables")) ((340 34) (340 43))))) ((340 20) (340 43))))) ((340 10) (340 44))) (Lannot (App Opapp ((Lannot (Var (Long "FdSet" (Short "toList"))) ((340 47) (340 58))) (Lannot (Var (Short "readyWrite")) ((340 60) (340 69))))) ((340 47) (340 69))))) ((340 10) (340 70))) (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "List" (Short "app"))) ((341 10) (341 17))) (Lannot (Fun "" (Mat (Var (Short "")) (((Pcon NONE ((Pany) "f")) Lannot (App Opapp ((Lannot (Var (Short "f")) ((341 33) (341 33))) (Lannot (Con NONE nil) ((341 35) (341 36))))) ((341 33) (341 36)))))) ((341 20) (341 36))))) ((341 10) (341 37))) (Lannot (Var (Short "timersReady")) ((341 39) (341 49))))) ((341 10) (341 49))))))))))))))) ((324 8) (342 10)))))))) ((Dletrec ((344 6) (351 10)) (("on_readable" "fd" Fun "f" (Lannot (Let (SOME "actions") (Lannot (Mat (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Map" (Short "lookup"))) ((346 30) (346 39))) (Lannot (App Opapp ((Lannot (Var (Short "!")) ((346 42) (346 42))) (Lannot (Var (Short "readables")) ((346 43) (346 51))))) ((346 42) (346 51))))) ((346 30) (346 52))) (Lannot (Var (Short "fd")) ((346 54) (346 55))))) ((346 30) (346 55))) (((Pcon (SOME (Short "None")) nil) Lannot (Con (SOME (Short "[]")) nil) ((347 20) (347 21))) ((Pcon (SOME (Short "Some")) ("actions")) Lannot (Var (Short "actions")) ((348 28) (348 34))))) ((346 24) (348 34))) (Lannot (App Opapp ((App Opapp ((Var (Short ":=")) (Lannot (Var (Short "readables")) ((350 10) (350 18))))) (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Map" (Short "insert"))) ((350 23) (350 32))) (Lannot (App Opapp ((Lannot (Var (Short "!")) ((350 35) (350 35))) (Lannot (Var (Short "readables")) ((350 36) (350 44))))) ((350 35) (350 44))))) ((350 23) (350 45))) (Lannot (Var (Short "fd")) ((350 47) (350 48))))) ((350 23) (350 48))) (Lannot (Con (SOME (Short "::")) ((Lannot (Var (Short "f")) ((350 51) (350 51))) (Lannot (Var (Short "actions")) ((350 56) (350 62))))) ((350 51) (350 62))))) ((350 23) (350 63))))) ((350 10) (350 63)))) ((345 8) (351 10)))))) (Dletrec ((353 6) (362 10)) (("on_timer" "milliseconds" Fun "repeat" (Fun "f" (Lannot (Let (SOME "now") (Lannot (App Opapp ((Lannot (Var (Long "Time" (Short "nowMilliseconds"))) ((354 22) (354 41))) (Lannot (Con NONE nil) ((354 43) (354 44))))) ((354 22) (354 44))) (Letrec (("g" "" Mat (Var (Short "")) (((Pcon NONE nil) Lannot (Let NONE (Lannot (App Opapp ((Lannot (Var (Short "f")) ((356 14) (356 14))) (Lannot (Con NONE nil) ((356 16) (356 17))))) ((356 14) (356 17))) (Lannot (If (Lannot (Var (Short "repeat")) ((357 17) (357 22))) (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Short "on_timer")) ((357 29) (357 36))) (Lannot (Var (Short "milliseconds")) ((357 38) (357 49))))) ((357 29) (357 49))) (Lannot (Var (Short "repeat")) ((357 51) (357 56))))) ((357 29) (357 56))) (Lannot (Var (Short "f")) ((357 58) (357 58))))) ((357 29) (357 58))) (Lannot (Con NONE nil) ((358 19) (358 20)))) ((357 14) (358 20)))) ((355 23) (359 12)))))) (Lannot (App Opapp ((App Opapp ((Var (Short ":=")) (Lannot (Var (Short "timers")) ((361 10) (361 15))))) (Lannot (Con (SOME (Short "::")) ((Lannot (Con NONE ((Lannot (App Opapp ((App Opapp ((Var (Short "+")) (Lannot (Var (Short "now")) ((361 21) (361 23))))) (Lannot (Var (Short "milliseconds")) ((361 27) (361 38))))) ((361 21) (361 38))) (Lannot (Var (Short "g")) ((361 41) (361 41))))) ((361 20) (361 42))) (Lannot (App Opapp ((Lannot (Var (Short "!")) ((361 48) (361 48))) (Lannot (Var (Short "timers")) ((361 49) (361 54))))) ((361 48) (361 54))))) ((361 20) (361 55))))) ((361 10) (361 55))))) ((354 8) (362 10))))))) (Dletrec ((364 6) (374 10)) (("run" "p" Lannot (Letrec (("run_loop" "" Mat (Var (Short "")) (((Pcon NONE nil) Lannot (Mat (Lannot (App Opapp ((Lannot (Var (Long "Promise" (Short "poll"))) ((366 33) (366 44))) (Lannot (Var (Short "p")) ((366 46) (366 46))))) ((366 33) (366 46))) (((Pcon (SOME (Short "Some")) ("value")) Lannot (Var (Short "value")) ((367 26) (367 30))) ((Pcon (SOME (Short "None")) nil) Lannot (Let NONE (Lannot (App Opapp ((Lannot (Var (Short "loop")) ((369 14) (369 17))) (Lannot (Con NONE nil) ((369 19) (369 20))))) ((369 14) (369 20))) (Lannot (App Opapp ((Lannot (Var (Short "run_loop")) ((370 14) (370 21))) (Lannot (Con NONE nil) ((370 23) (370 24))))) ((370 14) (370 24)))) ((368 20) (371 12))))) ((366 28) (371 12)))))) (Lannot (App Opapp ((Lannot (Var (Short "run_loop")) ((373 10) (373 17))) (Lannot (Con NONE nil) ((373 19) (373 20))))) ((373 10) (373 20)))) ((365 8) (374 10))))) (Dletrec ((376 6) (388 10)) (("run_main" "main" Lannot (Letrec (("run_loop" "" Mat (Var (Short "")) (((Pcon NONE nil) Lannot (If (Lannot (App Opapp ((App Opapp ((Var (Short "<>")) (Lannot (App Opapp ((Lannot (Var (Short "length")) ((379 15) (379 20))) (Lannot (Con NONE nil) ((379 22) (379 23))))) ((379 15) (379 23))))) (Lannot (Lit 0) ((379 28) (379 28))))) ((379 15) (379 28))) (Lannot (Let NONE (Lannot (App Opapp ((Lannot (Var (Short "loop")) ((381 14) (381 17))) (Lannot (Con NONE nil) ((381 19) (381 20))))) ((381 14) (381 20))) (Lannot (App Opapp ((Lannot (Var (Short "run_loop")) ((382 14) (382 21))) (Lannot (Con NONE nil) ((382 23) (382 24))))) ((382 14) (382 24)))) ((380 17) (383 12))) (Lannot (App Opapp ((Lannot (Var (Short "print_ln")) ((384 18) (384 25))) (Lannot (Lit "ending loop") ((384 27) (384 39))))) ((384 18) (384 39)))) ((379 12) (384 40)))))) (Let NONE (Lannot (App Opapp ((Lannot (Var (Short "main")) ((386 10) (386 13))) (Lannot (Con NONE nil) ((386 15) (386 16))))) ((386 10) (386 16))) (Lannot (App Opapp ((Lannot (Var (Short "run_loop")) ((387 10) (387 17))) (Lannot (Con NONE nil) ((387 19) (387 20))))) ((387 10) (387 20))))) ((377 8) (388 10))))))))) (Dmod "AsyncIO" ((Dletrec ((394 4) (400 8)) (("readStdinLine" "" Mat (Var (Short "")) (((Pcon NONE nil) Lannot (Mat (Lannot (App Opapp ((Lannot (Var (Long "Promise" (Short "wait"))) ((396 21) (396 32))) (Lannot (Con NONE nil) ((396 34) (396 35))))) ((396 21) (396 35))) (((Pcon NONE ("t" "u")) Let NONE (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Scheduler" (Short "on_readable"))) ((397 16) (397 36))) (Lannot (Lit 0) ((397 38) (397 38))))) ((397 16) (397 38))) (Lannot (Fun "" (Mat (Var (Short "")) (((Pcon NONE nil) Lannot (App Opapp ((Lannot (Var (Short "u")) ((397 50) (397 50))) (Lannot (App Opapp ((Lannot (Var (Long "TextIO" (Short "inputLine"))) ((397 53) (397 68))) (Lannot (Var (Long "TextIO" (Short "stdIn"))) ((397 70) (397 81))))) ((397 53) (397 81))))) ((397 50) (397 82)))))) ((397 41) (397 82))))) ((397 16) (397 83))) (Lannot (Var (Short "t")) ((399 8) (399 8)))))) ((395 6) (400 8))))))) (Dletrec ((402 4) (410 8)) (("accept" "listenFd" Lannot (Mat (Lannot (App Opapp ((Lannot (Var (Long "Promise" (Short "wait"))) ((404 21) (404 32))) (Lannot (Con NONE nil) ((404 34) (404 35))))) ((404 21) (404 35))) (((Pcon NONE ("t" "u")) Let NONE (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Scheduler" (Short "on_readable"))) ((405 16) (405 36))) (Lannot (Var (Short "listenFd")) ((405 38) (405 45))))) ((405 16) (405 45))) (Lannot (Fun "" (Mat (Var (Short "")) (((Pcon NONE nil) Lannot (App Opapp ((Lannot (Var (Short "u")) ((406 10) (406 10))) (Lannot (App Opapp ((Lannot (Var (Long "Unix" (Short "accept"))) ((406 13) (406 23))) (Lannot (Var (Short "listenFd")) ((406 25) (406 32))))) ((406 13) (406 32))))) ((406 10) (406 33)))))) ((405 48) (407 8))))) ((405 16) (407 9))) (Lannot (Var (Short "t")) ((409 8) (409 8)))))) ((403 6) (410 8))))) (Dletrec ((412 4) (418 8)) (("inputLine" "fd" Lannot (Mat (Lannot (App Opapp ((Lannot (Var (Long "Promise" (Short "wait"))) ((414 21) (414 32))) (Lannot (Con NONE nil) ((414 34) (414 35))))) ((414 21) (414 35))) (((Pcon NONE ("t" "u")) Let NONE (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Scheduler" (Short "on_readable"))) ((415 16) (415 36))) (Lannot (Var (Short "fd")) ((415 38) (415 39))))) ((415 16) (415 39))) (Lannot (Fun "" (Mat (Var (Short "")) (((Pcon NONE nil) Lannot (App Opapp ((Lannot (Var (Short "u")) ((415 51) (415 51))) (Lannot (App Opapp ((Lannot (Var (Long "Unix" (Short "inputLine"))) ((415 54) (415 67))) (Lannot (Var (Short "fd")) ((415 69) (415 70))))) ((415 54) (415 70))))) ((415 51) (415 71)))))) ((415 42) (415 71))))) ((415 16) (415 72))) (Lannot (Var (Short "t")) ((417 8) (417 8)))))) ((413 6) (418 8))))))) (Dmod "AsyncServer" ((Dletrec ((423 4) (431 8)) (("serve" "port" Fun "withClient" (Lannot (Let (SOME "listenFd") (Lannot (App Opapp ((Lannot (Var (Long "Unix" (Short "openListenFd"))) ((424 25) (424 41))) (Lannot (Var (Short "port")) ((424 43) (424 46))))) ((424 25) (424 46))) (Letrec (("handleClient" "" Mat (Var (Short "")) (((Pcon NONE nil) Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Promise" (Short "bind"))) ((425 32) (425 43))) (Lannot (App Opapp ((Lannot (Var (Long "AsyncIO" (Short "accept"))) ((425 46) (425 59))) (Lannot (Var (Short "listenFd")) ((425 61) (425 68))))) ((425 46) (425 68))))) ((425 32) (425 69))) (Lannot (Fun "clientFd" (Lannot (Let NONE (Lannot (App Opapp ((Lannot (Var (Short "withClient")) ((426 12) (426 21))) (Lannot (Var (Short "clientFd")) ((426 23) (426 30))))) ((426 12) (426 30))) (Lannot (App Opapp ((Lannot (Var (Short "handleClient")) ((427 12) (427 23))) (Lannot (Con NONE nil) ((427 25) (427 26))))) ((427 12) (427 26)))) ((425 87) (428 10)))) ((425 72) (428 10))))) ((425 32) (428 11)))))) (Lannot (App Opapp ((Lannot (Var (Short "handleClient")) ((430 8) (430 19))) (Lannot (Con NONE nil) ((430 21) (430 22))))) ((430 8) (430 22))))) ((424 6) (431 8)))))) (Dletrec ((433 4) (441 8)) (("echo" "clientFd" Lannot (Let (SOME "line") (Lannot (App Opapp ((Lannot (Var (Long "AsyncIO" (Short "inputLine"))) ((434 21) (434 37))) (Lannot (Var (Short "clientFd")) ((434 39) (434 46))))) ((434 21) (434 46))) (Let NONE (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Promise" (Short "map"))) ((435 18) (435 28))) (Lannot (Var (Short "line")) ((435 30) (435 33))))) ((435 18) (435 33))) (Lannot (Fun "s" (Lannot (Let NONE (Lannot (App Opapp ((Lannot (Var (Short "print_ln")) ((436 12) (436 19))) (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Option" (Short "getOpt"))) ((436 22) (436 34))) (Lannot (Var (Short "s")) ((436 36) (436 36))))) ((436 22) (436 36))) (Lannot (Lit "EOF") ((436 38) (436 42))))) ((436 22) (436 42))))) ((436 12) (436 43))) (Lannot (App Opapp ((Lannot (Var (Short "echo")) ((437 12) (437 15))) (Lannot (Var (Short "clientFd")) ((437 17) (437 24))))) ((437 12) (437 24)))) ((435 44) (438 10)))) ((435 36) (438 10))))) ((435 18) (438 11))) (Lannot (Con NONE nil) ((440 8) (440 9))))) ((434 6) (441 8))))))) (Dletrec ((444 0) (452 4)) (("echo" "" Mat (Var (Short "")) (((Pcon NONE nil) Lannot (Let (SOME "line") (Lannot (App Opapp ((Lannot (Var (Long "AsyncIO" (Short "readStdinLine"))) ((445 17) (445 37))) (Lannot (Con NONE nil) ((445 39) (445 40))))) ((445 17) (445 40))) (Let NONE (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Promise" (Short "map"))) ((446 14) (446 24))) (Lannot (Var (Short "line")) ((446 26) (446 29))))) ((446 14) (446 29))) (Lannot (Fun "s" (Lannot (Let NONE (Lannot (App Opapp ((Lannot (Var (Short "print_ln")) ((447 8) (447 15))) (Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "Option" (Short "getOpt"))) ((447 18) (447 30))) (Lannot (Var (Short "s")) ((447 32) (447 32))))) ((447 18) (447 32))) (Lannot (Lit "EOF") ((447 34) (447 38))))) ((447 18) (447 38))))) ((447 8) (447 39))) (Lannot (App Opapp ((Lannot (Var (Short "echo")) ((448 8) (448 11))) (Lannot (Con NONE nil) ((448 13) (448 14))))) ((448 8) (448 14)))) ((446 40) (449 6)))) ((446 32) (449 6))))) ((446 14) (449 7))) (Lannot (Con NONE nil) ((451 4) (451 5))))) ((445 2) (452 4))))))) (Dlet ((455 0) unk) "it" (Lannot (App Opapp ((Lannot (Var (Long "Scheduler" (Short "run_main"))) ((455 0) (455 17))) (Lannot (Fun "" (Mat (Var (Short "")) (((Pcon NONE nil) Lannot (App Opapp ((Lannot (App Opapp ((Lannot (Var (Long "AsyncServer" (Short "serve"))) ((456 2) (456 18))) (Lannot (Lit 8080) ((456 20) (456 23))))) ((456 2) (456 23))) (Lannot (Var (Long "AsyncServer" (Short "echo"))) ((456 25) (456 40))))) ((456 2) (456 40)))))) ((455 20) (457 0))))) ((455 0) (457 1)))))
